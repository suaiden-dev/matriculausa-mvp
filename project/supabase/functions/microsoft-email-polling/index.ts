import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from 'jsr:@supabase/supabase-js@2';

// Configura√ß√£o do Microsoft Graph
const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');
const MICROSOFT_CLIENT_ID = Deno.env.get('MICROSOFT_CLIENT_ID');

// Configura√ß√£o do Supabase
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

interface EmailProcessingConfig {
  userId: string;
  accessToken: string;
  refreshToken: string;
  lastProcessedEmailId?: string;
  isActive: boolean;
}

// Fun√ß√£o para renovar token usando refresh token
async function refreshAccessToken(refreshToken: string): Promise<{ access_token: string; refresh_token: string; expires_in: number }> {
  try {
    console.log('üîÑ Renovando access token...');
    
    // Verificar se √© um refresh token v√°lido
    if (!refreshToken || refreshToken === 'mock_refresh_token') {
      throw new Error('Refresh token inv√°lido ou mock. Usu√°rio precisa fazer login novamente.');
    }
    
    // Se √© um token MSAL, n√£o precisa renovar (MSAL gerencia automaticamente)
    if (refreshToken === 'msal_token') {
      throw new Error('MSAL_TOKEN_PLACEHOLDER'); // Indica que √© token MSAL
    }
    
    const response = await fetch('https://login.microsoftonline.com/common/oauth2/v2.0/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        grant_type: 'refresh_token',
        refresh_token: refreshToken,
        client_id: MICROSOFT_CLIENT_ID,
        scope: 'https://graph.microsoft.com/.default'
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Erro ao renovar token:', errorData);
      throw new Error(`Erro ao renovar token: ${response.status} - ${errorData.error_description || errorData.error}`);
    }

    const data = await response.json();
    console.log('‚úÖ Token renovado com sucesso');
    
    return {
      access_token: data.access_token,
      refresh_token: data.refresh_token || refreshToken, // Manter o refresh token se n√£o vier novo
      expires_in: data.expires_in
    };
  } catch (error) {
    console.error('‚ùå Erro ao renovar token:', error);
    throw error;
  }
}

class MicrosoftGraphService {
  private accessToken: string;

  constructor(accessToken: string) {
    this.accessToken = accessToken;
  }

  async getEmails(sinceTimestamp?: Date) {
    try {
      console.log('GraphService - Buscando emails...');
      
      let filterQuery = '';
      if (sinceTimestamp) {
        const isoDate = sinceTimestamp.toISOString();
        filterQuery = `receivedDateTime ge ${isoDate}`;
      }

      const response = await fetch('https://graph.microsoft.com/v1.0/me/messages', {
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
        method: 'GET',
      });

      if (!response.ok) {
        throw new Error(`Graph API error: ${response.status}`);
      }

      const data = await response.json();
      return data.value || [];
    } catch (error) {
      console.error('Error getting emails:', error);
      throw error;
    }
  }

  async sendReply(emailId: string, replyText: string, originalEmail: any) {
    try {
      console.log(`GraphService - Enviando resposta para email ${emailId}...`);
      
      // Extrair o remetente do email original
      const senderEmail = originalEmail.from?.emailAddress?.address || 'unknown@example.com';
      
      const replyData = {
        message: {
          subject: `Re: ${originalEmail.subject || 'Email'}`,
          body: {
            contentType: 'Text',
            content: replyText
          },
          toRecipients: [
            {
              emailAddress: {
                address: senderEmail
              }
            }
          ]
        }
      };

      const response = await fetch(`https://graph.microsoft.com/v1.0/me/messages/${emailId}/reply`, {
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
        method: 'POST',
        body: JSON.stringify(replyData)
      });

      if (!response.ok) {
        throw new Error(`Reply error: ${response.status}`);
      }

      console.log('GraphService - Resposta enviada com sucesso');
    } catch (error) {
      console.error('Error sending reply:', error);
      throw error;
    }
  }
}

class AIService {
  private apiKey: string;

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  async processEmail(email: any) {
    try {
      console.log(`AIService - Processando email: ${email.subject}`);
      
      if (!this.apiKey) {
        console.log('GEMINI_API_KEY n√£o configurada, usando l√≥gica simples');
        return this.simpleEmailAnalysis(email);
      }

      // Usar Gemini API para an√°lise real
      const prompt = `
        Voc√™ √© um assistente virtual especializado em admiss√µes universit√°rias da Matr√≠cula USA. Analise este email e gere uma resposta personalizada e profissional.
        
        EMAIL RECEBIDO:
        Assunto: ${email.subject}
        Remetente: ${email.from?.emailAddress?.address}
        Conte√∫do: ${email.bodyPreview}
        
        INSTRU√á√ïES:
        - Responda APENAS em JSON v√°lido
        - Seja espec√≠fico e √∫til na resposta
        - Use tom profissional mas amig√°vel
        - Inclua informa√ß√µes relevantes sobre o processo de admiss√£o quando apropriado
        - Se for uma pergunta sobre documentos, oriente sobre upload
        - Se for sobre pagamento, explique o processo
        - Se for sobre bolsas, explique os requisitos
        - SEMPRE responda no mesmo idioma do email original
        
        FORMATO JSON:
        {
          "shouldReply": boolean,
          "priority": "high|medium|low",
          "category": "application|documents|payment|scholarship|admission|general",
          "confidence": 0.0-1.0,
          "response": "Resposta personalizada e √∫til em portugu√™s ou ingl√™s conforme o email original"
        }
      `;

      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      });

      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.status}`);
      }

      const data = await response.json();
      const result = JSON.parse(data.candidates[0].content.parts[0].text);
      
      return {
        analysis: {
          shouldReply: result.shouldReply,
          priority: result.priority,
          category: result.category,
          confidence: result.confidence
        },
        response: result.response
      };

    } catch (error) {
      console.error('Error processing email with AI:', error);
      return this.simpleEmailAnalysis(email);
    }
  }

  private simpleEmailAnalysis(email: any) {
    // Fallback para an√°lise simples
    const subject = email.subject?.toLowerCase() || '';
    const content = email.bodyPreview?.toLowerCase() || '';
    
    // Detectar tipo de email
    let category = 'general';
    let shouldReply = false;
    let response = null;
    
    if (subject.includes('pergunta') || subject.includes('question') || content.includes('?')) {
      category = 'question';
      shouldReply = true;
      response = `Ol√°!\n\nObrigado pelo seu email. Recebemos sua pergunta e nossa equipe est√° analisando para fornecer uma resposta detalhada em breve.\n\nSe precisar de informa√ß√µes sobre documentos, pagamentos ou bolsas de estudo, posso ajudar!\n\nAtenciosamente,\nEquipe Matr√≠cula USA`;
    } else if (subject.includes('document') || subject.includes('documento')) {
      category = 'documents';
      shouldReply = true;
      response = `Ol√°!\n\nObrigado pelo seu email sobre documentos. Para fazer upload de documentos, acesse sua conta no portal da Matr√≠cula USA na se√ß√£o "Documentos".\n\nSe precisar de ajuda, nossa equipe est√° dispon√≠vel!\n\nAtenciosamente,\nEquipe Matr√≠cula USA`;
    } else if (subject.includes('payment') || subject.includes('pagamento')) {
      category = 'payment';
      shouldReply = true;
      response = `Ol√°!\n\nObrigado pelo seu email sobre pagamento. Voc√™ pode fazer pagamentos atrav√©s do portal da Matr√≠cula USA na se√ß√£o "Pagamentos".\n\nSe tiver problemas, entre em contato conosco!\n\nAtenciosamente,\nEquipe Matr√≠cula USA`;
    }

    return {
      analysis: {
        shouldReply,
        priority: shouldReply ? 'medium' : 'low',
        category,
        confidence: 0.6
      },
      response
    };
  }
}

async function processUserEmails(config: EmailProcessingConfig) {
  try {
    console.log(`Processando emails para usu√°rio: ${config.userId}`);
    
    if (!config.isActive) {
      console.log('Processamento desativado para este usu√°rio');
      return;
    }

    // Renovar token se necess√°rio
    let accessToken = config.accessToken;
    let refreshToken = config.refreshToken;
    
    try {
      // Tentar usar o token atual primeiro
      const testService = new MicrosoftGraphService(accessToken);
      await testService.getEmails();
      console.log('‚úÖ Token atual ainda v√°lido');
    } catch (error) {
      console.log('üîÑ Token expirado, tentando renovar...');
      
      try {
        const newTokens = await refreshAccessToken(refreshToken);
        accessToken = newTokens.access_token;
        refreshToken = newTokens.refresh_token;
        
        // Atualizar tokens no banco
        await supabase
          .from('email_processing_configs')
          .update({ 
            access_token: accessToken,
            refresh_token: refreshToken,
            updated_at: new Date().toISOString()
          })
          .eq('user_id', config.userId);
        
        console.log('‚úÖ Tokens renovados e salvos no banco');
      } catch (refreshError) {
        console.error('‚ùå N√£o foi poss√≠vel renovar token:', refreshError.message);
        
        // Se √© token MSAL, n√£o desativar (MSAL gerencia automaticamente)
        if (refreshError.message === 'MSAL_TOKEN_PLACEHOLDER') {
          console.log('‚ÑπÔ∏è Token MSAL detectado. MSAL gerencia tokens automaticamente.');
          throw new Error('MSAL_TOKEN_EXPIRED'); // Indica que token MSAL expirou
        }
        
        // Desativar processamento para este usu√°rio
        await supabase
          .from('email_processing_configs')
          .update({ 
            is_active: false,
            updated_at: new Date().toISOString()
          })
          .eq('user_id', config.userId);
        
        throw new Error(`Token expirado e n√£o foi poss√≠vel renovar. Processamento desativado para usu√°rio ${config.userId}. Usu√°rio precisa fazer login novamente.`);
      }
    }

    const graphService = new MicrosoftGraphService(accessToken);
    const aiService = new AIService(GEMINI_API_KEY);

    // Buscar emails desde a √∫ltima verifica√ß√£o
    const sinceTimestamp = config.lastProcessedEmailId ? 
      new Date(Date.now() - 5 * 60 * 1000) : // √öltimos 5 minutos
      new Date(Date.now() - 24 * 60 * 60 * 1000); // √öltimas 24 horas

    const emails = await graphService.getEmails(sinceTimestamp);
    console.log(`Encontrados ${emails.length} emails para processar`);

    let processedCount = 0;
    let repliedCount = 0;

    for (const email of emails) {
      try {
        // Verificar se j√° foi processado
        if (email.id === config.lastProcessedEmailId) {
          continue;
        }

        // Processar com IA
        const result = await aiService.processEmail(email);
        
        if (result.analysis.shouldReply && result.response) {
          await graphService.sendReply(email.id, result.response, email);
          repliedCount++;
          console.log(`Resposta enviada para: ${email.subject}`);
        }

        processedCount++;
        
        // Atualizar √∫ltimo email processado
        await supabase
          .from('email_processing_configs')
          .update({ lastProcessedEmailId: email.id })
          .eq('user_id', config.userId);

      } catch (error) {
        console.error(`Erro ao processar email ${email.id}:`, error);
      }
    }

    // Atualizar contadores totais se houve processamento
    if (processedCount > 0 || repliedCount > 0) {
      // Buscar contadores atuais
      const { data: currentData } = await supabase
        .from('email_processing_configs')
        .select('total_processed, total_replied')
        .eq('user_id', config.userId)
        .single();

      const currentProcessed = currentData?.total_processed || 0;
      const currentReplied = currentData?.total_replied || 0;

      // Atualizar contadores
      await supabase
        .from('email_processing_configs')
        .update({ 
          total_processed: currentProcessed + processedCount,
          total_replied: currentReplied + repliedCount,
          last_processing_date: new Date().toISOString()
        })
        .eq('user_id', config.userId);
    }

    console.log(`Processamento conclu√≠do: ${processedCount} emails processados, ${repliedCount} respostas enviadas`);
    
    return {
      processedCount,
      repliedCount,
      lastProcessedEmailId: emails[0]?.id || config.lastProcessedEmailId
    };

  } catch (error) {
    console.error('Erro no processamento de emails:', error);
    throw error;
  }
}

Deno.serve(async (req: Request) => {
  try {
    console.log('Edge Function iniciada - Microsoft Email Polling');

    // Verificar se √© uma requisi√ß√£o de processamento de email individual
    if (req.method === 'POST') {
      const body = await req.json();
      
      if (body.email) {
        console.log('üìß Processando email individual:', body.email.subject);
        
        const aiService = new AIService(GEMINI_API_KEY);
        const result = await aiService.processEmail(body.email);
        
        return new Response(JSON.stringify({
          success: true,
          result: result
        }), {
          status: 200,
          headers: { 'Content-Type': 'application/json' }
        });
      }
      
      // Processar a√ß√µes espec√≠ficas
      if (body.action) {
        console.log('üéØ Processando a√ß√£o:', body.action);
        
        if (body.action === 'process_user_emails' && body.user_id) {
          // Buscar configura√ß√£o do usu√°rio espec√≠fico
          const { data: config, error } = await supabase
            .from('email_processing_configs')
            .select('*')
            .eq('user_id', body.user_id)
            .eq('is_active', true)
            .maybeSingle();
            
          if (error || !config) {
            return new Response(JSON.stringify({
              error: 'Configura√ß√£o n√£o encontrada ou inativa',
              message: error?.message || 'Usu√°rio n√£o tem configura√ß√£o ativa'
            }), {
              status: 404,
              headers: { 'Content-Type': 'application/json' }
            });
          }
          
          // Usar token fornecido se dispon√≠vel
          if (body.access_token) {
            config.access_token = body.access_token;
          }
          
          const result = await processUserEmails(config);
          
          return new Response(JSON.stringify({
            success: true,
            message: 'Processamento conclu√≠do',
            result: {
              userId: config.user_id,
              ...result
            }
          }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          });
        }
        
        if (body.action === 'test_ai' && body.user_id) {
          // Teste da IA
          const aiService = new AIService(GEMINI_API_KEY);
          const testEmail = {
            subject: 'Teste da IA',
            body: 'Este √© um email de teste para verificar se a IA est√° funcionando.',
            from: { emailAddress: { address: 'test@example.com' } }
          };
          
          const result = await aiService.processEmail(testEmail);
          
          return new Response(JSON.stringify({
            success: true,
            message: 'Teste da IA conclu√≠do',
            result: result
          }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          });
        }
      }
    }

    // Buscar configura√ß√µes de usu√°rios ativos
    const { data: configs, error } = await supabase
      .from('email_processing_configs')
      .select('*')
      .eq('is_active', true);

    if (error) {
      throw new Error(`Erro ao buscar configura√ß√µes: ${error.message}`);
    }

    if (!configs || configs.length === 0) {
      console.log('Nenhuma configura√ß√£o ativa encontrada');
      return new Response(JSON.stringify({ message: 'Nenhuma configura√ß√£o ativa' }), {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    console.log(`Processando ${configs.length} usu√°rios ativos`);

    const results = [];
    for (const config of configs) {
      try {
        const result = await processUserEmails(config);
        results.push({
          userId: config.user_id,
          ...result
        });
      } catch (error) {
        console.error(`Erro ao processar usu√°rio ${config.user_id}:`, error);
        results.push({
          userId: config.user_id,
          error: error.message
        });
      }
    }

    return new Response(JSON.stringify({
      message: 'Processamento conclu√≠do',
      results,
      timestamp: new Date().toISOString()
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Erro na Edge Function:', error);
    return new Response(JSON.stringify({
      error: 'Erro interno do servidor',
      message: error.message
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
});