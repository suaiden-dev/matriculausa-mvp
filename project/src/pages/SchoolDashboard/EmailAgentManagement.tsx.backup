import React, { useState, useEffect, useCallback, useRef } from 'react';

// Fun√ß√£o para gerar o final_prompt baseado na transcri√ß√£o
const generateFinalPrompt = (webhookResult: any): string => {
  if (!webhookResult || !webhookResult.description) {
    return '';
  }
  
  // Extrair informa√ß√µes da transcri√ß√£o
  const title = webhookResult.title || '';
  const courses = webhookResult.courses || [];
  
  // Gerar prompt baseado na transcri√ß√£o
  const knowledgeBase = courses.map((course: string, index: number) => 
    `## ${title || `Documento ${index + 1}`}\n\n${course}`
  ).join('\n\n---\n\n');
  
  return `You are a helpful email assistant for university admissions. Use the knowledge base to answer questions about admissions, scholarships, and university processes.

<knowledge-base>
${knowledgeBase}
</knowledge-base>

IMPORTANT: Use the information from the knowledge base above to answer student questions. If the information is not in the knowledge base, respond generally and suggest that the student contact the university directly for specific information.`;
};
import {
  Bot,
  Plus,
  Edit,
  Trash2,
  Play,
  Pause,
  Settings,
  BookOpen,
  Mail,
  AlertCircle,
  CheckCircle,
  Loader2,
  X,
  Save,
  Sparkles,
  FileText,
  Brain,
  MessageCircle,
  HelpCircle,
  ExternalLink,
  Grid3X3,
  List,
  Send,
} from 'lucide-react';
import { useAuth } from '../../hooks/useAuth';
import { useUniversity } from '../../context/UniversityContext';
import { supabase } from '../../lib/supabase';
import EmailKnowledgeUpload from '../../components/EmailKnowledgeUpload';

interface EmailAgent {
  id: string;
  ai_name: string;
  company_name: string;
  personality: string;
  sector: string;
  agent_type: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  knowledge_documents_count: number;
}

const personalityOptions = [
  { value: "Friendly", label: "Friendly", description: "Warm and welcoming approach" },
  { value: "Professional", label: "Professional", description: "Formal and reliable" },
  { value: "Helpful", label: "Helpful", description: "Always ready to assist" },
  { value: "Enthusiastic", label: "Enthusiastic", description: "Energetic and positive" },
  { value: "Patient", label: "Patient", description: "Calm and understanding" },
  { value: "Expert", label: "Expert", description: "Knowledgeable and authoritative" }
];

const agentTypeOptions = [
  "Admissions",
  "Registrar's Office", 
  "Finance",
  "Student Services",
  "Academic Affairs",
  "International Students",
  "Scholarships",
  "Housing",
  "Career Services",
  "Library Services"
];

interface EmailAgentManagementProps {
  activeEmailConfig?: {
    id: string;
    email_address: string;
  };
}

export default function EmailAgentManagement({ activeEmailConfig }: EmailAgentManagementProps = {}) {
  const { user } = useAuth();
  const { university } = useUniversity();
  const [agents, setAgents] = useState<EmailAgent[]>([]);
  const [loading, setLoading] = useState(true);
  const [actionLoading, setActionLoading] = useState<string | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [editingAgent, setEditingAgent] = useState<EmailAgent | null>(null);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [customInstructionsExpanded, setCustomInstructionsExpanded] = useState(false);
  const [pendingFiles, setPendingFiles] = useState<File[]>([]);
  const uploadRef = useRef<{ uploadPendingFiles: (universityId: string) => Promise<any[]> } | null>(null);

  // Estados do formul√°rio
  const [formData, setFormData] = useState({
    ai_name: '',
    company_name: university?.name || '',
    agent_type: '',
    personality: '',
    custom_prompt: ''
  });
  const [formLoading, setFormLoading] = useState(false);

  useEffect(() => {
    if (university?.id || activeEmailConfig?.id) {
      fetchAgents();
    }
  }, [university?.id, activeEmailConfig?.id]);

  const fetchAgents = async () => {
    try {
      setLoading(true);
      
      // NOVO SISTEMA: Se temos activeEmailConfig, usar ai_email_agents (isolado por conta)
      if (activeEmailConfig?.id) {
        console.log('üîç [EmailAgentManagement] Carregando agentes para conta espec√≠fica:', activeEmailConfig.email_address);
        
        const { data, error } = await supabase
          .from('ai_email_agents')
          .select(`
            id,
            ai_name,
            company_name,
            personality,
            agent_type,
            is_active,
            created_at,
            updated_at
          `)
          .eq('email_configuration_id', activeEmailConfig.id)
          .order('created_at', { ascending: false });

        if (error) throw error;

        // Buscar contagem de documentos para cada agente
        const agentsWithCount = await Promise.all(
          data?.map(async (agent) => {
            const { count } = await supabase
              .from('email_knowledge_documents')
              .select('*', { count: 'exact', head: true })
              .eq('agent_id', agent.id);
            
            return {
              ...agent,
              sector: 'Education', // Default para compatibilidade
              knowledge_documents_count: count || 0
            };
          }) || []
        );

        setAgents(agentsWithCount);
        console.log('‚úÖ [EmailAgentManagement] Agentes carregados para conta espec√≠fica:', agentsWithCount.length);
      } else {
        // SISTEMA ANTIGO: Fallback para universidade (compatibilidade)
        console.log('üîç [EmailAgentManagement] Carregando agentes por universidade (sistema antigo)');
        
        const { data, error } = await supabase
          .from('ai_configurations')
          .select(`
            id,
            ai_name,
            company_name,
            personality,
            sector,
            agent_type,
            is_active,
            created_at,
            updated_at
          `)
          .eq('university_id', university?.id)
          .eq('agent_type', 'email')
          .order('created_at', { ascending: false });

        if (error) throw error;

        // Buscar contagem de documentos para cada agente
        const agentsWithCount = await Promise.all(
          data?.map(async (agent) => {
            const { count } = await supabase
              .from('email_knowledge_documents')
              .select('*', { count: 'exact', head: true })
              .eq('agent_id', agent.id);
            
            return {
              ...agent,
              knowledge_documents_count: count || 0
            };
          }) || []
        );

        setAgents(agentsWithCount);
        console.log('‚úÖ [EmailAgentManagement] Agentes carregados por universidade:', agentsWithCount.length);
      }
    } catch (error) {
      console.error('Error fetching agents:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSmoothTransition = (showForm: boolean) => {
    setIsTransitioning(true);
    setTimeout(() => {
      setShowCreateForm(showForm);
      setIsTransitioning(false);
    }, 150);
  };

  const handleUpdateAgent = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!editingAgent) {
      alert("Nenhum agente selecionado para edi√ß√£o.");
      return;
    }

    if (!formData.ai_name || !formData.company_name || !formData.agent_type || !formData.personality) {
      alert("Por favor, preencha todos os campos obrigat√≥rios.");
      return;
    }

    try {
      setFormLoading(true);
      
      const { error } = await supabase
        .from('ai_configurations')
        .update({
          ai_name: formData.ai_name,
          company_name: formData.company_name,
          agent_type: formData.agent_type,
          personality: formData.personality,
          custom_prompt: formData.custom_prompt,
          final_prompt: formData.custom_prompt,
          updated_at: new Date().toISOString()
        })
        .eq('id', editingAgent.id);

      if (error) throw error;

      alert('‚úÖ Agente atualizado com sucesso!');
      
      // Recarregar dados
      await fetchAgents();
      
      // Voltar para a lista
      setEditingAgent(null);
      setFormData({
        ai_name: "",
        company_name: university?.name || "",
        agent_type: "",
        personality: "",
        custom_prompt: ""
      });
      handleSmoothTransition(false);
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar agente:', error);
      alert('Erro ao atualizar agente. Tente novamente.');
    } finally {
      setFormLoading(false);
    }
  };

  const handleCreateAgent = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!user) {
      alert("You must be logged in to create an agent.");
      return;
    }

    if (!formData.ai_name || !formData.company_name || !formData.agent_type || !formData.personality) {
      alert("Please fill in all required fields.");
      return;
    }

    // VERIFICAR SE J√Å EXISTE UM AGENTE PARA ESTA UNIVERSIDADE
    try {
      const { data: existingAgent, error: checkError } = await supabase
        .from('ai_configurations')
        .select('id, ai_name, is_active')
        .eq('university_id', university.id)
        .single();

      if (checkError && checkError.code !== 'PGRST116') {
        throw new Error(`Erro ao verificar agente existente: ${checkError.message}`);
      }

      if (existingAgent) {
        alert(`‚ùå LIMITE ATINGIDO: J√° existe um agente para esta universidade: "${existingAgent.ai_name}".\n\nüìã REGRAS:\n‚Ä¢ Apenas 1 agente por universidade\n‚Ä¢ Use a op√ß√£o "Editar Agente" para modificar o existente\n‚Ä¢ Esta restri√ß√£o garante melhor organiza√ß√£o`);
        return;
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar agente existente:', error);
      alert('Erro ao verificar agente existente. Tente novamente.');
      return;
    }

    try {
      setFormLoading(true);
      
      // NOVO SISTEMA: Se temos activeEmailConfig, criar em ai_email_agents (isolado por conta)
      if (activeEmailConfig?.id) {
        console.log('üîÑ [EmailAgentManagement] Criando agente para conta espec√≠fica:', activeEmailConfig.email_address);
        
        const { data: agent, error } = await supabase
          .from('ai_email_agents')
          .insert({
            email_configuration_id: activeEmailConfig.id,
            user_id: user.id,
            ai_name: formData.ai_name,
            agent_type: formData.agent_type,
            personality: formData.personality,
            custom_prompt: formData.custom_prompt,
            is_active: true
          })
          .select()
          .single();

        if (error) throw error;

        console.log('‚úÖ [EmailAgentManagement] Agente criado para conta espec√≠fica:', agent.id);
      } else {
        // SISTEMA ANTIGO: Fallback para universidade (compatibilidade)
        console.log('üîÑ [EmailAgentManagement] Criando agente por universidade (sistema antigo)');
        
        if (!university) {
          alert("University information is required.");
          return;
        }

        const { data: agent, error } = await supabase
          .from('ai_configurations')
          .insert({
            user_id: user.id,
            university_id: university.id,
            ai_name: formData.ai_name,
            company_name: formData.company_name,
            agent_type: 'email',
            personality: formData.personality,
            sector: 'Education',
            custom_prompt: formData.custom_prompt,
            final_prompt: formData.custom_prompt,
            is_active: false
          })
          .select()
          .single();

        if (error) throw error;

        console.log('‚úÖ [EmailAgentManagement] Agente criado por universidade:', agent.id);
      }

      if (error) throw error;

      // PROCESSAR DOCUMENTOS PENDENTES AP√ìS CRIA√á√ÉO DO AGENTE
      if (pendingFiles.length > 0) {
        try {
          console.log('üîÑ [EmailAgentManagement] Processando documentos pendentes para agente:', agent.id);
          
          // Buscar documentos sem agent_id associado criados recentemente (aumentar tempo para 30 minutos)
          console.log('üîç [EmailAgentManagement] Buscando documentos pendentes para university_id:', university.id);
          const { data: pendingDocs, error: fetchError } = await supabase
            .from('email_knowledge_documents')
            .select('id, document_name, created_at, file_url, transcription, transcription_status')
            .eq('university_id', university.id)
            .is('agent_id', null)
            .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString()) // √öltimos 30 minutos
            .order('created_at', { ascending: false })
            .limit(pendingFiles.length);
          
          // Se n√£o encontrou documentos pendentes, buscar documentos com transcri√ß√µes j√° processadas
          if (!pendingDocs || pendingDocs.length === 0) {
            console.log('üîç [EmailAgentManagement] Buscando documentos com transcri√ß√µes j√° processadas...');
            const { data: processedDocs, error: processedError } = await supabase
              .from('email_knowledge_documents')
              .select('id, document_name, created_at, file_url, transcription, transcription_status')
              .eq('university_id', university.id)
              .is('agent_id', null)
              .eq('transcription_status', 'completed')
              .not('transcription', 'is', null)
              .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString())
              .order('created_at', { ascending: false })
              .limit(pendingFiles.length);
            
            if (processedDocs && processedDocs.length > 0) {
              console.log('‚úÖ [EmailAgentManagement] Encontrados documentos com transcri√ß√µes processadas:', processedDocs.length);
              pendingDocs = processedDocs;
            }
          }
          
          console.log('üîç [EmailAgentManagement] Resultado da busca:', { pendingDocs, fetchError });

          if (fetchError) {
            console.error('‚ùå Erro ao buscar documentos pendentes:', fetchError);
          } else if (pendingDocs && pendingDocs.length > 0) {
            console.log('‚úÖ [EmailAgentManagement] Encontrados documentos pendentes:', pendingDocs.length);
            
            // PASSO 1: Associar documentos ao agente
            console.log('üîÑ [EmailAgentManagement] Associando documentos ao agente...');
            const { error: updateError } = await supabase
              .from('email_knowledge_documents')
              .update({ agent_id: agent.id })
              .in('id', pendingDocs.map(doc => doc.id));

            if (updateError) {
              console.error('‚ùå [EmailAgentManagement] Erro ao associar documentos:', updateError);
              throw updateError;
            }
            
            console.log('‚úÖ [EmailAgentManagement] Documentos associados ao agente com sucesso');
            
            // PASSO 2: Processar transcri√ß√£o para cada documento
            let processedCount = 0;
            let webhookResults = [];
            
            for (const doc of pendingDocs) {
              try {
                console.log('üîÑ [EmailAgentManagement] Processando documento:', doc.document_name);
                
                // Verificar se j√° tem transcri√ß√£o salva
                if (doc.transcription && doc.transcription_status === 'completed') {
                  console.log('‚úÖ [EmailAgentManagement] Documento j√° tem transcri√ß√£o:', doc.document_name);
                  
                  // Usar transcri√ß√£o j√° salva
                  const transcriptionData = JSON.parse(doc.transcription);
                  webhookResults.push(transcriptionData);
                  processedCount++;
                } else {
                  console.log('üîÑ [EmailAgentManagement] Enviando webhook para transcri√ß√£o:', doc.document_name);
                  
                  // Enviar webhook para transcri√ß√£o
                  const webhookPayload = {
                    user_id: 'system',
                    agent_id: agent.id,
                    document_id: doc.id,
                    file_name: doc.document_name,
                    file_type: 'application/pdf',
                    file_url: doc.file_url
                  };
                  
                  const webhookResponse = await fetch('https://nwh.suaiden.com/webhook/docs-matriculausa', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(webhookPayload),
                  });
                  
                  if (webhookResponse.ok) {
                    const webhookResult = await webhookResponse.json();
                    console.log('‚úÖ [EmailAgentManagement] Webhook processado com sucesso');
                    webhookResults.push(webhookResult);
                    processedCount++;
                  } else {
                    console.error('‚ùå [EmailAgentManagement] Webhook failed:', webhookResponse.status, webhookResponse.statusText);
                  }
                }
              } catch (webhookError) {
                console.error('‚ùå [EmailAgentManagement] Erro ao processar documento:', webhookError);
              }
            }
            
            // PASSO 3: Atualizar ai_configurations com todas as transcri√ß√µes
            if (processedCount > 0) {
              console.log('üîÑ [EmailAgentManagement] Atualizando ai_configurations com transcri√ß√µes...');
              console.log('üìä [EmailAgentManagement] DADOS PARA SALVAR NO WEBHOOK_RESULT:');
              console.log('üìä [EmailAgentManagement] - processedCount:', processedCount);
              console.log('üìä [EmailAgentManagement] - webhookResults length:', webhookResults.length);
              console.log('üìä [EmailAgentManagement] - webhookResults content:', JSON.stringify(webhookResults, null, 2));
              
              // Combinar todas as transcri√ß√µes em uma √∫nica base de conhecimento
              const combinedKnowledge = webhookResults.map((result, index) => {
                const courses = result.courses || [];
                console.log(`üìä [EmailAgentManagement] Processando documento ${index + 1}:`, {
                  title: result.title,
                  coursesCount: courses.length,
                  description: result.description?.substring(0, 100) + '...'
                });
                return courses.map((course: string) => 
                  `## Documento ${index + 1}\n\n${course}`
                ).join('\n\n');
              }).join('\n\n---\n\n');
              
              console.log('üìä [EmailAgentManagement] COMBINED KNOWLEDGE LENGTH:', combinedKnowledge.length);
              console.log('üìä [EmailAgentManagement] COMBINED KNOWLEDGE PREVIEW:', combinedKnowledge.substring(0, 200) + '...');
              
              const finalPrompt = `You are a helpful email assistant for university admissions. Use the knowledge base to answer questions about admissions, scholarships, and university processes.

<knowledge-base>
${combinedKnowledge}
</knowledge-base>

IMPORTANT: Use the information from the knowledge base above to answer student questions. If the information is not in the knowledge base, respond generally and suggest that the student contact the university directly for specific information.`;
              
              console.log('üîÑ [EmailAgentManagement] SALVANDO NO AI_CONFIGURATIONS:');
              console.log('üîÑ [EmailAgentManagement] - agent.id:', agent.id);
              console.log('üîÑ [EmailAgentManagement] - webhook_status: processed');
              console.log('üîÑ [EmailAgentManagement] - webhook_result length:', JSON.stringify(webhookResults).length);
              console.log('üîÑ [EmailAgentManagement] - final_prompt length:', finalPrompt.length);
              
              const { error: updateConfigError } = await supabase
                .from('ai_configurations')
                .update({
                  webhook_status: 'processed',
                  webhook_result: webhookResults,
                  final_prompt: finalPrompt,
                  is_active: true
                })
                .eq('id', agent.id);
              
              if (updateConfigError) {
                console.error('‚ùå [EmailAgentManagement] ERRO ao atualizar ai_configurations:', updateConfigError);
                console.error('‚ùå [EmailAgentManagement] ERRO details:', JSON.stringify(updateConfigError, null, 2));
              } else {
                console.log('‚úÖ [EmailAgentManagement] ai_configurations atualizado com sucesso');
                console.log('‚úÖ [EmailAgentManagement] WEBHOOK_RESULT SALVO COM SUCESSO!');
                console.log('‚úÖ [EmailAgentManagement] FINAL_PROMPT SALVO COM SUCESSO!');
                console.log('üéâ [EmailAgentManagement] Agente ativado e pronto para uso!');
                
                // Verificar se foi realmente salvo
                const { data: verifyData, error: verifyError } = await supabase
                  .from('ai_configurations')
                  .select('webhook_result, final_prompt, webhook_status')
                  .eq('id', agent.id)
                  .single();
                
                if (verifyError) {
                  console.error('‚ùå [EmailAgentManagement] ERRO ao verificar salvamento:', verifyError);
                } else {
                  console.log('‚úÖ [EmailAgentManagement] VERIFICA√á√ÉO P√ìS-SALVAMENTO:');
                  console.log('‚úÖ [EmailAgentManagement] - webhook_status:', verifyData.webhook_status);
                  console.log('‚úÖ [EmailAgentManagement] - webhook_result exists:', !!verifyData.webhook_result);
                  console.log('‚úÖ [EmailAgentManagement] - webhook_result length:', JSON.stringify(verifyData.webhook_result || {}).length);
                  console.log('‚úÖ [EmailAgentManagement] - final_prompt exists:', !!verifyData.final_prompt);
                  console.log('‚úÖ [EmailAgentManagement] - final_prompt length:', verifyData.final_prompt?.length || 0);
                }
              }
            } else {
              console.log('‚ö†Ô∏è [EmailAgentManagement] Nenhuma transcri√ß√£o foi processada com sucesso');
              // Mesmo sem transcri√ß√µes, ativar o agente com prompt b√°sico
              const { error: updateConfigError } = await supabase
                .from('ai_configurations')
                .update({
                  webhook_status: 'no_documents',
                  final_prompt: formData.custom_prompt || `You are ${formData.ai_name}, an AI assistant for ${formData.company_name}. Help students with their questions about admissions and university processes.`,
                  is_active: true
                })
                .eq('id', agent.id);
              
              if (updateConfigError) {
                console.error('‚ùå [EmailAgentManagement] Erro ao ativar agente sem documentos:', updateConfigError);
              } else {
                console.log('‚úÖ [EmailAgentManagement] Agente ativado sem documentos');
              }
            }
          } else {
            console.log('‚ö†Ô∏è Nenhum documento pendente encontrado - ativando agente sem documentos');
            // Ativar agente mesmo sem documentos
            const { error: updateConfigError } = await supabase
              .from('ai_configurations')
              .update({
                webhook_status: 'no_documents',
                final_prompt: formData.custom_prompt || `You are ${formData.ai_name}, an AI assistant for ${formData.company_name}. Help students with their questions about admissions and university processes.`,
                is_active: true
              })
              .eq('id', agent.id);
            
            if (updateConfigError) {
              console.error('‚ùå [EmailAgentManagement] Erro ao ativar agente sem documentos:', updateConfigError);
            } else {
              console.log('‚úÖ [EmailAgentManagement] Agente ativado sem documentos');
            }
          }
        } catch (error) {
          console.error('‚ùå Erro ao processar documentos pendentes:', error);
          // Mesmo com erro, tentar ativar o agente
          try {
            const { error: updateConfigError } = await supabase
              .from('ai_configurations')
              .update({
                webhook_status: 'error_processing_documents',
                final_prompt: formData.custom_prompt || `You are ${formData.ai_name}, an AI assistant for ${formData.company_name}. Help students with their questions about admissions and university processes.`,
                is_active: true
              })
              .eq('id', agent.id);
            
            if (updateConfigError) {
              console.error('‚ùå [EmailAgentManagement] Erro ao ativar agente ap√≥s erro:', updateConfigError);
            } else {
              console.log('‚úÖ [EmailAgentManagement] Agente ativado ap√≥s erro no processamento');
            }
          } catch (activationError) {
            console.error('‚ùå [EmailAgentManagement] Erro cr√≠tico ao ativar agente:', activationError);
          }
        }
      } else {
        // Sem documentos pendentes, buscar documentos j√° processados
        console.log('üîÑ [EmailAgentManagement] Nenhum documento pendente - buscando documentos j√° processados');
        console.log('üîç [EmailAgentManagement] Buscando APENAS da universidade:', university.id);
        
        try {
          // Buscar documentos processados APENAS da universidade atual
          const { data: processedDocs, error: fetchProcessedError } = await supabase
            .from('email_knowledge_documents')
            .select('id, document_name, transcription, transcription_status, created_at')
            .eq('university_id', university.id) // APENAS desta universidade
            .is('agent_id', null) // Sem agente associado
            .eq('transcription_status', 'completed') // Apenas processados
            .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString()) // √öltimos 30 minutos
            .order('created_at', { ascending: false })
            .limit(10);
          
          if (fetchProcessedError) {
            console.error('‚ùå [EmailAgentManagement] Erro ao buscar documentos processados:', fetchProcessedError);
          }
          
          if (processedDocs && processedDocs.length > 0) {
            console.log('üìä [EmailAgentManagement] DOCUMENTOS PROCESSADOS ENCONTRADOS:', processedDocs.length);
            console.log('üîç [EmailAgentManagement] Verificando se documentos pertencem √† universidade correta');
            
            // Processar transcri√ß√µes j√° salvas
            const webhookResults = [];
            for (const doc of processedDocs) {
              try {
                console.log('üîÑ [EmailAgentManagement] Processando transcri√ß√£o j√° salva:', doc.document_name);
                console.log('üîç [EmailAgentManagement] - Documento criado em:', doc.created_at);
                
                // Verifica√ß√£o adicional de seguran√ßa
                const docCreatedAt = new Date(doc.created_at);
                const now = new Date();
                const timeDiff = now.getTime() - docCreatedAt.getTime();
                const minutesDiff = timeDiff / (1000 * 60);
                
                if (minutesDiff > 30) {
                  console.log('‚ö†Ô∏è [EmailAgentManagement] Documento muito antigo, pulando:', doc.document_name);
                  continue;
                }
                
                if (doc.transcription) {
                  const transcriptionData = typeof doc.transcription === 'string' 
                    ? JSON.parse(doc.transcription) 
                    : doc.transcription;
                  
                  webhookResults.push(transcriptionData);
                  console.log('‚úÖ [EmailAgentManagement] Transcri√ß√£o processada:', doc.document_name);
                }
              } catch (error) {
                console.error('‚ùå [EmailAgentManagement] Erro ao processar transcri√ß√£o:', error);
              }
            }
            
            if (webhookResults.length > 0) {
            console.log('üìä [EmailAgentManagement] Salvando webhook_result na ai_configurations');
              
              // Combinar todas as transcri√ß√µes em uma √∫nica base de conhecimento
              const combinedKnowledge = webhookResults.map((result, index) => {
                const courses = result.courses || [];
                return courses.map((course: string) => 
                  `## Documento ${index + 1}\n\n${course}`
                ).join('\n\n');
              }).join('\n\n---\n\n');
              
              const finalPrompt = `You are a helpful email assistant for university admissions. Use the knowledge base to answer questions about admissions, scholarships, and university processes.

<knowledge-base>
${combinedKnowledge}
</knowledge-base>

Use this knowledge to provide accurate and helpful responses to students.`;
              
              const { error: updateConfigError } = await supabase
                .from('ai_configurations')
                .update({
                  webhook_status: 'processed',
                  webhook_result: webhookResults,
                  final_prompt: finalPrompt,
                  is_active: true
                })
                .eq('id', agent.id);
              
              if (updateConfigError) {
                console.error('‚ùå [EmailAgentManagement] Erro ao salvar webhook_result:', updateConfigError);
                throw updateConfigError;
              }
              
              console.log('‚úÖ [EmailAgentManagement] Webhook_result salvo com sucesso');
            } else {
              console.log('‚ö†Ô∏è [EmailAgentManagement] Nenhuma transcri√ß√£o v√°lida encontrada');
              // Ativar agente sem transcri√ß√µes
              const { error: updateConfigError } = await supabase
                .from('ai_configurations')
                .update({
                  webhook_status: 'no_documents',
                  final_prompt: formData.custom_prompt || `You are ${formData.ai_name}, an AI assistant for ${formData.company_name}. Help students with their questions about admissions and university processes.`,
                  is_active: true
                })
                .eq('id', agent.id);
              
              if (updateConfigError) {
                console.error('‚ùå [EmailAgentManagement] Erro ao ativar agente:', updateConfigError);
              } else {
                console.log('‚úÖ [EmailAgentManagement] Agente ativado sem transcri√ß√µes');
              }
            }
          } else {
            console.log('‚ö†Ô∏è [EmailAgentManagement] Nenhum documento processado encontrado - ativando agente diretamente');
            
            const { error: updateConfigError } = await supabase
              .from('ai_configurations')
              .update({
                webhook_status: 'no_documents',
                final_prompt: formData.custom_prompt || `You are ${formData.ai_name}, an AI assistant for ${formData.company_name}. Help students with their questions about admissions and university processes.`,
                is_active: true
              })
              .eq('id', agent.id);
            
            if (updateConfigError) {
              console.error('‚ùå [EmailAgentManagement] Erro ao ativar agente:', updateConfigError);
            } else {
              console.log('‚úÖ [EmailAgentManagement] Agente ativado com sucesso');
            }
          }
        } catch (error) {
          console.error('‚ùå [EmailAgentManagement] Erro ao processar documentos:', error);
        }
      }

      setAgents(prev => [agent, ...prev]);
      setShowCreateForm(false);
      setFormData({
        ai_name: '',
        company_name: university.name || '',
        agent_type: '',
        personality: '',
        custom_prompt: ''
      });
      setPendingFiles([]);
      handleSmoothTransition(false);
    } catch (error) {
      console.error('Error creating agent:', error);
      alert('Error creating agent. Please try again.');
    } finally {
      setFormLoading(false);
    }
  };

  const handleToggleAgent = async (agentId: string, currentStatus: boolean) => {
    try {
      setActionLoading(agentId);
      
      // Determinar qual tabela usar baseado no sistema ativo
      const tableName = activeEmailConfig?.id ? 'ai_email_agents' : 'ai_configurations';
      
      const { error } = await supabase
        .from(tableName)
        .update({ is_active: !currentStatus })
        .eq('id', agentId);

      if (error) throw error;

      setAgents(prev => prev.map(agent => 
        agent.id === agentId 
          ? { ...agent, is_active: !currentStatus }
          : agent
      ));
    } catch (error) {
      console.error('Error toggling agent:', error);
    } finally {
      setActionLoading(null);
    }
  };

  const handleDeleteAgent = async (agentId: string) => {
    if (!confirm('Are you sure you want to delete this agent? This action cannot be undone.')) {
      return;
    }

    try {
      setActionLoading(agentId);
      
      // Determinar qual tabela usar baseado no sistema ativo
      const tableName = activeEmailConfig?.id ? 'ai_email_agents' : 'ai_configurations';
      
      const { error } = await supabase
        .from(tableName)
        .delete()
        .eq('id', agentId);

      if (error) throw error;

      setAgents(prev => prev.filter(agent => agent.id !== agentId));
    } catch (error) {
      console.error('Error deleting agent:', error);
    } finally {
      setActionLoading(null);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <Mail className="h-6 w-6 text-blue-600" />
            Email AI Agents
          </h1>
          <p className="text-gray-600 mt-1">
            Create and manage AI agents for automated email processing
          </p>
        </div>
        {!showCreateForm && agents.length === 0 && (
          <button
            onClick={() => handleSmoothTransition(true)}
            className="bg-[#05294E] hover:bg-[#05294E]/90 text-white px-4 py-2.5 rounded-xl font-medium transition-all duration-200 hover:shadow-md text-sm flex items-center gap-2"
          >
            <Bot className="h-4 w-4" />
            Create New Agent
          </button>
        )}
      </div>

      {/* Main Content */}
      <div className="relative overflow-hidden">
        {isTransitioning && (
          <div className="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center z-10">
            <div className="flex items-center gap-2 text-[#05294E]">
              <Loader2 className="h-5 w-5 animate-spin" />
              <span className="font-medium">Loading...</span>
            </div>
          </div>
        )}

        {!showCreateForm ? (
          /* Agents List */
          <div className="space-y-4">
            {agents.length === 0 ? (
              <div className="text-center py-12 bg-gray-50 rounded-lg">
                <Bot className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  No email AI agents created
                </h3>
                <p className="text-gray-600 mb-4">
                  Create your first AI agent to start processing emails automatically
                </p>
                <button
                  onClick={() => handleSmoothTransition(true)}
                  className="bg-[#05294E] hover:bg-[#05294E]/90 text-white px-4 py-2 rounded-lg flex items-center gap-2 mx-auto transition-colors"
                >
                  <Plus className="h-4 w-4" />
                  Create Your First Agent
                </button>
              </div>
            ) : (
              agents.map((agent) => (
                <div key={agent.id} className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <Bot className="h-5 w-5 text-blue-600" />
                        <h3 className="text-lg font-semibold text-gray-900">
                          {agent.ai_name}
                        </h3>
                        <div className="flex items-center gap-2">
                          {agent.is_active ? (
                            <span className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              <CheckCircle className="h-3 w-3" />
                              Active
                            </span>
                          ) : (
                            <span className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                              <Pause className="h-3 w-3" />
                              Inactive
                            </span>
                          )}
                        </div>
                      </div>
                      
                      <p className="text-gray-600 mb-3">{agent.personality}</p>
                      
                      <div className="flex items-center gap-4 text-sm text-gray-500">
                        <span className="flex items-center gap-1">
                          <BookOpen className="h-4 w-4" />
                          {agent.knowledge_documents_count} documents
                        </span>
                        <span>Created {new Date(agent.created_at).toLocaleDateString('en-US')}</span>
                      </div>
                    </div>

                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => handleToggleAgent(agent.id, agent.is_active)}
                        disabled={actionLoading === agent.id}
                        className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                          agent.is_active
                            ? 'bg-red-100 text-red-700 hover:bg-red-200'
                            : 'bg-green-100 text-green-700 hover:bg-green-200'
                        } disabled:opacity-50`}
                      >
                        {actionLoading === agent.id ? (
                          <Loader2 className="h-4 w-4 animate-spin" />
                        ) : agent.is_active ? (
                          <>
                            <Pause className="h-4 w-4 mr-1" />
                            Deactivate
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4 mr-1" />
                            Activate
                          </>
                        )}
                      </button>

                      <button
                        onClick={() => {
                          setEditingAgent(agent);
                          setFormData({
                            ai_name: agent.ai_name,
                            company_name: agent.company_name,
                            agent_type: agent.agent_type,
                            personality: agent.personality,
                            custom_prompt: agent.custom_prompt || ""
                          });
                          handleSmoothTransition(true);
                        }}
                        className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                        title="Editar Agente"
                      >
                        <Edit className="h-4 w-4" />
                      </button>

                      <button
                        onClick={() => handleDeleteAgent(agent.id)}
                        disabled={actionLoading === agent.id}
                        className="p-2 text-gray-400 hover:text-red-600 transition-colors disabled:opacity-50"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        ) : (
          /* Create/Edit Form */
          <div className={`p-4 sm:p-6 bg-gray-50 rounded-xl transition-all duration-300 ease-in-out transform ${
            isTransitioning ? 'opacity-0 translate-x-4' : 'opacity-100 translate-x-0'
          }`}>
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-lg sm:text-xl font-semibold text-gray-900 flex items-center gap-2">
                  <Bot className="h-5 w-5 text-[#05294E]" />
                  {editingAgent ? 'Edit AI Agent' : 'Create New Agent'}
                </h3>
                <p className="text-gray-600 mt-1">
                  {editingAgent
                    ? 'Update your AI agent configuration and settings'
                    : 'Configure your AI agent with custom instructions and knowledge base'
                  }
                </p>
              </div>
              <button
                onClick={() => {
                  setEditingAgent(null);
                  setFormData({
                    ai_name: "",
                    company_name: university?.name || "",
                    agent_type: "",
                    personality: "",
                    custom_prompt: ""
                  });
                  handleSmoothTransition(false);
                }}
                className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2.5 rounded-xl font-medium transition-all duration-200 text-sm flex items-center gap-2"
              >
                <X className="h-4 w-4" />
                {editingAgent ? 'Cancel Edit' : 'Back to List'}
              </button>
            </div>

            <form onSubmit={editingAgent ? handleUpdateAgent : handleCreateAgent} className="space-y-4 sm:space-y-6">
              {/* Grid responsivo para campos principais */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                {/* Agent Name */}
                <div className="w-full">
                  <label htmlFor="ai_name" className="block text-sm font-medium text-gray-700 mb-2">
                    Agent Name *
                  </label>
                  <input
                    id="ai_name"
                    type="text"
                    value={formData.ai_name}
                    onChange={(e) => handleInputChange("ai_name", e.target.value)}
                    placeholder="e.g. Maria Assistant"
                    className="w-full px-3 sm:px-4 py-3 sm:py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-colors text-base"
                    required
                  />
                </div>

                {/* Agent Type */}
                <div className="w-full">
                  <label htmlFor="agent_type" className="block text-sm font-medium text-gray-700 mb-2">
                    Agent Type *
                  </label>
                  <select
                    id="agent_type"
                    value={formData.agent_type}
                    onChange={(e) => handleInputChange("agent_type", e.target.value)}
                    className="w-full px-3 sm:px-4 py-3 sm:py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-colors text-base"
                    required
                  >
                    <option value="">Select agent type</option>
                    {agentTypeOptions.map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                </div>

                {/* Personality */}
                <div className="w-full">
                  <label htmlFor="personality" className="block text-sm font-medium text-gray-700 mb-2">
                    Personality *
                  </label>
                  <select
                    id="personality"
                    value={formData.personality}
                    onChange={(e) => handleInputChange("personality", e.target.value)}
                    className="w-full px-3 sm:px-4 py-3 sm:py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-colors text-base"
                    required
                  >
                    <option value="">Select personality</option>
                    {personalityOptions.map(option => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Custom Instructions - Collapsible */}
              <div className="bg-white p-4 sm:p-4 rounded-lg border border-gray-200">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-2 mb-3">
                  <label className="text-sm font-medium text-gray-700">
                    Custom Instructions (Optional)
                  </label>
                  <div className="flex flex-wrap items-center gap-2">
                    <button
                      type="button"
                      onClick={() => setCustomInstructionsExpanded(!customInstructionsExpanded)}
                      className="flex items-center gap-1 px-3 py-2 sm:py-1 text-sm bg-[#05294E]/10 text-[#05294E] rounded-lg hover:bg-[#05294E]/20 transition-colors"
                    >
                      {customInstructionsExpanded ? (
                        <>
                          <X className="w-3 h-3" />
                          Collapse
                        </>
                      ) : (
                        <>
                          <Sparkles className="w-3 h-3" />
                          Expand
                        </>
                      )}
                    </button>
                  </div>
                </div>

                {customInstructionsExpanded && (
                  <div className="space-y-3">
                    <textarea
                      id="custom_prompt"
                      value={formData.custom_prompt}
                      onChange={(e) => handleInputChange("custom_prompt", e.target.value)}
                      placeholder="e.g. Always respond succinctly and politely. Be proactive in offering help..."
                      className="w-full px-3 sm:px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-colors resize-none text-base"
                      rows={4}
                    />
                    <p className="text-xs text-gray-500">
                      Add specific instructions for how this agent should behave and respond to students.
                    </p>
                  </div>
                )}
              </div>

              {/* Knowledge Base Documents */}
              <div className="bg-white p-4 sm:p-4 rounded-lg border border-gray-200">
                <div className="flex items-center gap-2 mb-3">
                  <FileText className="w-4 h-4 text-[#05294E]" />
                  <label className="text-sm font-medium text-gray-700">
                    Knowledge Base Documents (Optional)
                  </label>
                </div>
                <EmailKnowledgeUpload
                  ref={uploadRef}
                  universityId={university?.id || ""}
                  agentId={editingAgent?.id || null} // Pass null instead of empty string
                  onDocumentsChange={(documents: any[]) => {
                    console.log('Documents uploaded:', documents);
                  }}
                  onPendingFilesChange={(files: File[]) => {
                    setPendingFiles(files);
                  }}
                  existingDocuments={[]}
                  isCreating={!editingAgent?.id}
                />
                <p className="text-xs text-gray-500 mt-2">
                  Upload documents that will be used as knowledge base for your AI agent.
                </p>
              </div>

              {/* Submit Button */}
              <div className="pt-4">
                <button
                  type="submit"
                  disabled={formLoading}
                  className="w-full bg-[#05294E] hover:bg-[#05294E]/90 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 hover:shadow-md flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {formLoading ? (
                    <>
                      <Loader2 className="w-5 h-5 animate-spin" />
                      {editingAgent ? 'Updating Agent...' : 'Creating Agent...'}
                    </>
                  ) : (
                    <>
                      <Save className="w-5 h-5" />
                      {editingAgent ? 'Update Agent' : 'Create Agent'}
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        )}
      </div>
    </div>
  );
}
import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
  Bot,
  Plus,
  Edit,
  Trash2,
  Play,
  Pause,
  Settings,
  BookOpen,
  Mail,
  AlertCircle,
  CheckCircle,
  Loader2,
  X,
  Save,
  Sparkles,
  FileText,
  Brain,
  MessageCircle,
  HelpCircle,
  ExternalLink,
  Grid3X3,
  List,
  Send,
} from 'lucide-react';
import { useAuth } from '../../hooks/useAuth';
import { useUniversity } from '../../context/UniversityContext';
import { supabase } from '../../lib/supabase';
import EmailKnowledgeUpload from '../../components/EmailKnowledgeUpload';

interface EmailAgent {
  id: string;
  ai_name: string;
  company_name: string;
  personality: string;
  sector: string;
  agent_type: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  knowledge_documents_count: number;
}

const personalityOptions = [
  { value: "Friendly", label: "Friendly", description: "Warm and welcoming approach" },
  { value: "Professional", label: "Professional", description: "Formal and reliable" },
  { value: "Helpful", label: "Helpful", description: "Always ready to assist" },
  { value: "Enthusiastic", label: "Enthusiastic", description: "Energetic and positive" },
  { value: "Patient", label: "Patient", description: "Calm and understanding" },
  { value: "Expert", label: "Expert", description: "Knowledgeable and authoritative" }
];

const agentTypeOptions = [
  "Admissions",
  "Registrar's Office", 
  "Finance",
  "Student Services",
  "Academic Affairs",
  "International Students",
  "Scholarships",
  "Housing",
  "Career Services",
  "Library Services"
];

interface EmailAgentManagementProps {
  activeEmailConfig?: {
    id: string;
    email_address: string;
  };
}

export default function EmailAgentManagement({ activeEmailConfig }: EmailAgentManagementProps = {}) {
  const { user } = useAuth();
  const { university } = useUniversity();
  const [agents, setAgents] = useState<EmailAgent[]>([]);
  const [loading, setLoading] = useState(true);
  const [actionLoading, setActionLoading] = useState<string | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [editingAgent, setEditingAgent] = useState<EmailAgent | null>(null);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [customInstructionsExpanded, setCustomInstructionsExpanded] = useState(false);
  const [pendingFiles, setPendingFiles] = useState<File[]>([]);
  const uploadRef = useRef<{ uploadPendingFiles: (universityId: string) => Promise<any[]> } | null>(null);

  // Estados do formul√°rio
  const [formData, setFormData] = useState({
    ai_name: '',
    company_name: university?.name || '',
    agent_type: '',
    personality: '',
    custom_prompt: ''
  });
  const [formLoading, setFormLoading] = useState(false);

  useEffect(() => {
    if (university?.id || activeEmailConfig?.id) {
      fetchAgents();
    }
  }, [university?.id, activeEmailConfig?.id]);

  const fetchAgents = async () => {
    try {
      setLoading(true);
      
      // NOVO SISTEMA: Se temos activeEmailConfig, usar ai_email_agents (isolado por conta)
      if (activeEmailConfig?.id) {
        console.log('üîç [EmailAgentManagement] Carregando agentes para conta espec√≠fica:', activeEmailConfig.email_address);
        
        const { data, error } = await supabase
          .from('ai_email_agents')
          .select(`
            id,
            ai_name,
            company_name,
            personality,
            agent_type,
            is_active,
            created_at,
            updated_at
          `)
          .eq('email_configuration_id', activeEmailConfig.id)
          .order('created_at', { ascending: false });

        if (error) throw error;

        // Buscar contagem de documentos para cada agente
        const agentsWithCount = await Promise.all(
          data?.map(async (agent) => {
            const { count } = await supabase
              .from('email_knowledge_documents')
              .select('*', { count: 'exact', head: true })
              .eq('agent_id', agent.id);
            
            return {
              ...agent,
              sector: 'Education', // Default para compatibilidade
              knowledge_documents_count: count || 0
            };
          }) || []
        );

        setAgents(agentsWithCount);
        console.log('‚úÖ [EmailAgentManagement] Agentes carregados para conta espec√≠fica:', agentsWithCount.length);
      } else {
        // SISTEMA ANTIGO: Fallback para universidade (compatibilidade)
        console.log('üîç [EmailAgentManagement] Carregando agentes por universidade (sistema antigo)');
        
        const { data, error } = await supabase
          .from('ai_configurations')
          .select(`
            id,
            ai_name,
            company_name,
            personality,
            sector,
            agent_type,
            is_active,
            created_at,
            updated_at
          `)
          .eq('university_id', university?.id)
          .eq('agent_type', 'email')
          .order('created_at', { ascending: false });

        if (error) throw error;

        // Buscar contagem de documentos para cada agente
        const agentsWithCount = await Promise.all(
          data?.map(async (agent) => {
            const { count } = await supabase
              .from('email_knowledge_documents')
              .select('*', { count: 'exact', head: true })
              .eq('agent_id', agent.id);
            
            return {
              ...agent,
              knowledge_documents_count: count || 0
            };
          }) || []
        );

        setAgents(agentsWithCount);
        console.log('‚úÖ [EmailAgentManagement] Agentes carregados por universidade:', agentsWithCount.length);
      }
    } catch (error) {
      console.error('Error fetching agents:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSmoothTransition = (showForm: boolean) => {
    setIsTransitioning(true);
    setTimeout(() => {
      setShowCreateForm(showForm);
      setIsTransitioning(false);
    }, 150);
  };

  const handleCreateAgent = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!user) {
      alert("You must be logged in to create an agent.");
      return;
    }

    if (!formData.ai_name || !formData.company_name || !formData.agent_type || !formData.personality) {
      alert("Please fill in all required fields.");
      return;
    }

    try {
      setFormLoading(true);
      
      // NOVO SISTEMA: Se temos activeEmailConfig, criar em ai_email_agents (isolado por conta)
      if (activeEmailConfig?.id) {
        console.log('üîÑ [EmailAgentManagement] Criando agente para conta espec√≠fica:', activeEmailConfig.email_address);
        
        const { data: agent, error } = await supabase
          .from('ai_email_agents')
          .insert({
            email_configuration_id: activeEmailConfig.id,
            user_id: user.id,
            ai_name: formData.ai_name,
            agent_type: formData.agent_type,
            personality: formData.personality,
            custom_prompt: formData.custom_prompt,
            is_active: true
          })
          .select()
          .single();

        if (error) throw error;

        console.log('‚úÖ [EmailAgentManagement] Agente criado para conta espec√≠fica:', agent.id);
      } else {
        // SISTEMA ANTIGO: Fallback para universidade (compatibilidade)
        console.log('üîÑ [EmailAgentManagement] Criando agente por universidade (sistema antigo)');
        
        if (!university) {
          alert("University information is required.");
          return;
        }

        const { data: agent, error } = await supabase
          .from('ai_configurations')
          .insert({
            user_id: user.id,
            university_id: university.id,
            ai_name: formData.ai_name,
            company_name: formData.company_name,
            agent_type: 'email',
            personality: formData.personality,
            sector: 'Education',
            custom_prompt: formData.custom_prompt,
            final_prompt: formData.custom_prompt,
            is_active: false
          })
          .select()
          .single();

        if (error) throw error;

        console.log('‚úÖ [EmailAgentManagement] Agente criado por universidade:', agent.id);
      }

      if (error) throw error;

      // Upload pending files if any
      if (pendingFiles.length > 0 && uploadRef.current) {
        try {
          await uploadRef.current.uploadPendingFiles(agent.id);
        } catch (uploadError) {
          console.error('Error uploading files:', uploadError);
        }
      }

      setAgents(prev => [agent, ...prev]);
      setShowCreateForm(false);
      setFormData({
        ai_name: '',
        company_name: university.name || '',
        agent_type: '',
        personality: '',
        custom_prompt: ''
      });
      setPendingFiles([]);
      handleSmoothTransition(false);
    } catch (error) {
      console.error('Error creating agent:', error);
      alert('Error creating agent. Please try again.');
    } finally {
      setFormLoading(false);
    }
  };

  const handleToggleAgent = async (agentId: string, currentStatus: boolean) => {
    try {
      setActionLoading(agentId);
      
      // Determinar qual tabela usar baseado no sistema ativo
      const tableName = activeEmailConfig?.id ? 'ai_email_agents' : 'ai_configurations';
      
      const { error } = await supabase
        .from(tableName)
        .update({ is_active: !currentStatus })
        .eq('id', agentId);

      if (error) throw error;

      setAgents(prev => prev.map(agent => 
        agent.id === agentId 
          ? { ...agent, is_active: !currentStatus }
          : agent
      ));
    } catch (error) {
      console.error('Error toggling agent:', error);
    } finally {
      setActionLoading(null);
    }
  };

  const handleDeleteAgent = async (agentId: string) => {
    if (!confirm('Are you sure you want to delete this agent? This action cannot be undone.')) {
      return;
    }

    try {
      setActionLoading(agentId);
      
      // Determinar qual tabela usar baseado no sistema ativo
      const tableName = activeEmailConfig?.id ? 'ai_email_agents' : 'ai_configurations';
      
      const { error } = await supabase
        .from(tableName)
        .delete()
        .eq('id', agentId);

      if (error) throw error;

      setAgents(prev => prev.filter(agent => agent.id !== agentId));
    } catch (error) {
      console.error('Error deleting agent:', error);
    } finally {
      setActionLoading(null);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <Mail className="h-6 w-6 text-blue-600" />
            Email AI Agents
          </h1>
          <p className="text-gray-600 mt-1">
            Create and manage AI agents for automated email processing
          </p>
        </div>
        {!showCreateForm && (
          <button
            onClick={() => handleSmoothTransition(true)}
            className="bg-[#05294E] hover:bg-[#05294E]/90 text-white px-4 py-2.5 rounded-xl font-medium transition-all duration-200 hover:shadow-md text-sm flex items-center gap-2"
          >
            <Bot className="h-4 w-4" />
            Create New Agent
          </button>
        )}
      </div>

      {/* Main Content */}
      <div className="relative overflow-hidden">
        {isTransitioning && (
          <div className="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center z-10">
            <div className="flex items-center gap-2 text-[#05294E]">
              <Loader2 className="h-5 w-5 animate-spin" />
              <span className="font-medium">Loading...</span>
            </div>
          </div>
        )}

        {!showCreateForm ? (
          /* Agents List */
          <div className="space-y-4">
            {agents.length === 0 ? (
              <div className="text-center py-12 bg-gray-50 rounded-lg">
                <Bot className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  No email AI agents created
                </h3>
                <p className="text-gray-600 mb-4">
                  Create your first AI agent to start processing emails automatically
                </p>
                <button
                  onClick={() => handleSmoothTransition(true)}
                  className="bg-[#05294E] hover:bg-[#05294E]/90 text-white px-4 py-2 rounded-lg flex items-center gap-2 mx-auto transition-colors"
                >
                  <Plus className="h-4 w-4" />
                  Create Your First Agent
                </button>
              </div>
            ) : (
              agents.map((agent) => (
                <div key={agent.id} className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <Bot className="h-5 w-5 text-blue-600" />
                        <h3 className="text-lg font-semibold text-gray-900">
                          {agent.ai_name}
                        </h3>
                        <div className="flex items-center gap-2">
                          {agent.is_active ? (
                            <span className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              <CheckCircle className="h-3 w-3" />
                              Active
                            </span>
                          ) : (
                            <span className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                              <Pause className="h-3 w-3" />
                              Inactive
                            </span>
                          )}
                        </div>
                      </div>
                      
                      <p className="text-gray-600 mb-3">{agent.personality}</p>
                      
                      <div className="flex items-center gap-4 text-sm text-gray-500">
                        <span className="flex items-center gap-1">
                          <BookOpen className="h-4 w-4" />
                          {agent.knowledge_documents_count} documents
                        </span>
                        <span>Created {new Date(agent.created_at).toLocaleDateString('en-US')}</span>
                      </div>
                    </div>

                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => handleToggleAgent(agent.id, agent.is_active)}
                        disabled={actionLoading === agent.id}
                        className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                          agent.is_active
                            ? 'bg-red-100 text-red-700 hover:bg-red-200'
                            : 'bg-green-100 text-green-700 hover:bg-green-200'
                        } disabled:opacity-50`}
                      >
                        {actionLoading === agent.id ? (
                          <Loader2 className="h-4 w-4 animate-spin" />
                        ) : agent.is_active ? (
                          <>
                            <Pause className="h-4 w-4 mr-1" />
                            Deactivate
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4 mr-1" />
                            Activate
                          </>
                        )}
                      </button>

                      <button
                        onClick={() => setEditingAgent(agent)}
                        className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
                      >
                        <Edit className="h-4 w-4" />
                      </button>

                      <button
                        onClick={() => handleDeleteAgent(agent.id)}
                        disabled={actionLoading === agent.id}
                        className="p-2 text-gray-400 hover:text-red-600 transition-colors disabled:opacity-50"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        ) : (
          /* Create/Edit Form */
          <div className={`p-4 sm:p-6 bg-gray-50 rounded-xl transition-all duration-300 ease-in-out transform ${
            isTransitioning ? 'opacity-0 translate-x-4' : 'opacity-100 translate-x-0'
          }`}>
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-lg sm:text-xl font-semibold text-gray-900 flex items-center gap-2">
                  <Bot className="h-5 w-5 text-[#05294E]" />
                  {editingAgent ? 'Edit AI Agent' : 'Create New Agent'}
                </h3>
                <p className="text-gray-600 mt-1">
                  {editingAgent
                    ? 'Update your AI agent configuration and settings'
                    : 'Configure your AI agent with custom instructions and knowledge base'
                  }
                </p>
              </div>
              <button
                onClick={() => {
                  setEditingAgent(null);
                  setFormData({
                    ai_name: "",
                    company_name: university?.name || "",
                    agent_type: "",
                    personality: "",
                    custom_prompt: ""
                  });
                  handleSmoothTransition(false);
                }}
                className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2.5 rounded-xl font-medium transition-all duration-200 text-sm flex items-center gap-2"
              >
                <X className="h-4 w-4" />
                {editingAgent ? 'Cancel Edit' : 'Back to List'}
              </button>
            </div>

            <form onSubmit={handleCreateAgent} className="space-y-4 sm:space-y-6">
              {/* Grid responsivo para campos principais */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                {/* Agent Name */}
                <div className="w-full">
                  <label htmlFor="ai_name" className="block text-sm font-medium text-gray-700 mb-2">
                    Agent Name *
                  </label>
                  <input
                    id="ai_name"
                    type="text"
                    value={formData.ai_name}
                    onChange={(e) => handleInputChange("ai_name", e.target.value)}
                    placeholder="e.g. Maria Assistant"
                    className="w-full px-3 sm:px-4 py-3 sm:py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-colors text-base"
                    required
                  />
                </div>

                {/* Agent Type */}
                <div className="w-full">
                  <label htmlFor="agent_type" className="block text-sm font-medium text-gray-700 mb-2">
                    Agent Type *
                  </label>
                  <select
                    id="agent_type"
                    value={formData.agent_type}
                    onChange={(e) => handleInputChange("agent_type", e.target.value)}
                    className="w-full px-3 sm:px-4 py-3 sm:py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-colors text-base"
                    required
                  >
                    <option value="">Select agent type</option>
                    {agentTypeOptions.map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                </div>

                {/* Personality */}
                <div className="w-full">
                  <label htmlFor="personality" className="block text-sm font-medium text-gray-700 mb-2">
                    Personality *
                  </label>
                  <select
                    id="personality"
                    value={formData.personality}
                    onChange={(e) => handleInputChange("personality", e.target.value)}
                    className="w-full px-3 sm:px-4 py-3 sm:py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-colors text-base"
                    required
                  >
                    <option value="">Select personality</option>
                    {personalityOptions.map(option => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Custom Instructions - Collapsible */}
              <div className="bg-white p-4 sm:p-4 rounded-lg border border-gray-200">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-2 mb-3">
                  <label className="text-sm font-medium text-gray-700">
                    Custom Instructions (Optional)
                  </label>
                  <div className="flex flex-wrap items-center gap-2">
                    <button
                      type="button"
                      onClick={() => setCustomInstructionsExpanded(!customInstructionsExpanded)}
                      className="flex items-center gap-1 px-3 py-2 sm:py-1 text-sm bg-[#05294E]/10 text-[#05294E] rounded-lg hover:bg-[#05294E]/20 transition-colors"
                    >
                      {customInstructionsExpanded ? (
                        <>
                          <X className="w-3 h-3" />
                          Collapse
                        </>
                      ) : (
                        <>
                          <Sparkles className="w-3 h-3" />
                          Expand
                        </>
                      )}
                    </button>
                  </div>
                </div>

                {customInstructionsExpanded && (
                  <div className="space-y-3">
                    <textarea
                      id="custom_prompt"
                      value={formData.custom_prompt}
                      onChange={(e) => handleInputChange("custom_prompt", e.target.value)}
                      placeholder="e.g. Always respond succinctly and politely. Be proactive in offering help..."
                      className="w-full px-3 sm:px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-colors resize-none text-base"
                      rows={4}
                    />
                    <p className="text-xs text-gray-500">
                      Add specific instructions for how this agent should behave and respond to students.
                    </p>
                  </div>
                )}
              </div>

              {/* Knowledge Base Documents */}
              <div className="bg-white p-4 sm:p-4 rounded-lg border border-gray-200">
                <div className="flex items-center gap-2 mb-3">
                  <FileText className="w-4 h-4 text-[#05294E]" />
                  <label className="text-sm font-medium text-gray-700">
                    Knowledge Base Documents (Optional)
                  </label>
                </div>
                <EmailKnowledgeUpload
                  ref={uploadRef}
                  universityId={university?.id || ""}
                  agentId={editingAgent?.id || ""} // Will be updated after agent creation
                  onDocumentsChange={(documents: any[]) => {
                    console.log('Documents uploaded:', documents);
                  }}
                  onPendingFilesChange={(files: File[]) => {
                    setPendingFiles(files);
                  }}
                  existingDocuments={[]}
                  isCreating={!editingAgent?.id}
                />
                <p className="text-xs text-gray-500 mt-2">
                  Upload documents that will be used as knowledge base for your AI agent.
                </p>
              </div>

              {/* Submit Button */}
              <div className="pt-4">
                <button
                  type="submit"
                  disabled={formLoading}
                  className="w-full bg-[#05294E] hover:bg-[#05294E]/90 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 hover:shadow-md flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {formLoading ? (
                    <>
                      <Loader2 className="w-5 h-5 animate-spin" />
                      {editingAgent ? 'Updating Agent...' : 'Creating Agent...'}
                    </>
                  ) : (
                    <>
                      <Save className="w-5 h-5" />
                      {editingAgent ? 'Update Agent' : 'Create Agent'}
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        )}
      </div>
    </div>
  );
}