import jsPDF from 'jspdf';

export interface StudentTermAcceptanceData {
  student_name: string;
  student_email: string;
  term_title: string;
  accepted_at: string;
  ip_address: string;
  user_agent: string;
  country?: string;
  affiliate_code?: string;
  term_content?: string;
}

export const generateTermAcceptancePDF = (data: StudentTermAcceptanceData): void => {
  try {
    // Criar novo documento PDF
    const pdf = new jsPDF();
    
    // Configurações de estilo
    const pageWidth = pdf.internal.pageSize.getWidth();
    const margin = 20;
    let currentY = margin;

    // Função para adicionar texto com quebra de linha automática
    const addWrappedText = (text: string, x: number, y: number, maxWidth: number, fontSize: number = 12): number => {
      pdf.setFontSize(fontSize);
      const lines = pdf.splitTextToSize(text, maxWidth);
      
      for (let i = 0; i < lines.length; i++) {
        if (y > pdf.internal.pageSize.getHeight() - margin) {
          pdf.addPage();
          y = margin;
        }
        pdf.text(lines[i], x, y);
        y += fontSize * 0.6; // Espaçamento entre linhas
      }
      
      return y;
    };

    // Função para adicionar linha separadora
    const addSeparator = (y: number): number => {
      if (y > pdf.internal.pageSize.getHeight() - margin - 10) {
        pdf.addPage();
        y = margin;
      }
      pdf.setLineWidth(0.5);
      pdf.line(margin, y, pageWidth - margin, y);
      return y + 8;
    };

    // Cabeçalho do documento
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('TERM ACCEPTANCE DOCUMENT', pageWidth / 2, currentY, { align: 'center' });
    currentY += 15;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text('MatriculaUSA - Academic Management System', pageWidth / 2, currentY, { align: 'center' });
    currentY += 20;

    currentY = addSeparator(currentY);

    // Informações do estudante
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('STUDENT INFORMATION', margin, currentY);
    currentY += 12;

    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'normal');

    // Nome
    pdf.setFont('helvetica', 'bold');
    pdf.text('Name:', margin, currentY);
    pdf.setFont('helvetica', 'normal');
    pdf.text(data.student_name, margin + 30, currentY);
    currentY += 8;

    // Email
    pdf.setFont('helvetica', 'bold');
    pdf.text('Email:', margin, currentY);
    pdf.setFont('helvetica', 'normal');
    pdf.text(data.student_email, margin + 30, currentY);
    currentY += 8;

    // País (se disponível)
    if (data.country && data.country !== 'N/A') {
      pdf.setFont('helvetica', 'bold');
      pdf.text('Country:', margin, currentY);
      pdf.setFont('helvetica', 'normal');
      pdf.text(data.country, margin + 40, currentY);
      currentY += 8;
    }

    // Código de Affiliate (se disponível)
    if (data.affiliate_code) {
      pdf.setFont('helvetica', 'bold');
      pdf.text('Referral Code:', margin, currentY);
      pdf.setFont('helvetica', 'normal');
      pdf.text(data.affiliate_code, margin + 65, currentY);
      currentY += 8;
    }

    currentY += 5;
    currentY = addSeparator(currentY);

    // Informações da aceitação
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('ACCEPTANCE DETAILS', margin, currentY);
    currentY += 12;

    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'normal');

    // Termo aceito
    pdf.setFont('helvetica', 'bold');
    pdf.text('Accepted Term:', margin, currentY);
    pdf.setFont('helvetica', 'normal');
    currentY = addWrappedText(data.term_title, margin + 70, currentY, pageWidth - margin - 90, 11);
    currentY += 3;

    // Data e hora da aceitação
    pdf.setFont('helvetica', 'bold');
    pdf.text('Date/Time:', margin, currentY);
    pdf.setFont('helvetica', 'normal');
    pdf.text(data.accepted_at, margin + 55, currentY);
    currentY += 8;

    // Endereço IP
    pdf.setFont('helvetica', 'bold');
    pdf.text('IP Address:', margin, currentY);
    pdf.setFont('helvetica', 'normal');
    pdf.text(data.ip_address || 'Not available', margin + 55, currentY);
    currentY += 8;

    // User Agent (navegador/dispositivo)
    pdf.setFont('helvetica', 'bold');
    pdf.text('Browser/Device:', margin, currentY);
    pdf.setFont('helvetica', 'normal');
    currentY = addWrappedText(data.user_agent || 'Not available', margin, currentY + 8, pageWidth - margin - 20, 9);
    currentY += 5;

    // Rodapé com informações legais
    const footerY = pdf.internal.pageSize.getHeight() - 30;
    currentY = addSeparator(currentY + 10);

    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'italic');
    const legalText = `This document was automatically generated by MatriculaUSA system on ${new Date().toLocaleString('en-US')}. ` +
      'It serves as proof of term acceptance by the student mentioned above. ' +
      'This document has legal validity and can be used as evidence of user agreement with the presented terms.';
    
    addWrappedText(legalText, margin, footerY, pageWidth - margin - 20, 8);

    // Gerar nome do arquivo
    const fileName = `term_acceptance_${data.student_name.replace(/\s+/g, '_').toLowerCase()}_${new Date().toISOString().split('T')[0]}.pdf`;

    // Fazer download do PDF
    pdf.save(fileName);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    throw new Error('Erro ao gerar documento PDF. Tente novamente.');
  }
};