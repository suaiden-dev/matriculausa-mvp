// Teste simples do servi√ßo Zelle
import { zellePaymentService } from './src/services/ZellePaymentService.js';

async function testZelleService() {
  console.log('üß™ Testando servi√ßo Zelle...');
  
  try {
    // Testar conex√£o
    const connectionTest = await zellePaymentService.testConnection();
    console.log('‚úÖ Conex√£o PostgreSQL:', connectionTest ? 'OK' : 'FALHOU');
    
    // Testar cria√ß√£o de c√≥digo Zelle
    const testCode = 'ZELLE123456789';
    console.log('üîç Testando cria√ß√£o de c√≥digo:', testCode);
    
    const createResult = await zellePaymentService.createPayment(testCode);
    console.log('‚úÖ Cria√ß√£o de c√≥digo Zelle:', createResult.success ? 'OK' : 'FALHOU');
    
    if (createResult.success) {
      console.log('üìä Dados do c√≥digo:', createResult.data);
      
      // Testar busca do c√≥digo
      const searchResult = await zellePaymentService.getCodeByConfirmationCode(testCode);
      console.log('‚úÖ Busca do c√≥digo:', searchResult.success ? 'OK' : 'FALHOU');
      
      if (searchResult.success) {
        console.log('üìä C√≥digo encontrado:', searchResult.data);
        
        // Testar marcar como usado
        const markUsedResult = await zellePaymentService.markCodeAsUsed(testCode);
        console.log('‚úÖ Marcar como usado:', markUsedResult.success ? 'OK' : 'FALHOU');
        
        if (markUsedResult.success) {
          console.log('üìä C√≥digo marcado como usado:', markUsedResult.data);
        }
      }
    }
    
    // Testar listagem de c√≥digos
    const listResult = await zellePaymentService.listCodes({ limit: 5 });
    console.log('‚úÖ Listagem de c√≥digos:', listResult.success ? 'OK' : 'FALHOU');
    
    if (listResult.success) {
      console.log('üìä C√≥digos encontrados:', listResult.data?.length || 0);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await zellePaymentService.close();
  }
}

testZelleService();
