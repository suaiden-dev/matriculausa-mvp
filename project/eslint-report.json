[{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\StudentDashboard\\MyApplications.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[322,325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[322,325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[345,348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[345,348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'scholarships' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":151,"column":76,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5779,5931],"text":"\n            Start applying for scholarships to track your progress here. We&apos;ll help you find the best opportunities that match your profile.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5779,5931],"text":"\n            Start applying for scholarships to track your progress here. We&lsquo;ll help you find the best opportunities that match your profile.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5779,5931],"text":"\n            Start applying for scholarships to track your progress here. We&#39;ll help you find the best opportunities that match your profile.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5779,5931],"text":"\n            Start applying for scholarships to track your progress here. We&rsquo;ll help you find the best opportunities that match your profile.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  FileText, \n  CheckCircle, \n  Clock, \n  XCircle, \n  AlertCircle, \n  Calendar, \n  DollarSign, \n  Building, \n  Eye, \n  Search,\n  Filter,\n  Award,\n  ArrowRight\n} from 'lucide-react';\nimport { Link } from 'react-router-dom';\n\ninterface MyApplicationsProps {\n  applications: any[];\n  scholarships: any[];\n}\n\nconst MyApplications: React.FC<MyApplicationsProps> = ({\n  applications,\n  scholarships\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  const filteredApplications = applications.filter(application => {\n    const matchesSearch = application.scholarship?.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         application.scholarship?.schoolName.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || application.status === statusFilter;\n\n    return matchesSearch && matchesStatus;\n  });\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800 border-green-200';\n      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';\n      case 'under_review': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return CheckCircle;\n      case 'rejected': return XCircle;\n      case 'under_review': return AlertCircle;\n      default: return Clock;\n    }\n  };\n\n  const getStatusMessage = (status: string) => {\n    switch (status) {\n      case 'approved': return 'Congratulations! Your application has been approved.';\n      case 'rejected': return 'Unfortunately, your application was not selected.';\n      case 'under_review': return 'Your application is currently being reviewed.';\n      default: return 'Your application is pending review.';\n    }\n  };\n\n  const stats = {\n    total: applications.length,\n    pending: applications.filter(app => app.status === 'pending').length,\n    approved: applications.filter(app => app.status === 'approved').length,\n    rejected: applications.filter(app => app.status === 'rejected').length,\n    under_review: applications.filter(app => app.status === 'under_review').length\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-900\">My Applications</h2>\n          <p className=\"text-slate-600\">Track the status of your scholarship applications</p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Total Applications</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.total}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n              <FileText className=\"h-6 w-6 text-blue-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Approved</p>\n              <p className=\"text-3xl font-bold text-green-600\">{stats.approved}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Under Review</p>\n              <p className=\"text-3xl font-bold text-yellow-600\">{stats.under_review}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-yellow-100 rounded-xl flex items-center justify-center\">\n              <AlertCircle className=\"h-6 w-6 text-yellow-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Pending</p>\n              <p className=\"text-3xl font-bold text-gray-600\">{stats.pending}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-gray-100 rounded-xl flex items-center justify-center\">\n              <Clock className=\"h-6 w-6 text-gray-600\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {applications.length === 0 ? (\n        <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-16 text-center\">\n          <div className=\"w-24 h-24 bg-gradient-to-br from-blue-100 to-blue-200 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n            <FileText className=\"h-12 w-12 text-blue-600\" />\n          </div>\n          <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">No applications yet</h3>\n          <p className=\"text-slate-500 mb-8 max-w-lg mx-auto\">\n            Start applying for scholarships to track your progress here. We'll help you find the best opportunities that match your profile.\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8 max-w-4xl mx-auto\">\n            <div className=\"p-6 bg-slate-50 rounded-2xl\">\n              <Award className=\"h-8 w-8 text-blue-600 mx-auto mb-3\" />\n              <h4 className=\"font-bold text-slate-900 mb-2\">Find Scholarships</h4>\n              <p className=\"text-sm text-slate-600\">Browse through hundreds of opportunities</p>\n            </div>\n            <div className=\"p-6 bg-slate-50 rounded-2xl\">\n              <FileText className=\"h-8 w-8 text-green-600 mx-auto mb-3\" />\n              <h4 className=\"font-bold text-slate-900 mb-2\">Apply Easily</h4>\n              <p className=\"text-sm text-slate-600\">Simple application process with guidance</p>\n            </div>\n            <div className=\"p-6 bg-slate-50 rounded-2xl\">\n              <CheckCircle className=\"h-8 w-8 text-purple-600 mx-auto mb-3\" />\n              <h4 className=\"font-bold text-slate-900 mb-2\">Track Progress</h4>\n              <p className=\"text-sm text-slate-600\">Monitor your applications in real-time</p>\n            </div>\n          </div>\n          \n          <Link\n            to=\"/student/dashboard/scholarships\"\n            className=\"bg-blue-600 text-white px-8 py-4 rounded-xl hover:bg-blue-700 transition-all duration-300 font-bold shadow-lg hover:shadow-xl transform hover:scale-105 inline-flex items-center\"\n          >\n            Find Scholarships\n            <ArrowRight className=\"ml-2 h-5 w-5\" />\n          </Link>\n        </div>\n      ) : (\n        <>\n          {/* Filters */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-slate-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search applications...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-full pl-12 pr-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex gap-4\">\n                <select\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value)}\n                  className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"under_review\">Under Review</option>\n                  <option value=\"approved\">Approved</option>\n                  <option value=\"rejected\">Rejected</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"mt-4 flex items-center text-sm text-slate-600\">\n              <span className=\"font-medium\">{filteredApplications.length}</span>\n              <span className=\"ml-1\">\n                application{filteredApplications.length !== 1 ? 's' : ''} found\n              </span>\n            </div>\n          </div>\n\n          {/* Applications List */}\n          <div className=\"space-y-4\">\n            {filteredApplications.map((application) => {\n              const StatusIcon = getStatusIcon(application.status);\n              \n              return (\n                <div key={application.id} className=\"bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden hover:shadow-lg transition-all duration-300\">\n                  <div className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                            <Award className=\"h-6 w-6 text-white\" />\n                          </div>\n                          <div>\n                            <h3 className=\"text-xl font-bold text-slate-900 mb-1\">\n                              {application.scholarship?.title}\n                            </h3>\n                            <div className=\"flex items-center text-slate-600\">\n                              <Building className=\"h-4 w-4 mr-2\" />\n                              {application.scholarship?.schoolName}\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                          <div className=\"flex items-center\">\n                            <DollarSign className=\"h-4 w-4 mr-2 text-green-600\" />\n                            <span className=\"font-semibold text-green-600\">\n                              {formatAmount(application.scholarship?.amount || 0)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"h-4 w-4 mr-2 text-slate-500\" />\n                            <span className=\"text-slate-600\">\n                              Applied {new Date(application.applied_at).toLocaleDateString()}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <span className=\"text-slate-600 capitalize\">\n                              Level: {application.scholarship?.level}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"ml-6 flex flex-col items-end space-y-3\">\n                        <span className={`inline-flex items-center px-4 py-2 rounded-xl text-sm font-medium border ${getStatusColor(application.status)}`}>\n                          <StatusIcon className=\"h-4 w-4 mr-2\" />\n                          {application.status.replace('_', ' ').toUpperCase()}\n                        </span>\n                        \n                        <button className=\"text-blue-600 hover:text-blue-700 font-medium text-sm flex items-center\">\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View Details\n                        </button>\n                      </div>\n                    </div>\n\n                    {/* Status Message */}\n                    <div className={`p-4 rounded-xl border ${\n                      application.status === 'approved' ? 'bg-green-50 border-green-200' :\n                      application.status === 'rejected' ? 'bg-red-50 border-red-200' :\n                      application.status === 'under_review' ? 'bg-yellow-50 border-yellow-200' :\n                      'bg-gray-50 border-gray-200'\n                    }`}>\n                      <p className={`text-sm font-medium ${\n                        application.status === 'approved' ? 'text-green-800' :\n                        application.status === 'rejected' ? 'text-red-800' :\n                        application.status === 'under_review' ? 'text-yellow-800' :\n                        'text-gray-800'\n                      }`}>\n                        {getStatusMessage(application.status)}\n                      </p>\n                      \n                      {application.notes && (\n                        <p className=\"text-sm text-slate-600 mt-2\">\n                          <strong>Note:</strong> {application.notes}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {filteredApplications.length === 0 && (\n            <div className=\"text-center py-12\">\n              <FileText className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No applications found</h3>\n              <p className=\"text-slate-500\">\n                {searchTerm ? `No applications match \"${searchTerm}\"` : 'No applications with the selected status'}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MyApplications;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\StudentDashboard\\Overview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[313,316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[313,316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[334,337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[334,337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[357,360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[357,360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  Award, \n  FileText, \n  CheckCircle, \n  Clock, \n  TrendingUp, \n  Search, \n  Target, \n  BookOpen,\n  ArrowUpRight,\n  Calendar,\n  DollarSign,\n  Building,\n  Star,\n  Eye,\n  Plus\n} from 'lucide-react';\n\ninterface OverviewProps {\n  profile: any;\n  scholarships: any[];\n  applications: any[];\n  stats: {\n    totalApplications: number;\n    approvedApplications: number;\n    pendingApplications: number;\n    availableScholarships: number;\n  };\n  onApplyScholarship: (scholarshipId: string) => void;\n}\n\nconst Overview: React.FC<OverviewProps> = ({ \n  profile, \n  scholarships, \n  applications, \n  stats, \n  onApplyScholarship \n}) => {\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'under_review': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return CheckCircle;\n      case 'rejected': return Clock;\n      case 'under_review': return Clock;\n      default: return Clock;\n    }\n  };\n\n  const quickActions = [\n    {\n      title: 'Find Scholarships',\n      description: 'Discover new scholarship opportunities',\n      icon: Search,\n      color: 'bg-gradient-to-r from-blue-500 to-blue-600',\n      link: '/student/dashboard/scholarships',\n      count: stats.availableScholarships\n    },\n    {\n      title: 'My Applications',\n      description: 'Track your application status',\n      icon: FileText,\n      color: 'bg-gradient-to-r from-green-500 to-green-600',\n      link: '/student/dashboard/applications',\n      count: stats.totalApplications\n    },\n    {\n      title: 'Update Profile',\n      description: 'Keep your profile current',\n      icon: Target,\n      color: 'bg-gradient-to-r from-purple-500 to-purple-600',\n      link: '/student/dashboard/profile',\n      count: null\n    }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Welcome Message */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 rounded-2xl p-8 text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n        <div className=\"relative\">\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <div className=\"w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center\">\n              <Award className=\"h-8 w-8 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-3xl font-bold mb-2\">\n                Welcome back, {profile?.name || 'Student'}!\n              </h2>\n              <p className=\"text-blue-100 text-lg\">\n                Continue your journey to academic excellence\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-white/10 backdrop-blur-sm p-6 rounded-xl border border-white/20\">\n              <Award className=\"h-8 w-8 text-white mb-4\" />\n              <h3 className=\"font-bold text-white mb-2\">Discover Scholarships</h3>\n              <p className=\"text-blue-100 text-sm\">Find opportunities that match your profile</p>\n            </div>\n            <div className=\"bg-white/10 backdrop-blur-sm p-6 rounded-xl border border-white/20\">\n              <FileText className=\"h-8 w-8 text-yellow-400 mb-4\" />\n              <h3 className=\"font-bold text-white mb-2\">Apply with Confidence</h3>\n              <p className=\"text-blue-100 text-sm\">Get guidance throughout the process</p>\n            </div>\n            <div className=\"bg-white/10 backdrop-blur-sm p-6 rounded-xl border border-white/20\">\n              <CheckCircle className=\"h-8 w-8 text-green-400 mb-4\" />\n              <h3 className=\"font-bold text-white mb-2\">Track Your Progress</h3>\n              <p className=\"text-blue-100 text-sm\">Monitor applications in real-time</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Available Scholarships</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.availableScholarships}</p>\n              <div className=\"flex items-center mt-2\">\n                <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-sm font-medium text-green-600\">New opportunities</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <Award className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">My Applications</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.totalApplications}</p>\n              <div className=\"flex items-center mt-2\">\n                <FileText className=\"h-4 w-4 text-blue-500 mr-1\" />\n                <span className=\"text-sm font-medium text-blue-600\">Total submitted</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <FileText className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Approved</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.approvedApplications}</p>\n              <div className=\"flex items-center mt-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-sm font-medium text-green-600\">Successful</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <CheckCircle className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Pending</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.pendingApplications}</p>\n              <div className=\"flex items-center mt-2\">\n                <Clock className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                <span className=\"text-sm font-medium text-yellow-600\">Under review</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-yellow-500 to-yellow-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <Clock className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {quickActions.map((action, index) => {\n          const Icon = action.icon;\n          return (\n            <Link\n              key={index}\n              to={action.link}\n              className=\"group block p-6 bg-white rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 hover:-translate-y-1\"\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-12 h-12 ${action.color} rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>\n                  <Icon className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"flex items-center\">\n                  {action.count !== null && (\n                    <span className=\"text-2xl font-bold text-slate-900 mr-2\">{action.count}</span>\n                  )}\n                  <ArrowUpRight className=\"h-5 w-5 text-slate-400 group-hover:text-slate-600 transition-colors\" />\n                </div>\n              </div>\n              <h3 className=\"font-bold text-slate-900 mb-2\">{action.title}</h3>\n              <p className=\"text-slate-600 text-sm\">{action.description}</p>\n            </Link>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Recent Applications */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200\">\n            <div className=\"p-6 border-b border-slate-200\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-900\">Recent Applications</h3>\n                  <p className=\"text-slate-500 text-sm\">Track your scholarship applications</p>\n                </div>\n                <Link\n                  to=\"/student/dashboard/applications\"\n                  className=\"text-blue-600 hover:text-blue-700 font-medium text-sm flex items-center\"\n                >\n                  View All\n                  <ArrowUpRight className=\"h-4 w-4 ml-1\" />\n                </Link>\n              </div>\n            </div>\n            \n            <div className=\"p-6\">\n              {applications.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-20 h-20 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                    <FileText className=\"h-10 w-10 text-blue-600\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-slate-900 mb-3\">No applications yet</h3>\n                  <p className=\"text-slate-500 mb-6\">Start applying for scholarships to see your progress here</p>\n                  <Link\n                    to=\"/student/dashboard/scholarships\"\n                    className=\"bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition-colors font-bold shadow-lg hover:shadow-xl transform hover:scale-105\"\n                  >\n                    Find Scholarships\n                  </Link>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {applications.slice(0, 5).map((application) => {\n                    const StatusIcon = getStatusIcon(application.status);\n                    return (\n                      <div key={application.id} className=\"group flex items-center justify-between p-4 bg-slate-50 hover:bg-slate-100 rounded-2xl transition-colors\">\n                        <div className=\"flex items-center space-x-4 flex-1\">\n                          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                            <Award className=\"h-6 w-6 text-white\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className=\"font-bold text-slate-900 mb-1 truncate group-hover:text-blue-600 transition-colors\">\n                              {application.scholarship?.title}\n                            </h4>\n                            <div className=\"flex items-center space-x-4 text-sm text-slate-500\">\n                              <div className=\"flex items-center\">\n                                <Building className=\"h-4 w-4 mr-1\" />\n                                {application.scholarship?.schoolName}\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Calendar className=\"h-4 w-4 mr-1\" />\n                                {new Date(application.applied_at).toLocaleDateString()}\n                              </div>\n                              <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(application.status)}`}>\n                                <StatusIcon className=\"h-3 w-3 mr-1\" />\n                                {application.status.replace('_', ' ').toUpperCase()}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                          <button className=\"p-2 text-slate-400 hover:text-slate-600 hover:bg-white rounded-lg transition-colors\">\n                            <Eye className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Recommended Scholarships & Profile Status */}\n        <div className=\"space-y-6\">\n          {/* Profile Completion */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <h3 className=\"text-lg font-bold text-slate-900 mb-4 flex items-center\">\n              <Target className=\"h-5 w-5 mr-2 text-blue-500\" />\n              Profile Status\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Basic information</span>\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Academic details</span>\n                <Clock className=\"h-5 w-5 text-yellow-500\" />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Documents uploaded</span>\n                <Clock className=\"h-5 w-5 text-yellow-500\" />\n              </div>\n            </div>\n\n            <div className=\"mt-6 p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-xl border border-blue-200\">\n              <p className=\"text-sm font-medium text-blue-800 mb-2\">\n                Complete your profile to unlock more opportunities\n              </p>\n              <Link\n                to=\"/student/dashboard/profile\"\n                className=\"text-sm font-bold text-blue-700 hover:text-blue-800 transition-colors\"\n              >\n                Complete now →\n              </Link>\n            </div>\n          </div>\n\n          {/* Recommended Scholarships */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <h3 className=\"text-lg font-bold text-slate-900 mb-4 flex items-center\">\n              <Star className=\"h-5 w-5 mr-2 text-yellow-500\" />\n              Recommended for You\n            </h3>\n            \n            <div className=\"space-y-4\">\n              {scholarships.slice(0, 3).map((scholarship) => (\n                <div key={scholarship.id} className=\"p-4 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors group\">\n                  <h4 className=\"font-bold text-slate-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors\">\n                    {scholarship.title}\n                  </h4>\n                  <div className=\"flex items-center justify-between text-sm text-slate-600 mb-3\">\n                    <span className=\"font-semibold text-green-600\">\n                      {formatAmount(scholarship.amount)}\n                    </span>\n                    <span>{scholarship.schoolName}</span>\n                  </div>\n                  <button\n                    onClick={() => onApplyScholarship(scholarship.id)}\n                    className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium\"\n                  >\n                    Apply Now\n                  </button>\n                </div>\n              ))}\n              \n              {scholarships.length === 0 && (\n                <p className=\"text-slate-500 text-sm text-center py-4\">No recommendations yet</p>\n              )}\n            </div>\n          </div>\n\n          {/* Study Tips */}\n          <div className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl shadow-lg text-white p-6\">\n            <h3 className=\"text-lg font-bold mb-4 flex items-center\">\n              <BookOpen className=\"h-5 w-5 mr-2\" />\n              💡 Success Tips\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-blue-100\">\n                  Apply early to increase your chances of success\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-blue-100\">\n                  Tailor your applications to each scholarship\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-blue-100\">\n                  Keep your profile updated with latest achievements\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\StudentDashboard\\ProfileManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[300,303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[300,303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[331,334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[331,334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  User, \n  Edit, \n  Save, \n  X, \n  Phone, \n  Mail, \n  Globe, \n  MapPin,\n  BookOpen,\n  GraduationCap,\n  Star,\n  Award,\n  CheckCircle,\n  AlertCircle,\n  Camera,\n  Calendar,\n  Target\n} from 'lucide-react';\n\ninterface ProfileManagementProps {\n  profile: any;\n  onUpdateProfile: (data: any) => void;\n}\n\nconst ProfileManagement: React.FC<ProfileManagementProps> = ({\n  profile,\n  onUpdateProfile\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: profile?.name || '',\n    phone: profile?.phone || '',\n    country: profile?.country || '',\n    field_of_interest: profile?.field_of_interest || '',\n    academic_level: profile?.academic_level || '',\n    gpa: profile?.gpa?.toString() || '',\n    english_proficiency: profile?.english_proficiency || ''\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSave = () => {\n    const updatedData = {\n      ...formData,\n      gpa: parseFloat(formData.gpa) || 0\n    };\n    onUpdateProfile(updatedData);\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      name: profile?.name || '',\n      phone: profile?.phone || '',\n      country: profile?.country || '',\n      field_of_interest: profile?.field_of_interest || '',\n      academic_level: profile?.academic_level || '',\n      gpa: profile?.gpa?.toString() || '',\n      english_proficiency: profile?.english_proficiency || ''\n    });\n    setIsEditing(false);\n  };\n\n  const getProfileCompleteness = () => {\n    const fields = [\n      profile?.name,\n      profile?.phone,\n      profile?.country,\n      profile?.field_of_interest,\n      profile?.academic_level,\n      profile?.gpa,\n      profile?.english_proficiency\n    ];\n    const completedFields = fields.filter(field => field && field !== '').length;\n    return Math.round((completedFields / fields.length) * 100);\n  };\n\n  const completeness = getProfileCompleteness();\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-900\">Student Profile</h2>\n          <p className=\"text-slate-600\">Manage your academic profile and preferences</p>\n        </div>\n        \n        {!isEditing && (\n          <button\n            onClick={() => setIsEditing(true)}\n            className=\"bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition-colors font-medium flex items-center shadow-lg hover:shadow-xl transform hover:scale-105\"\n          >\n            <Edit className=\"h-4 w-4 mr-2\" />\n            Edit Profile\n          </button>\n        )}\n      </div>\n\n      {/* Profile Completeness */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 rounded-2xl p-8 text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n        <div className=\"relative\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h3 className=\"text-2xl font-bold mb-2\">Profile Completeness</h3>\n              <p className=\"text-blue-100\">Complete your profile to unlock more scholarship opportunities</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-4xl font-bold mb-2\">{completeness}%</div>\n              <div className=\"text-blue-100 text-sm\">Complete</div>\n            </div>\n          </div>\n          \n          <div className=\"w-full bg-white/20 rounded-full h-3 mb-4\">\n            <div \n              className=\"bg-white rounded-full h-3 transition-all duration-500\"\n              style={{ width: `${completeness}%` }}\n            ></div>\n          </div>\n          \n          {completeness < 100 && (\n            <div className=\"flex items-center text-blue-100\">\n              <AlertCircle className=\"h-4 w-4 mr-2\" />\n              <span className=\"text-sm\">Complete your profile to improve scholarship matching</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Profile Form */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden\">\n        {isEditing ? (\n          <div className=\"p-8\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h3 className=\"text-xl font-bold text-slate-900\">Edit Profile</h3>\n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={handleSave}\n                  className=\"bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition-colors font-medium flex items-center\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Save Changes\n                </button>\n                <button\n                  onClick={handleCancel}\n                  className=\"bg-slate-100 text-slate-700 px-6 py-3 rounded-xl hover:bg-slate-200 transition-colors font-medium flex items-center\"\n                >\n                  <X className=\"h-4 w-4 mr-2\" />\n                  Cancel\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Full Name *</label>\n                <input\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  placeholder=\"Enter your full name\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Phone Number</label>\n                <input\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange('phone', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  placeholder=\"Your phone number\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Country *</label>\n                <input\n                  type=\"text\"\n                  value={formData.country}\n                  onChange={(e) => handleInputChange('country', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  placeholder=\"Your country\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Field of Interest</label>\n                <select\n                  value={formData.field_of_interest}\n                  onChange={(e) => handleInputChange('field_of_interest', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                >\n                  <option value=\"\">Select your field</option>\n                  <option value=\"engineering\">Engineering</option>\n                  <option value=\"business\">Business</option>\n                  <option value=\"computer-science\">Computer Science</option>\n                  <option value=\"medicine\">Medicine</option>\n                  <option value=\"law\">Law</option>\n                  <option value=\"arts\">Arts & Humanities</option>\n                  <option value=\"sciences\">Natural Sciences</option>\n                  <option value=\"other\">Other</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Academic Level</label>\n                <select\n                  value={formData.academic_level}\n                  onChange={(e) => handleInputChange('academic_level', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                >\n                  <option value=\"\">Select level</option>\n                  <option value=\"high-school\">High School</option>\n                  <option value=\"undergraduate\">Undergraduate</option>\n                  <option value=\"graduate\">Graduate</option>\n                  <option value=\"doctorate\">Doctorate</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">GPA</label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"4\"\n                  value={formData.gpa}\n                  onChange={(e) => handleInputChange('gpa', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  placeholder=\"0.0\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">English Proficiency</label>\n                <select\n                  value={formData.english_proficiency}\n                  onChange={(e) => handleInputChange('english_proficiency', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                >\n                  <option value=\"\">Select proficiency</option>\n                  <option value=\"beginner\">Beginner</option>\n                  <option value=\"intermediate\">Intermediate</option>\n                  <option value=\"advanced\">Advanced</option>\n                  <option value=\"native\">Native</option>\n                  <option value=\"toefl\">TOEFL Certified</option>\n                  <option value=\"ielts\">IELTS Certified</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"p-8\">\n            {/* Profile Header */}\n            <div className=\"flex items-center space-x-6 mb-8\">\n              <div className=\"relative\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg\">\n                  <User className=\"h-12 w-12 text-white\" />\n                </div>\n                <button className=\"absolute -bottom-2 -right-2 w-8 h-8 bg-white text-blue-600 rounded-lg flex items-center justify-center shadow-lg hover:scale-110 transition-transform duration-300 border border-slate-200\">\n                  <Camera className=\"h-4 w-4\" />\n                </button>\n              </div>\n              \n              <div>\n                <h3 className=\"text-2xl font-bold text-slate-900 mb-2\">{profile?.name || 'Student Name'}</h3>\n                <p className=\"text-slate-600 mb-3\">{profile?.email}</p>\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800\">\n                    <Star className=\"h-3 w-3 mr-1\" />\n                    Active Student\n                  </span>\n                  <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800\">\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                    Verified\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Profile Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <div>\n                <h4 className=\"text-lg font-bold text-slate-900 mb-6\">Personal Information</h4>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center\">\n                    <User className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Full Name</label>\n                      <p className=\"text-slate-900\">{profile?.name || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <Mail className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Email</label>\n                      <p className=\"text-slate-900\">{profile?.email}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <Phone className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Phone</label>\n                      <p className=\"text-slate-900\">{profile?.phone || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <MapPin className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Country</label>\n                      <p className=\"text-slate-900\">{profile?.country || 'Not provided'}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"text-lg font-bold text-slate-900 mb-6\">Academic Information</h4>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center\">\n                    <BookOpen className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Field of Interest</label>\n                      <p className=\"text-slate-900\">{profile?.field_of_interest || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <GraduationCap className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Academic Level</label>\n                      <p className=\"text-slate-900\">{profile?.academic_level || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <Award className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">GPA</label>\n                      <p className=\"text-slate-900\">{profile?.gpa || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <Globe className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">English Proficiency</label>\n                      <p className=\"text-slate-900\">{profile?.english_proficiency || 'Not provided'}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Account Information */}\n            <div className=\"mt-8 pt-8 border-t border-slate-200\">\n              <h4 className=\"text-lg font-bold text-slate-900 mb-6\">Account Information</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 text-slate-400 mr-3\" />\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Member Since</label>\n                    <p className=\"text-slate-900\">\n                      {profile?.created_at ? new Date(profile.created_at).toLocaleDateString() : 'Unknown'}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <Target className=\"h-5 w-5 text-slate-400 mr-3\" />\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Profile Completeness</label>\n                    <p className=\"text-slate-900\">{completeness}%</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Profile Tips */}\n      {completeness < 100 && (\n        <div className=\"bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-2xl p-6\">\n          <div className=\"flex items-start\">\n            <AlertCircle className=\"h-5 w-5 text-yellow-600 mr-3 mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium text-yellow-800 mb-2\">Complete Your Profile</h4>\n              <p className=\"text-sm text-yellow-700 mb-4\">\n                A complete profile helps us match you with the most relevant scholarship opportunities. \n                Consider adding the missing information to improve your chances of finding the perfect scholarships.\n              </p>\n              <div className=\"flex flex-wrap gap-2\">\n                {!profile?.phone && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add phone number\n                  </span>\n                )}\n                {!profile?.country && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add country\n                  </span>\n                )}\n                {!profile?.field_of_interest && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add field of interest\n                  </span>\n                )}\n                {!profile?.academic_level && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add academic level\n                  </span>\n                )}\n                {!profile?.gpa && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add GPA\n                  </span>\n                )}\n                {!profile?.english_proficiency && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add English proficiency\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileManagement;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\StudentDashboard\\ScholarshipBrowser.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[280,283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[280,283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[303,306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[303,306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Search, \n  Filter, \n  Award, \n  Building, \n  Calendar, \n  DollarSign, \n  Clock, \n  Target, \n  CheckCircle,\n  ArrowRight,\n  Star,\n  Zap,\n  Eye,\n  Heart\n} from 'lucide-react';\n\ninterface ScholarshipBrowserProps {\n  scholarships: any[];\n  applications: any[];\n  onApplyScholarship: (scholarshipId: string) => void;\n}\n\nconst ScholarshipBrowser: React.FC<ScholarshipBrowserProps> = ({\n  scholarships,\n  applications,\n  onApplyScholarship\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedLevel, setSelectedLevel] = useState('all');\n  const [selectedField, setSelectedField] = useState('all');\n  const [sortBy, setSortBy] = useState('deadline');\n\n  const filteredScholarships = scholarships.filter(scholarship => {\n    const matchesSearch = scholarship.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         scholarship.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         scholarship.schoolName.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesLevel = selectedLevel === 'all' || scholarship.level === selectedLevel;\n    const matchesField = selectedField === 'all' || scholarship.fieldOfStudy.toLowerCase().includes(selectedField.toLowerCase());\n\n    return matchesSearch && matchesLevel && matchesField;\n  }).sort((a, b) => {\n    switch (sortBy) {\n      case 'amount':\n        return b.amount - a.amount;\n      case 'deadline':\n        return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();\n      case 'name':\n        return a.title.localeCompare(b.title);\n      default:\n        return 0;\n    }\n  });\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getDaysUntilDeadline = (deadline: string) => {\n    const today = new Date();\n    const deadlineDate = new Date(deadline);\n    const diffTime = deadlineDate.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getDeadlineStatus = (deadline: string) => {\n    const days = getDaysUntilDeadline(deadline);\n    if (days < 0) return { status: 'expired', color: 'text-red-600', bg: 'bg-red-50', border: 'border-red-200' };\n    if (days <= 7) return { status: 'urgent', color: 'text-orange-600', bg: 'bg-orange-50', border: 'border-orange-200' };\n    if (days <= 30) return { status: 'soon', color: 'text-yellow-600', bg: 'bg-yellow-50', border: 'border-yellow-200' };\n    return { status: 'normal', color: 'text-green-600', bg: 'bg-green-50', border: 'border-green-200' };\n  };\n\n  const hasApplied = (scholarshipId: string) => {\n    return applications.some(app => app.scholarship_id === scholarshipId);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-900\">Find Scholarships</h2>\n          <p className=\"text-slate-600\">Discover opportunities tailored to your academic profile</p>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-4\">\n          {/* Search */}\n          <div className=\"md:col-span-2 relative\">\n            <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-slate-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search scholarships...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-12 pr-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n            />\n          </div>\n\n          {/* Level Filter */}\n          <select\n            value={selectedLevel}\n            onChange={(e) => setSelectedLevel(e.target.value)}\n            className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n          >\n            <option value=\"all\">All Levels</option>\n            <option value=\"undergraduate\">Undergraduate</option>\n            <option value=\"graduate\">Graduate</option>\n            <option value=\"doctorate\">Doctorate</option>\n          </select>\n\n          {/* Field Filter */}\n          <select\n            value={selectedField}\n            onChange={(e) => setSelectedField(e.target.value)}\n            className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n          >\n            <option value=\"all\">All Fields</option>\n            <option value=\"stem\">STEM</option>\n            <option value=\"business\">Business</option>\n            <option value=\"engineering\">Engineering</option>\n            <option value=\"any\">Any Field</option>\n          </select>\n\n          {/* Sort */}\n          <select\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value)}\n            className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n          >\n            <option value=\"deadline\">Sort by Deadline</option>\n            <option value=\"amount\">Sort by Amount</option>\n            <option value=\"name\">Sort by Name</option>\n          </select>\n        </div>\n\n        <div className=\"flex items-center justify-between text-sm text-slate-600\">\n          <span>\n            <span className=\"font-medium text-blue-600\">{filteredScholarships.length}</span> scholarships found\n          </span>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n              <span className=\"text-xs\">Urgent</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-yellow-500 rounded-full mr-2\"></div>\n              <span className=\"text-xs\">Soon</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\n              <span className=\"text-xs\">Normal</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Scholarships Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredScholarships.map((scholarship) => {\n          const deadlineInfo = getDeadlineStatus(scholarship.deadline);\n          const daysLeft = getDaysUntilDeadline(scholarship.deadline);\n          const alreadyApplied = hasApplied(scholarship.id);\n          \n          return (\n            <div key={scholarship.id} className=\"group bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden hover:shadow-lg transition-all duration-300 hover:-translate-y-1\">\n              {/* Header */}\n              <div className=\"p-6 pb-4\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      {scholarship.isExclusive && (\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-bold bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n                          <Zap className=\"h-3 w-3 mr-1\" />\n                          Exclusive\n                        </span>\n                      )}\n                      <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                        {scholarship.fieldOfStudy}\n                      </span>\n                    </div>\n                    \n                    <h3 className=\"font-bold text-slate-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors\">\n                      {scholarship.title}\n                    </h3>\n                    \n                    <div className=\"flex items-center text-sm text-slate-600 mb-3\">\n                      <Building className=\"h-4 w-4 mr-2\" />\n                      {scholarship.schoolName}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Amount */}\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-500 mb-1\">Scholarship Value</p>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {formatAmount(scholarship.amount)}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-slate-500 mb-1\">Level</p>\n                    <p className=\"text-sm font-bold text-slate-900 capitalize\">\n                      {scholarship.level}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Deadline */}\n                <div className={`p-3 rounded-xl border ${deadlineInfo.bg} ${deadlineInfo.border}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-700\">Application Deadline</p>\n                      <p className=\"font-bold text-slate-900\">\n                        {new Date(scholarship.deadline).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      {daysLeft > 0 ? (\n                        <>\n                          <p className={`text-2xl font-bold ${deadlineInfo.color}`}>\n                            {daysLeft}\n                          </p>\n                          <p className={`text-xs font-medium ${deadlineInfo.color}`}>\n                            day{daysLeft !== 1 ? 's' : ''} left\n                          </p>\n                        </>\n                      ) : (\n                        <span className=\"text-sm font-bold text-red-600\">Expired</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Requirements Preview */}\n              <div className=\"px-6 pb-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-sm font-medium text-slate-700\">Requirements</span>\n                  <span className=\"text-xs text-slate-500\">{scholarship.requirements.length} criteria</span>\n                </div>\n                <div className=\"flex flex-wrap gap-2\">\n                  {scholarship.requirements.slice(0, 2).map((req: string, index: number) => (\n                    <span key={index} className=\"bg-slate-100 text-slate-700 px-2 py-1 rounded-lg text-xs font-medium\">\n                      {req}\n                    </span>\n                  ))}\n                  {scholarship.requirements.length > 2 && (\n                    <span className=\"bg-slate-100 text-slate-600 px-2 py-1 rounded-lg text-xs font-medium\">\n                      +{scholarship.requirements.length - 2} more\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              {/* Benefits Preview */}\n              <div className=\"px-6 pb-6\">\n                <div className=\"flex items-center mb-3\">\n                  <Heart className=\"h-4 w-4 mr-2 text-red-500\" />\n                  <span className=\"text-sm font-medium text-slate-700\">Benefits</span>\n                </div>\n                <div className=\"space-y-2\">\n                  {scholarship.benefits.slice(0, 2).map((benefit: string, index: number) => (\n                    <div key={index} className=\"flex items-center text-xs text-slate-600\">\n                      <CheckCircle className=\"h-3 w-3 mr-2 text-green-500 flex-shrink-0\" />\n                      <span>{benefit}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"px-6 pb-6\">\n                <div className=\"flex space-x-2\">\n                  <button className=\"flex-1 bg-slate-100 text-slate-700 py-3 px-4 rounded-xl hover:bg-slate-200 transition-colors font-medium text-sm flex items-center justify-center\">\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    View Details\n                  </button>\n                  \n                  <button\n                    onClick={() => onApplyScholarship(scholarship.id)}\n                    disabled={alreadyApplied || daysLeft <= 0}\n                    className={`flex-1 py-3 px-4 rounded-xl font-bold text-sm transition-all duration-300 flex items-center justify-center ${\n                      alreadyApplied\n                        ? 'bg-green-100 text-green-700 cursor-not-allowed'\n                        : daysLeft <= 0\n                        ? 'bg-gray-100 text-gray-500 cursor-not-allowed'\n                        : 'bg-blue-600 text-white hover:bg-blue-700 shadow-lg hover:shadow-xl transform hover:scale-105'\n                    }`}\n                  >\n                    {alreadyApplied ? (\n                      <>\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        Applied\n                      </>\n                    ) : daysLeft <= 0 ? (\n                      <>\n                        <Clock className=\"h-4 w-4 mr-2\" />\n                        Expired\n                      </>\n                    ) : (\n                      <>\n                        <Award className=\"h-4 w-4 mr-2\" />\n                        Apply Now\n                        <ArrowRight className=\"h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform\" />\n                      </>\n                    )}\n                  </button>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* No Results */}\n      {filteredScholarships.length === 0 && (\n        <div className=\"text-center py-20\">\n          <div className=\"bg-gradient-to-br from-slate-100 to-slate-200 w-32 h-32 rounded-full flex items-center justify-center mx-auto mb-8 shadow-lg\">\n            <Award className=\"h-16 w-16 text-slate-400\" />\n          </div>\n          <h3 className=\"text-3xl font-bold text-slate-600 mb-4\">No scholarships found</h3>\n          <p className=\"text-slate-500 text-lg mb-8\">Try adjusting your search criteria to discover more opportunities</p>\n          <button \n            onClick={() => {\n              setSearchTerm('');\n              setSelectedLevel('all');\n              setSelectedField('all');\n            }}\n            className=\"bg-blue-600 text-white px-8 py-3 rounded-2xl hover:bg-blue-700 transition-all duration-300 font-bold\"\n          >\n            Clear Filters\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScholarshipBrowser;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\StudentDashboard\\index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'supabase' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboardData, user]","fix":{"range":[1414,1420],"text":"[loadDashboardData, user]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { supabase, Scholarship } from '../../lib/supabase';\nimport { useAuth } from '../../hooks/useAuth';\nimport StudentDashboardLayout from './StudentDashboardLayout';\nimport Overview from './Overview';\nimport ScholarshipBrowser from './ScholarshipBrowser';\nimport MyApplications from './MyApplications';\nimport ProfileManagement from './ProfileManagement';\nimport { mockScholarships } from '../../data/mockData';\n\ninterface StudentProfile {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  country?: string;\n  field_of_interest?: string;\n  academic_level?: string;\n  gpa?: number;\n  english_proficiency?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface Application {\n  id: string;\n  scholarship_id: string;\n  student_id: string;\n  status: 'pending' | 'approved' | 'rejected' | 'under_review';\n  applied_at: string;\n  notes?: string;\n  scholarship?: Scholarship;\n}\n\nconst StudentDashboard: React.FC = () => {\n  const [scholarships, setScholarships] = useState<Scholarship[]>([]);\n  const [applications, setApplications] = useState<Application[]>([]);\n  const [profile, setProfile] = useState<StudentProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      loadDashboardData();\n    }\n  }, [user]);\n\n  const loadDashboardData = async () => {\n    if (!user) return;\n\n    try {\n      // For now, using mock data for scholarships\n      setScholarships(mockScholarships);\n      \n      // Mock profile data\n      const mockProfile: StudentProfile = {\n        id: user.id,\n        name: user.name || user.email?.split('@')[0] || '',\n        email: user.email,\n        phone: '',\n        country: '',\n        field_of_interest: '',\n        academic_level: '',\n        gpa: 0,\n        english_proficiency: '',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      \n      setProfile(mockProfile);\n\n      // Mock applications data\n      setApplications([]);\n      \n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApplyScholarship = async (scholarshipId: string) => {\n    if (!user) return;\n\n    // Check if already applied\n    const alreadyApplied = applications.some(app => app.scholarship_id === scholarshipId);\n    if (alreadyApplied) {\n      alert('You have already applied for this scholarship');\n      return;\n    }\n\n    try {\n      // Mock application creation\n      const newApplication: Application = {\n        id: Date.now().toString(),\n        scholarship_id: scholarshipId,\n        student_id: user.id,\n        status: 'pending',\n        applied_at: new Date().toISOString(),\n        scholarship: scholarships.find(s => s.id === scholarshipId)\n      };\n\n      setApplications(prev => [...prev, newApplication]);\n      alert('Application submitted successfully!');\n    } catch (error) {\n      console.error('Error applying for scholarship:', error);\n      alert('Error submitting application. Please try again.');\n    }\n  };\n\n  const handleProfileUpdate = async (updatedData: Partial<StudentProfile>) => {\n    if (!user || !profile) return;\n\n    try {\n      const updatedProfile = {\n        ...profile,\n        ...updatedData,\n        updated_at: new Date().toISOString()\n      };\n\n      setProfile(updatedProfile);\n      alert('Profile updated successfully!');\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      alert('Error updating profile. Please try again.');\n    }\n  };\n\n  // Calculate stats\n  const stats = {\n    totalApplications: applications.length,\n    approvedApplications: applications.filter(app => app.status === 'approved').length,\n    pendingApplications: applications.filter(app => app.status === 'pending').length,\n    availableScholarships: scholarships.length\n  };\n\n  return (\n    <StudentDashboardLayout user={user} profile={profile} loading={loading}>\n      <Routes>\n        <Route \n          index \n          element={\n            <Overview \n              profile={profile}\n              scholarships={scholarships}\n              applications={applications}\n              stats={stats}\n              onApplyScholarship={handleApplyScholarship}\n            />\n          } \n        />\n        <Route \n          path=\"scholarships\" \n          element={\n            <ScholarshipBrowser \n              scholarships={scholarships}\n              applications={applications}\n              onApplyScholarship={handleApplyScholarship}\n            />\n          } \n        />\n        <Route \n          path=\"applications\" \n          element={\n            <MyApplications \n              applications={applications}\n              scholarships={scholarships}\n            />\n          } \n        />\n        <Route \n          path=\"profile\" \n          element={\n            <ProfileManagement \n              profile={profile}\n              onUpdateProfile={handleProfileUpdate}\n            />\n          } \n        />\n      </Routes>\n    </StudentDashboardLayout>\n  );\n};\n\nexport default StudentDashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\App.tsx","messages":[{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":26,"column":5,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":26,"endColumn":13},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":27,"column":7,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":27,"endColumn":21},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":28,"column":9,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":28,"endColumn":17},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":29,"column":11,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":29,"endColumn":19},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":30,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":30,"endColumn":50},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":30,"column":38,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":30,"endColumn":46},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":31,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":31,"endColumn":56},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":31,"column":43,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":31,"endColumn":52},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":32,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":32,"endColumn":68},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":32,"column":43,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":32,"endColumn":64},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":33,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":33,"endColumn":74},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":33,"column":46,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":33,"endColumn":70},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":34,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":34,"endColumn":75},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":34,"column":53,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":34,"endColumn":71},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":35,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":35,"endColumn":77},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":35,"column":52,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":35,"endColumn":73},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":36,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":36,"endColumn":70},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":36,"column":50,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":36,"endColumn":66},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":37,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":37,"endColumn":65},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":37,"column":45,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":37,"endColumn":61},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":38,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":38,"endColumn":73},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":38,"column":49,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":38,"endColumn":69},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":39,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":39,"endColumn":68},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":39,"column":50,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":39,"endColumn":64},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":41,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":41,"endColumn":81},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":41,"column":57,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":41,"endColumn":77},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":43,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":43,"endColumn":89},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":43,"column":63,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":43,"endColumn":85},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":44,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":44,"endColumn":84},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":44,"column":58,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":44,"endColumn":80},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":45,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":45,"endColumn":82},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":45,"column":60,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":45,"endColumn":78},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":46,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":46,"endColumn":79},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":46,"column":56,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":46,"endColumn":75},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":48,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":48,"endColumn":77},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":48,"column":55,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":48,"endColumn":73},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":50,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":50,"endColumn":204},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":50,"column":46,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":50,"endColumn":120},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":50,"column":120,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":50,"endColumn":160},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":51,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":51,"endColumn":202},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":51,"column":45,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":51,"endColumn":119},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":51,"column":119,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":51,"endColumn":159},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":52,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":52,"endColumn":73},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":52,"column":54,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":52,"endColumn":69},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":53,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":53,"endColumn":90},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":53,"column":61,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":53,"endColumn":86},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":54,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":54,"endColumn":90},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":54,"column":61,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":54,"endColumn":86},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":55,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":55,"endColumn":88},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":55,"column":60,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":55,"endColumn":84}],"suppressedMessages":[],"errorCount":50,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { AuthProvider } from './hooks/useAuth';\nimport Layout from './components/Layout';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Auth from './pages/Auth';\nimport Scholarships from './pages/Scholarships';\nimport Universities from './pages/Universities';\nimport UniversityDetail from './pages/UniversityDetail';\nimport HowItWorks from './pages/HowItWorks';\nimport TermsAndConditions from './pages/TermsAndConditions';\nimport SchoolProfileSetup from './pages/SchoolProfileSetup';\nimport SchoolDashboard from './pages/SchoolDashboard/index';\nimport StudentDashboard from './pages/StudentDashboard/index';\nimport AdminDashboard from './pages/AdminDashboard/index';\nimport NewScholarship from './pages/SchoolDashboard/NewScholarship';\nimport ForgotPassword from './pages/ForgotPassword';\nimport AdminRegistration from './pages/AdminRegistration';\nimport SuccessPage from './pages/SuccessPage';\nimport ScholarshipFeeSuccess from './pages/ScholarshipFeeSuccess';\nimport ApplicationFeeSuccess from './pages/ApplicationFeeSuccess';\nimport ApplicationFeeCancel from './pages/ApplicationFeeCancel';\n\nfunction App() {\n  return (\n    <Router>\n      <AuthProvider>\n        <Layout>\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/about\" element={<About />} />\n            <Route path=\"/login\" element={<Auth mode=\"login\" />} />\n            <Route path=\"/register\" element={<Auth mode=\"register\" />} />\n            <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n            <Route path=\"/admin/register\" element={<AdminRegistration />} />\n            <Route path=\"/scholarships\" element={<Scholarships />} />\n            <Route path=\"/schools\" element={<Universities />} />\n            <Route path=\"/schools/:id\" element={<UniversityDetail />} />\n            <Route path=\"/how-it-works\" element={<HowItWorks />} />\n            {/* Student/Admin Dashboard Switch - sempre renderize StudentDashboard por padrão */}\n            <Route path=\"/student/dashboard/*\" element={<StudentDashboard />} />\n            {/* School Routes */}\n            <Route path=\"/school/termsandconditions\" element={<TermsAndConditions />} />\n            <Route path=\"/school/setup-profile\" element={<SchoolProfileSetup />} />\n            <Route path=\"/school/scholarship/new\" element={<NewScholarship />} />\n            <Route path=\"/school/dashboard/*\" element={<SchoolDashboard />} />\n            {/* Admin Dashboard Direct Route */}\n            <Route path=\"/admin/dashboard/*\" element={<AdminDashboard />} />\n            {/* Placeholder routes for other pages */}\n            <Route path=\"/services\" element={<div className=\"min-h-screen bg-gray-50 flex items-center justify-center\"><div className=\"text-2xl text-gray-600\">Services page coming soon...</div></div>} />\n            <Route path=\"/contact\" element={<div className=\"min-h-screen bg-gray-50 flex items-center justify-center\"><div className=\"text-2xl text-gray-600\">Contact page coming soon...</div></div>} />\n            <Route path=\"/checkout/success\" element={<SuccessPage />} />\n            <Route path=\"/scholarship-fee-success\" element={<ScholarshipFeeSuccess />} />\n            <Route path=\"/application-fee/success\" element={<ApplicationFeeSuccess />} />\n            <Route path=\"/application-fee/cancel\" element={<ApplicationFeeCancel />} />\n          </Routes>\n        </Layout>\n      </AuthProvider>\n    </Router>\n  );\n}\n\nexport default App;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\components\\ApplicationCart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\components\\DocumentUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2889,2892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2889,2892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\nimport { AnalyzingLoader } from './Layout';\r\nimport { FaPassport, FaFileAlt, FaMoneyCheckAlt, FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\r\n\r\nconst REQUIRED_DOCS = [\r\n  { type: 'passport', label: 'Passport (photo page)', icon: <FaPassport className=\"text-blue-600 h-6 w-6\" />, instruction: 'Upload a clear scan or photo of your passport (photo page).' },\r\n  { type: 'diploma', label: 'High School/College Diploma', icon: <FaFileAlt className=\"text-green-600 h-6 w-6\" />, instruction: 'Upload your high school or college diploma/certificate.' },\r\n  { type: 'funds_proof', label: 'Proof of Funds (bank statement)', icon: <FaMoneyCheckAlt className=\"text-yellow-600 h-6 w-6\" />, instruction: 'Upload a recent bank statement showing at least US$ 22,000 (student) or US$ 5,000 per dependent.' },\r\n];\r\n\r\nexport const DocumentUpload: React.FC<{ userId: string; onComplete?: () => void }> = ({ userId, onComplete }) => {\r\n  const [files, setFiles] = useState<{ [key: string]: File | null }>({});\r\n  const [uploading, setUploading] = useState(false);\r\n  const [analyzing, setAnalyzing] = useState(false);\r\n  const [status, setStatus] = useState<'idle' | 'uploaded' | 'analyzing' | 'approved'>('idle');\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [fileStatus, setFileStatus] = useState<{ [key: string]: 'idle' | 'selected' | 'error' }>({});\r\n\r\n  const handleFileChange = (type: string, file: File | null) => {\r\n    setFiles(prev => ({ ...prev, [type]: file }));\r\n    setFileStatus(prev => ({ ...prev, [type]: file ? 'selected' : 'idle' }));\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    setUploading(true);\r\n    setError(null);\r\n    try {\r\n      for (const doc of REQUIRED_DOCS) {\r\n        const file = files[doc.type];\r\n        if (!file) {\r\n          setFileStatus(prev => ({ ...prev, [doc.type]: 'error' }));\r\n          throw new Error(`Required file: ${doc.label}`);\r\n        }\r\n        const { data, error } = await supabase.storage.from('student-documents').upload(`${userId}/${doc.type}-${Date.now()}`, file, { upsert: true });\r\n        if (error) throw error;\r\n        await supabase.from('student_documents').insert({\r\n          user_id: userId,\r\n          type: doc.type,\r\n          file_url: data?.path,\r\n          status: 'pending',\r\n        });\r\n      }\r\n      setStatus('uploaded');\r\n      setAnalyzing(true);\r\n      setTimeout(async () => {\r\n        await supabase.from('student_documents').update({ status: 'approved', approved_at: new Date().toISOString() }).eq('user_id', userId);\r\n        await supabase.from('user_profiles').update({ documents_status: 'approved', documents_uploaded: true }).eq('user_id', userId);\r\n        setAnalyzing(false);\r\n        setStatus('approved');\r\n        if (onComplete) onComplete();\r\n      }, 60000);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Upload error');\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  if (analyzing) return <AnalyzingLoader message=\"Analyzing your documents...\" />;\r\n  if (status === 'approved') return (\r\n    <div className=\"p-8 bg-green-50 rounded-2xl text-green-700 font-bold text-center flex flex-col items-center gap-4 shadow-lg border border-green-100\">\r\n      <FaCheckCircle className=\"h-12 w-12 text-green-500 mb-2\" />\r\n      Documents approved! You can proceed to the next step.\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-3xl shadow-2xl p-10 max-w-2xl mx-auto border border-slate-100 animate-fade-in\">\r\n      <h2 className=\"text-3xl font-extrabold mb-8 text-slate-800 text-center\">Required Documents Upload</h2>\r\n      <div className=\"grid grid-cols-1 gap-6 mb-8\">\r\n        {REQUIRED_DOCS.map(doc => (\r\n          <div key={doc.type} className=\"flex flex-col md:flex-row items-center gap-4 bg-slate-50 rounded-xl p-6 border border-slate-200\">\r\n            <div className=\"flex-shrink-0\">{doc.icon}</div>\r\n            <div className=\"flex-1 w-full\">\r\n              <div className=\"font-bold text-slate-800 mb-1\">{doc.label}</div>\r\n              <div className=\"text-slate-500 text-sm mb-2\">{doc.instruction}</div>\r\n              <input\r\n                type=\"file\"\r\n                accept=\"application/pdf,image/*\"\r\n                onChange={e => handleFileChange(doc.type, e.target.files?.[0] || null)}\r\n                className=\"block w-full text-sm text-slate-700 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\r\n              />\r\n              {fileStatus[doc.type] === 'selected' && <div className=\"flex items-center gap-1 text-green-600 mt-1 text-xs\"><FaCheckCircle className=\"h-4 w-4\" /> File selected</div>}\r\n              {fileStatus[doc.type] === 'error' && <div className=\"flex items-center gap-1 text-red-600 mt-1 text-xs\"><FaTimesCircle className=\"h-4 w-4\" /> Required</div>}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {error && <div className=\"text-red-600 mb-4 text-center font-medium flex items-center justify-center gap-2\"><FaTimesCircle className=\"h-5 w-5\" /> {error}</div>}\r\n      <button\r\n        onClick={handleUpload}\r\n        disabled={uploading || Object.values(files).some(f => !f)}\r\n        className=\"w-full bg-blue-600 text-white py-4 rounded-xl font-extrabold text-lg hover:bg-blue-700 transition-all disabled:opacity-50 flex items-center justify-center gap-2 shadow-lg\"\r\n      >\r\n        {uploading ? (\r\n          <>\r\n            <span className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></span>\r\n            Uploading...\r\n          </>\r\n        ) : (\r\n          <>Upload Documents</>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\components\\DocumentUploadModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":45,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { FaPassport, FaFileAlt, FaMoneyCheckAlt, FaCheckCircle, FaTimes } from 'react-icons/fa';\n\ninterface DocumentUploadModalProps {\n  userId: string;\n  onSuccess: () => void;\n  onClose: () => void;\n}\n\nconst REQUIRED_DOCS = [\n  { type: 'passport', label: 'Passport (photo page)', icon: <FaPassport className=\"text-blue-600 h-6 w-6\" />, instruction: 'Upload a clear scan or photo of your passport (photo page).' },\n  { type: 'diploma', label: 'High School/College Diploma', icon: <FaFileAlt className=\"text-green-600 h-6 w-6\" />, instruction: 'Upload your diploma or graduation certificate.' },\n  { type: 'funds', label: 'Proof of Funds', icon: <FaMoneyCheckAlt className=\"text-yellow-600 h-6 w-6\" />, instruction: 'Upload a bank statement or proof of sufficient funds.' },\n];\n\nconst DocumentUploadModal: React.FC<DocumentUploadModalProps> = ({ userId, onSuccess, onClose }) => {\n  const [files, setFiles] = useState<{ [key: string]: File | null }>({ passport: null, diploma: null, funds: null });\n  const [uploading, setUploading] = useState(false);\n  const [analyzing, setAnalyzing] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  const handleFileChange = (type: string, file: File | null) => {\n    setFiles((prev) => ({ ...prev, [type]: file }));\n  };\n\n  const canUpload = Object.values(files).every((file) => file);\n\n  const handleUpload = async () => {\n    setUploading(true);\n    try {\n      for (const doc of REQUIRED_DOCS) {\n        const file = files[doc.type];\n        if (file) {\n          const { error } = await supabase.storage.from('student-documents').upload(`${userId}/${doc.type}`, file, { upsert: true });\n          if (error) throw error;\n        }\n      }\n      setUploading(false);\n      setAnalyzing(true);\n      setTimeout(() => {\n        setAnalyzing(false);\n        setSuccess(true);\n      }, 60000); // 1 minuto\n    } catch (err) {\n      setUploading(false);\n      alert('Error uploading documents. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60\">\n      <div className=\"bg-white rounded-2xl shadow-2xl p-10 max-w-lg w-full relative animate-fade-in\">\n        {!analyzing && !success && (\n          <>\n            <button\n              className=\"absolute top-4 right-4 text-slate-400 hover:text-slate-700 text-xl focus:outline-none\"\n              aria-label=\"Close\"\n              onClick={onClose}\n            >\n              <FaTimes />\n            </button>\n            <h2 className=\"text-2xl font-bold text-slate-900 mb-6 text-center\">Upload Required Documents</h2>\n            <p className=\"text-slate-600 text-center mb-6\">Please upload all required documents to proceed. All files must be clear and legible.</p>\n            <div className=\"space-y-5 mb-8\">\n              {REQUIRED_DOCS.map((doc) => (\n                <div key={doc.type} className=\"flex items-center gap-4 bg-slate-50 rounded-xl p-4 border border-slate-200\">\n                  {doc.icon}\n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold text-slate-800\">{doc.label}</div>\n                    <div className=\"text-slate-500 text-xs mb-1\">{doc.instruction}</div>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*,application/pdf\"\n                      onChange={(e) => handleFileChange(doc.type, e.target.files?.[0] || null)}\n                      className=\"block w-full text-sm text-slate-700 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                      disabled={uploading}\n                    />\n                  </div>\n                  {files[doc.type] ? <FaCheckCircle className=\"text-green-500 h-5 w-5\" /> : null}\n                </div>\n              ))}\n            </div>\n            <button\n              className={`w-full py-3 rounded-xl font-bold text-lg transition-all duration-300 ${canUpload ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-slate-200 text-slate-400 cursor-not-allowed'}`}\n              onClick={handleUpload}\n              disabled={!canUpload || uploading}\n            >\n              {'Upload Documents'}\n            </button>\n          </>\n        )}\n        {analyzing && (\n          <div className=\"flex flex-col items-center justify-center min-h-[300px]\">\n            <svg className=\"animate-spin h-12 w-12 text-blue-600 mb-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8v8z\"></path>\n            </svg>\n            <div className=\"text-xl font-bold text-slate-800 mb-2\">Analyzing your documents...</div>\n            <div className=\"text-slate-500 text-center\">This may take up to 1 minute. Please wait.</div>\n          </div>\n        )}\n        {success && (\n          <div className=\"flex flex-col items-center justify-center min-h-[300px]\">\n            <FaCheckCircle className=\"text-green-500 h-16 w-16 mb-6\" />\n            <div className=\"text-2xl font-bold text-green-700 mb-2 text-center\">Documents Approved!</div>\n            <div className=\"text-slate-700 text-center mb-6\">Your documents have been approved! You are now eligible to select a scholarship.</div>\n            <button\n              className=\"w-full py-3 rounded-xl font-bold text-lg bg-blue-600 text-white hover:bg-blue-700 transition-all duration-300\"\n              onClick={onSuccess}\n            >\n              Continue\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentUploadModal; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\components\\Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\components\\Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\components\\Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\components\\StripeCheckout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ReactDOM' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[552,555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[552,555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2772,2775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2772,2775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useAuth } from '../hooks/useAuth';\nimport { PRODUCTS } from '../stripe-config';\n\ninterface StripeCheckoutProps {\n  productId: keyof typeof PRODUCTS;\n  buttonText?: string;\n  className?: string;\n  onSuccess?: () => void;\n  onError?: (error: string) => void;\n  paymentType?: string;\n  feeType: 'application_fee' | 'enrollment_fee';\n  scholarshipsIds?: string[];\n  successUrl?: string;\n  cancelUrl?: string;\n  disabled?: boolean;\n  metadata?: { [key: string]: any };\n}\n\nexport const StripeCheckout: React.FC<StripeCheckoutProps> = ({\n  productId,\n  buttonText = 'Checkout',\n  className = '',\n  onSuccess,\n  onError,\n  paymentType = 'selection_process',\n  feeType,\n  scholarshipsIds,\n  successUrl,\n  cancelUrl,\n  disabled = false,\n  metadata = {},\n}) => {\n  const [loading, setLoading] = useState(false);\n  const { isAuthenticated } = useAuth();\n  \n  const product = PRODUCTS[productId];\n  \n  if (!product) {\n    console.error(`Product ${productId} not found in stripe-config.ts`);\n    return null;\n  }\n\n  const handleCheckout = async () => {\n    if (!isAuthenticated) {\n      onError?.('You must be logged in to checkout');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const apiUrl = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/stripe-checkout`;\n      const { data: sessionData } = await import('../lib/supabase').then(m => m.supabase.auth.getSession());\n      const token = sessionData.session?.access_token;\n      if (!token) {\n        throw new Error('Usuário não autenticado. Token não encontrado.');\n      }\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          price_id: product.priceId,\n          success_url: successUrl || `${window.location.origin}/checkout/success?session_id={CHECKOUT_SESSION_ID}`,\n          cancel_url: cancelUrl || `${window.location.origin}/checkout/cancel`,\n          mode: product.mode,\n          payment_type: paymentType,\n          fee_type: feeType,\n          metadata: {\n            ...metadata,\n            selected_scholarship_id: scholarshipsIds?.[0] ?? undefined,\n          },\n        })\n      });\n\n      const data = await response.json();\n      \n      if (data.error) {\n        throw new Error(data.error);\n      }\n      \n      if (data.session_url) {\n        window.location.href = data.session_url;\n        onSuccess?.();\n      } else {\n        console.error('DEBUG: data.session_url is falsy. Value:', data.session_url, 'Type:', typeof data.session_url);\n        throw new Error('No checkout URL returned');\n      }\n    } catch (error: any) {\n      console.error('Checkout error:', error);\n      onError?.(error.message || 'An error occurred during checkout');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <button\n        onClick={handleCheckout}\n        disabled={loading || disabled}\n        className={`bg-[#D0151C] text-white px-6 py-3 rounded-xl hover:bg-[#B01218] transition-all duration-300 font-bold flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed ${className}`}\n      >\n        {loading ? (\n          <div className=\"flex items-center\">\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n            Processing...\n          </div>\n        ) : (\n          buttonText\n        )}\n      </button>\n    </>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\hooks\\useAuth.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":116,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":119,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1742,1745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1742,1745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":60,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":60,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":77,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2936,2939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2936,2939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3982,3985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3982,3985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user_id' is assigned a value but never used.","line":162,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":129,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":132,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7582,7585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7582,7585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User as SupabaseUser } from '@supabase/supabase-js';\nimport { supabase } from '../lib/supabase';\nimport { useNavigate } from 'react-router-dom';\n\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  role: 'student' | 'school' | 'admin';\n  university_id?: string;\n  hasPaidProcess?: boolean;\n}\n\n// Definição completa do tipo para o perfil do usuário (incluindo todas as colunas do seu schema)\nexport interface UserProfile {\n  id: string;\n  user_id: string;\n  full_name: string | null;\n  phone: string | null;\n  country: string | null;\n  field_of_interest: string | null;\n  academic_level: string | null;\n  gpa: number | null;\n  english_proficiency: string | null;\n  status: string | null;\n  last_active: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  is_application_fee_paid: boolean;\n  has_paid_selection_process_fee: boolean;\n  is_admin: boolean;\n  stripe_customer_id: string | null;\n  stripe_payment_intent_id: string | null;\n  university_id?: string | null;\n  // Novos campos para progresso do aluno\n  documents_status?: 'pending' | 'analyzing' | 'approved' | 'rejected';\n  documents_uploaded?: boolean;\n  selected_scholarship_id?: string | null;\n  has_paid_college_enrollment_fee?: boolean;\n  has_paid_scholarship_fee?: boolean;\n  // ... outras colunas se existirem\n}\n\ninterface AuthContextType {\n  user: User | null;\n  supabaseUser: SupabaseUser | null;\n  userProfile: UserProfile | null;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (email: string, password: string, userData: { name: string; role: 'student' | 'school'; [key: string]: any }) => Promise<void>;\n  switchRole: (newRole: 'student' | 'school' | 'admin') => void;\n  isAuthenticated: boolean;\n  loading: boolean;\n  updateUserProfile: (updates: Partial<UserProfile>) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [supabaseUser, setSupabaseUser] = useState<SupabaseUser | null>(null);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const navigate = useNavigate();\n\n  console.log('AUTH_DEBUG: AuthProvider renderizado.');\n  console.log('AUTH_DEBUG: Estado inicial: loading=', loading, 'user=', user?.id);\n\n  useEffect(() => {\n    console.log('AUTH_DEBUG: useEffect disparado.');\n    setLoading(true);\n\n    const buildUser = (sessionUser: any, currentProfile: UserProfile | null): User => {\n      console.log('AUTH_DEBUG: buildUser - Iniciando construção de objeto User. sessionUser ID:', sessionUser?.id, 'currentProfile ID:', currentProfile?.id);\n      let role = sessionUser?.user_metadata?.role;\n      if (!role && currentProfile) {\n        if (currentProfile.is_admin) role = 'admin';\n        else if (currentProfile.status === 'school') role = 'school';\n        else role = 'student';\n      }\n      if (!role) {\n        role = getDefaultRole(sessionUser?.email || '');\n      }\n      const builtUser: User = {\n        id: sessionUser.id,\n        email: sessionUser.email,\n        name: sessionUser.user_metadata?.name || sessionUser.email?.split('@')[0] || '',\n        role,\n        university_id: currentProfile?.university_id ?? undefined,\n        hasPaidProcess: currentProfile?.has_paid_selection_process_fee,\n      };\n      console.log('AUTH_DEBUG: buildUser - Objeto User construído:', builtUser);\n      return builtUser;\n    };\n\n    const fetchAndSetUser = async (session: any) => {\n      if (session?.user) {\n        let profile: UserProfile | null = null;\n        try {\n          const { data, error } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('user_id', session.user.id)\n            .single();\n          if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found\n            throw error;\n          }\n          profile = data;\n        } catch (error) {\n          console.error(\"Error fetching user profile:\", error);\n        }\n        setUserProfile(profile);\n        setUser(buildUser(session.user, profile));\n        setSupabaseUser(session.user);\n        console.log('AUTH_DEBUG: onAuthStateChange - User e UserProfile setados com sucesso.');\n      } else {\n        setUser(null);\n        setSupabaseUser(null);\n        setUserProfile(null);\n        console.log('AUTH_DEBUG: onAuthStateChange - User e UserProfile resetados para null.');\n      }\n    };\n    \n    // Check for session on initial load\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      fetchAndSetUser(session);\n      setLoading(false);\n    });\n\n    // Listen for auth state changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (_event, session) => {\n        fetchAndSetUser(session);\n      }\n    );\n\n    return () => {\n      console.log('AUTH_DEBUG: useEffect cleanup.');\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const updateUserProfile = async (updates: Partial<UserProfile>) => {\n    if (!supabaseUser) {\n      throw new Error(\"User must be logged in to update profile\");\n    }\n    \n    // Remove user_id from updates if it exists, as it should not be updated.\n    const { user_id, ...updateData } = updates;\n\n    const { data, error } = await supabase\n      .from('user_profiles')\n      .update(updateData)\n      .eq('user_id', supabaseUser.id)\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    if (data) {\n      setUserProfile(data as UserProfile);\n    }\n  };\n\n  const getDefaultRole = (email: string): 'student' | 'school' | 'admin' => {\n    // Admin emails can be hardcoded or checked against a list\n    const adminEmails = ['admin@matriculausa.com', 'admin@example.com'];\n    if (adminEmails.includes(email.toLowerCase())) {\n      return 'admin';\n    }\n    return 'student';\n  };\n\n  const switchRole = (newRole: 'student' | 'school' | 'admin') => {\n    if (user) {\n      const updatedUser = { ...user, role: newRole };\n      setUser(updatedUser);\n      \n      // Update user metadata in Supabase\n      supabase.auth.updateUser({\n        data: { role: newRole }\n      }).catch(error => {\n        console.error('Error updating user role:', error);\n      });\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) {\n      throw error;\n    }\n    // Redirection will be handled by the auth state change listener\n  };\n\n  const logout = async () => {\n    setLoading(true);\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n      console.error('Error logging out:', error);\n      // Opcional: notificar o usuário sobre o erro\n    }\n    // Limpar o estado local independentemente do erro do Supabase\n    setUser(null);\n    setUserProfile(null); \n    setLoading(false);\n    console.log(\"AUTH_DEBUG: User logged out, user and userProfile set to null.\");\n  };\n\n  const register = async (email: string, password: string, userData: { name: string; role: 'student' | 'school'; [key: string]: any }) => {\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: userData,\n      }\n    });\n\n    if (error) {\n      throw error;\n    }\n    // Registration redirection will be handled in the Auth component\n  };\n\n  const value: AuthContextType = {\n    user,\n    supabaseUser,\n    userProfile,\n    login,\n    logout,\n    register,\n    switchRole,\n    isAuthenticated: !!user && !!supabaseUser,\n    loading,\n    updateUserProfile,\n  };\n\n  console.log('AUTH_DEBUG: AuthProvider renderizando com estados: user=', user?.id, 'userProfile=', userProfile, 'loading=', loading);\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\hooks\\useScholarships.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1087,1090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1087,1090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport type { Scholarship } from '../types';\n\nexport function useScholarships() {\n  const [scholarships, setScholarships] = useState<Scholarship[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function fetchScholarships() {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('scholarships')\n        .select(`id, title, description, amount, deadline, requirements, field_of_study, level, eligibility, benefits, is_exclusive, is_active, university_id, created_at, updated_at, needcpt, visaassistance, scholarshipvalue, image_url, original_value_per_credit, original_annual_value, annual_value_with_scholarship, scholarship_type, universities!inner(id, name, logo_url, location, is_approved)`)\n        .eq('is_active', true);\n      if (error) {\n        setError(error.message);\n        setScholarships([]);\n      } else {\n        const filtered = (data || []).filter((s: any) => s.universities && s.universities.is_approved);\n        setScholarships(filtered as unknown as Scholarship[]);\n      }\n      setLoading(false);\n    }\n    fetchScholarships();\n  }, []);\n\n  return { scholarships, loading, error };\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\hooks\\useScholarships.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[177,180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[177,180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":21,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[788,791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[788,791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\nexport function useScholarships() {\n  const [scholarships, setScholarships] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchScholarships = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const { data, error } = await supabase\n          .from('scholarships')\n          .select('*, university:university_id(*)')\n          .eq('is_active', true);\n        if (error) throw error;\n        const approvedScholarships = (data || []).filter(s => s.university && s.university.is_approved);\n        setScholarships(approvedScholarships);\n      } catch (err: any) {\n        setError('Failed to load scholarships');\n        setScholarships([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchScholarships();\n  }, []);\n\n  return { scholarships, loading, error };\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\hooks\\useSubscription.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2206,2209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2206,2209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { useAuth } from './useAuth';\n\ninterface SubscriptionData {\n  subscription_id: string | null;\n  subscription_status: string;\n  price_id: string | null;\n  current_period_start: number | null;\n  current_period_end: number | null;\n  cancel_at_period_end: boolean;\n  payment_method_brand: string | null;\n  payment_method_last4: string | null;\n}\n\ninterface OrderData {\n  order_id: number;\n  checkout_session_id: string;\n  payment_intent_id: string;\n  amount_total: number;\n  currency: string;\n  payment_status: string;\n  order_status: string;\n  order_date: string;\n}\n\nexport function useSubscription() {\n  const [subscription, setSubscription] = useState<SubscriptionData | null>(null);\n  const [orders, setOrders] = useState<OrderData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { user, isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    if (!isAuthenticated || !user) {\n      setSubscription(null);\n      setOrders([]);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchSubscriptionData() {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        // Fetch subscription data\n        const { data: subscriptionData, error: subscriptionError } = await supabase\n          .from('stripe_user_subscriptions')\n          .select('*')\n          .maybeSingle();\n\n        if (subscriptionError) {\n          console.error('Error fetching subscription:', subscriptionError);\n          setError('Failed to load subscription data');\n        } else {\n          setSubscription(subscriptionData);\n        }\n\n        // Fetch orders data\n        const { data: ordersData, error: ordersError } = await supabase\n          .from('stripe_user_orders')\n          .select('*')\n          .order('order_date', { ascending: false });\n\n        if (ordersError) {\n          console.error('Error fetching orders:', ordersError);\n          setError((prev) => prev ? `${prev}. Failed to load orders data` : 'Failed to load orders data');\n        } else {\n          setOrders(ordersData || []);\n        }\n      } catch (err: any) {\n        console.error('Error in subscription hook:', err);\n        setError(err.message || 'An unexpected error occurred');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchSubscriptionData();\n  }, [user, isAuthenticated]);\n\n  const hasActiveSubscription = subscription?.subscription_status === 'active';\n  \n  const hasPaidProcess = orders.some(order => \n    order.payment_status === 'paid' && order.order_status === 'completed'\n  );\n\n  return {\n    subscription,\n    orders,\n    loading,\n    error,\n    hasActiveSubscription,\n    hasPaidProcess\n  };\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\hooks\\useUniversities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\lib\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\main.tsx","messages":[{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":7,"column":3,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":7,"endColumn":15},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":8,"column":5,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":8,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\About.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\AdminDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1222,1225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1222,1225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3101,3104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3101,3104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3942,3945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3942,3945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4631,4634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4631,4634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7013,7016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7013,7016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":252,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8315,8318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8315,8318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":280,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9122,9125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9122,9125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":307,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10089,10092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10089,10092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":324,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10664,10667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10664,10667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":354,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11538,11541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11538,11541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":381,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12431,12434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12431,12434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":508,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":508,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17370,17373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17370,17373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Users, \n  Building, \n  Award, \n  BarChart3, \n  Settings, \n  Search, \n  CheckCircle, \n  XCircle, \n  Eye, \n  Edit, \n  Calendar,\n  AlertTriangle,\n  Download,\n  Star,\n  RefreshCw,\n  Activity,\n  Crown,\n  UserX,\n  Ban,\n  FileText,\n  AlertCircle,\n  MapPin\n} from 'lucide-react';\nimport { supabase } from '../lib/supabase';\nimport type { University, Scholarship } from '../types';\nimport { useAuth } from '../hooks/useAuth';\nimport { Dialog } from '@headlessui/react';\n\ninterface AdminStats {\n  totalUniversities: number;\n  pendingUniversities: number;\n  approvedUniversities: number;\n  totalStudents: number;\n  totalScholarships: number;\n  totalApplications: number;\n  totalFunding: number;\n  monthlyGrowth: number;\n}\n\ninterface UserProfile {\n  id: string;\n  user_id: string;\n  full_name: string;\n  email: string;\n  role: 'student' | 'school' | 'admin';\n  country?: string;\n  field_of_interest?: string;\n  status: 'active' | 'inactive' | 'suspended';\n  applications_count: number;\n  created_at: string;\n  last_active: string;\n}\n\ninterface AdminLog {\n  id: string;\n  admin_user_name: string;\n  action: string;\n  target_type: string;\n  target_id?: string;\n  details: any;\n  created_at: string;\n}\n\nconst AdminDashboard: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<'overview' | 'universities' | 'users' | 'scholarships' | 'applications' | 'reports' | 'logs' | 'settings'>('overview');\n  const [universities, setUniversities] = useState<University[]>([]);\n  const [users, setUsers] = useState<UserProfile[]>([]);\n  const [scholarships, setScholarships] = useState<Scholarship[]>([]);\n  const [adminLogs, setAdminLogs] = useState<AdminLog[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const { user } = useAuth();\n\n  const [stats, setStats] = useState<AdminStats>({\n    totalUniversities: 0,\n    pendingUniversities: 0,\n    approvedUniversities: 0,\n    totalStudents: 0,\n    totalScholarships: 0,\n    totalApplications: 0,\n    totalFunding: 0,\n    monthlyGrowth: 12.5\n  });\n\n  const [selectedUser, setSelectedUser] = useState<UserProfile | null>(null);\n  const [isUserModalOpen, setIsUserModalOpen] = useState(false);\n\n  useEffect(() => {\n    if (user && user.role === 'admin') {\n      loadAdminData();\n    }\n  }, [user]);\n\n  const loadAdminData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Load universities - should work with existing RLS policies\n      const { data: universitiesData, error: universitiesError } = await supabase\n        .from('universities')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (universitiesError) {\n        console.error('Error loading universities:', universitiesError);\n        throw new Error(`Failed to load universities: ${universitiesError.message}`);\n      }\n\n      // Try to load users using the new admin function\n      let usersData: any[] = [];\n      try {\n        const { data: adminUsersData, error: adminUsersError } = await supabase.rpc('get_admin_users_data');\n        \n        if (adminUsersError) {\n          console.error('Error loading admin users data:', adminUsersError);\n          \n          // Fallback to user_profiles only if the function fails\n          const { data: profilesData, error: profilesError } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .order('created_at', { ascending: false });\n          \n          if (profilesError) {\n            console.error('Error loading user profiles:', profilesError);\n            throw new Error(`Failed to load user data: ${profilesError.message}`);\n          }\n          \n          // Map profiles to user format\n          usersData = (profilesData || []).map((profile: any) => ({\n            id: profile.id,\n            user_id: profile.user_id,\n            full_name: profile.full_name || 'Unknown User',\n            email: 'Email not available', // Email not available from profiles alone\n            role: 'student', // Default role\n            country: profile.country,\n            field_of_interest: profile.field_of_interest,\n            status: profile.status || 'active',\n            applications_count: 0,\n            created_at: profile.created_at,\n            last_active: profile.last_active || profile.created_at\n          }));\n        } else {\n          // Process users from admin function\n          usersData = (adminUsersData || []).map((u: any) => ({\n            id: u.id,\n            user_id: u.id,\n            full_name: u.full_name || 'Unknown User',\n            email: u.email || 'Email not available',\n            role: u.raw_user_meta_data?.role || 'student',\n            country: u.country,\n            field_of_interest: u.field_of_interest,\n            status: u.status || 'active',\n            applications_count: 0,\n            created_at: u.created_at,\n            last_active: u.last_active || u.created_at\n          }));\n        }\n      } catch (userError) {\n        console.error('Error in user data loading:', userError);\n        // Continue with empty users array rather than failing completely\n        usersData = [];\n        setError('Could not load user data. Some admin functions may be limited.');\n      }\n\n      // Load scholarships\n      const { data: scholarshipsData, error: scholarshipsError } = await supabase\n        .from('scholarships')\n        .select(`\n          *,\n          universities!inner (\n            name\n          )\n        `)\n        .order('created_at', { ascending: false });\n\n      if (scholarshipsError) {\n        console.error('Error loading scholarships:', scholarshipsError);\n        // Don't throw here, continue with empty array\n      }\n\n      // Load applications\n      const { data: applicationsData, error: applicationsError } = await supabase\n        .from('scholarship_applications')\n        .select(`\n          *,\n          scholarships!inner (\n            title,\n            amount,\n            universities!inner (\n              name\n            )\n          )\n        `)\n        .order('created_at', { ascending: false });\n\n      if (applicationsError) {\n        console.error('Error loading applications:', applicationsError);\n        // Don't throw here, continue with empty array\n      }\n\n      // Load admin logs\n      const { data: logsData, error: logsError } = await supabase\n        .from('admin_logs')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(50);\n\n      if (logsError) {\n        console.error('Error loading logs:', logsError);\n        // Don't throw here, continue with empty array\n      }\n\n      // Process data\n      const processedUniversities = universitiesData || [];\n      const processedScholarships = scholarshipsData || [];\n      const processedApplications = (applicationsData || []).map((app: any) => ({\n        id: app.id,\n        student_name: 'Student User', // Could be enhanced with user lookup\n        student_email: '',\n        scholarship_title: app.scholarships?.title || 'Unknown Scholarship',\n        university_name: app.scholarships?.universities?.name || 'Unknown University',\n        amount: app.scholarships?.amount || 0,\n        status: app.status,\n        applied_at: app.applied_at,\n        reviewed_at: app.reviewed_at,\n        notes: app.notes\n      }));\n\n      setUniversities(processedUniversities);\n      setUsers(usersData);\n      setScholarships(processedScholarships);\n      setAdminLogs(logsData || []);\n\n      // Calculate statistics\n      const newStats: AdminStats = {\n        totalUniversities: processedUniversities.length,\n        pendingUniversities: processedUniversities.filter(u => !u.is_approved).length,\n        approvedUniversities: processedUniversities.filter(u => u.is_approved).length,\n        totalStudents: usersData.filter(u => u.role === 'student').length,\n        totalScholarships: processedScholarships.length,\n        totalApplications: processedApplications.length,\n        totalFunding: processedScholarships.reduce((sum, s) => sum + Number(s.amount), 0),\n        monthlyGrowth: 12.5\n      };\n\n      setStats(newStats);\n    } catch (error: any) {\n      console.error('Error loading admin data:', error);\n      setError(`Failed to load admin data: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApproveUniversity = async (universityId: string) => {\n    try {\n      const { error } = await supabase.rpc('approve_university', {\n        university_id_param: universityId\n      });\n\n      if (error) throw error;\n\n      // Update local state\n      setUniversities(prev => prev.map(u => \n        u.id === universityId ? { ...u, is_approved: true } : u\n      ));\n      \n      setStats(prev => ({\n        ...prev,\n        approvedUniversities: prev.approvedUniversities + 1,\n        pendingUniversities: prev.pendingUniversities - 1\n      }));\n\n      alert('University approved successfully!');\n    } catch (error: any) {\n      console.error('Error approving university:', error);\n      alert(`Error approving university: ${error.message}`);\n    }\n  };\n\n  const handleRejectUniversity = async (universityId: string) => {\n    const reason = prompt('Please provide a reason for rejection (optional):');\n    \n    if (confirm('Are you sure you want to reject this university? This action cannot be undone.')) {\n      try {\n        const { error } = await supabase.rpc('reject_university', {\n          university_id_param: universityId,\n          reason_text: reason || ''\n        });\n\n        if (error) throw error;\n\n        // Update local state\n        setUniversities(prev => prev.filter(u => u.id !== universityId));\n        setStats(prev => ({\n          ...prev,\n          totalUniversities: prev.totalUniversities - 1,\n          pendingUniversities: prev.pendingUniversities - 1\n        }));\n\n        alert('University rejected and removed successfully!');\n      } catch (error: any) {\n        console.error('Error rejecting university:', error);\n        alert(`Error rejecting university: ${error.message}`);\n      }\n    }\n  };\n\n  const handlePromoteToAdmin = async (userId: string) => {\n    if (confirm('Are you sure you want to promote this user to admin?')) {\n      try {\n        const { error } = await supabase.rpc('promote_user_to_admin', {\n          target_user_id: userId\n        });\n\n        if (error) throw error;\n\n        alert('User promotion logged. Note: Actual role update must be done via Supabase admin panel.');\n      } catch (error: any) {\n        console.error('Error promoting user:', error);\n        alert(`Error promoting user: ${error.message}`);\n      }\n    }\n  };\n\n  const handleSuspendUser = async (userId: string) => {\n    if (confirm('Are you sure you want to suspend this user?')) {\n      try {\n        const { error } = await supabase\n          .from('user_profiles')\n          .update({ status: 'suspended' })\n          .eq('user_id', userId);\n\n        if (error) throw error;\n\n        // Log the action\n        await supabase.rpc('log_admin_action', {\n          action_text: 'suspend_user',\n          target_type_text: 'user',\n          target_id_param: userId\n        });\n\n        // Update local state\n        setUsers(prev => prev.map(u => \n          u.user_id === userId ? { ...u, status: 'suspended' } : u\n        ));\n\n        alert('User suspended successfully!');\n      } catch (error: any) {\n        console.error('Error suspending user:', error);\n        alert(`Error suspending user: ${error.message}`);\n      }\n    }\n  };\n\n  const handleDeleteUser = async (userId: string) => {\n    if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {\n      try {\n        // Log the action before deletion\n        await supabase.rpc('log_admin_action', {\n          action_text: 'delete_user',\n          target_type_text: 'user',\n          target_id_param: userId\n        });\n\n        // Update user profile status to inactive\n        const { error } = await supabase\n          .from('user_profiles')\n          .update({ status: 'inactive' })\n          .eq('user_id', userId);\n\n        if (error) throw error;\n\n        setUsers(prev => prev.filter(u => u.user_id !== userId));\n        alert('User marked as inactive successfully!');\n      } catch (error: any) {\n        console.error('Error deleting user:', error);\n        alert(`Error deleting user: ${error.message}`);\n      }\n    }\n  };\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'under_review': return 'bg-blue-100 text-blue-800';\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'inactive': return 'bg-gray-100 text-gray-800';\n      case 'suspended': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-purple-100 text-purple-800';\n      case 'school': return 'bg-blue-100 text-blue-800';\n      case 'student': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin': return Crown;\n      case 'school': return Building;\n      case 'student': return Users;\n      default: return Users;\n    }\n  };\n\n  // Check if user is admin\n  if (!user || user.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h1>\n          <p className=\"text-gray-600\">You need administrator privileges to access this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#05294E] mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n                <Crown className=\"h-6 w-6 mr-2 text-purple-600\" />\n                Admin Dashboard\n              </h1>\n              <p className=\"text-gray-600\">Manage platform users, universities, and system settings</p>\n              {error && (\n                <div className=\"mt-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <AlertTriangle className=\"h-4 w-4 text-yellow-600 mr-2\" />\n                    <p className=\"text-sm text-yellow-800\">{error}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <button \n                onClick={loadAdminData}\n                className=\"bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center\"\n                disabled={loading}\n              >\n                <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n                Refresh\n              </button>\n              <button className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors flex items-center\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export Data\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation Tabs */}\n        <div className=\"border-b border-gray-200 mb-8\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {[\n              { id: 'overview', label: 'Overview', icon: BarChart3 },\n              { id: 'universities', label: 'Universities', icon: Building },\n              { id: 'users', label: 'Users', icon: Users },\n              { id: 'scholarships', label: 'Scholarships', icon: Award },\n              { id: 'applications', label: 'Applications', icon: FileText },\n              { id: 'logs', label: 'Activity Logs', icon: Activity },\n              { id: 'settings', label: 'Settings', icon: Settings }\n            ].map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as any)}\n                  className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center transition-colors ${\n                    activeTab === tab.id\n                      ? 'border-[#05294E] text-[#05294E]'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <Icon className=\"h-4 w-4 mr-2\" />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Overview Tab */}\n        {activeTab === 'overview' && (\n          <div className=\"space-y-8\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-[#05294E]/10 p-3 rounded-lg\">\n                    <Building className=\"h-6 w-6 text-[#05294E]\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Universities</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.totalUniversities}</p>\n                    <p className=\"text-xs text-yellow-600\">{stats.pendingUniversities} pending approval</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-blue-100 p-3 rounded-lg\">\n                    <Users className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Total Users</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{users.length}</p>\n                    <p className=\"text-xs text-green-600\">{stats.totalStudents} students</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-green-100 p-3 rounded-lg\">\n                    <Award className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Scholarships</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.totalScholarships}</p>\n                    <p className=\"text-xs text-gray-500\">{formatAmount(stats.totalFunding)} total</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-purple-100 p-3 rounded-lg\">\n                    <FileText className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Applications</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.totalApplications}</p>\n                    <p className=\"text-xs text-blue-600\">Active submissions</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Recent Activity */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                  <AlertCircle className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                  Pending Approvals\n                </h3>\n                <div className=\"space-y-4\">\n                  {universities.filter(u => !u.is_approved).slice(0, 5).map((university) => (\n                    <div key={university.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-gray-900\">{university.name}</p>\n                        <p className=\"text-sm text-gray-500\">{university.location}</p>\n                        <p className=\"text-xs text-gray-400\">Applied: {new Date(university.created_at).toLocaleDateString()}</p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <button\n                          onClick={() => handleApproveUniversity(university.id)}\n                          className=\"text-green-600 hover:bg-green-50 p-2 rounded-lg transition-colors\"\n                          title=\"Approve\"\n                        >\n                          <CheckCircle className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          onClick={() => handleRejectUniversity(university.id)}\n                          className=\"text-red-600 hover:bg-red-50 p-2 rounded-lg transition-colors\"\n                          title=\"Reject\"\n                        >\n                          <XCircle className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                  {universities.filter(u => !u.is_approved).length === 0 && (\n                    <p className=\"text-gray-500 text-center py-4\">No pending approvals</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                  <Activity className=\"h-5 w-5 mr-2 text-blue-500\" />\n                  Recent Activity\n                </h3>\n                <div className=\"space-y-4\">\n                  {adminLogs.slice(0, 5).map((log) => (\n                    <div key={log.id} className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"bg-blue-100 p-1 rounded\">\n                        <Activity className=\"h-3 w-3 text-blue-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {log.action.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {new Date(log.created_at).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                  {adminLogs.length === 0 && (\n                    <p className=\"text-gray-500 text-center py-4\">No recent activity</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Universities Tab */}\n        {activeTab === 'universities' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">University Management</h2>\n              <div className=\"flex space-x-3\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search universities...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                  />\n                </div>\n                <select\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"approved\">Approved</option>\n                  <option value=\"pending\">Pending</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">University</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Location</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Programs</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Created</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {universities\n                    .filter(university => {\n                      const matchesSearch = university.name.toLowerCase().includes(searchTerm.toLowerCase());\n                      const matchesStatus = statusFilter === 'all' || \n                        (statusFilter === 'approved' && university.is_approved) ||\n                        (statusFilter === 'pending' && !university.is_approved);\n                      return matchesSearch && matchesStatus;\n                    })\n                    .map((university) => (\n                      <tr key={university.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div>\n                            <div className=\"text-sm font-medium text-gray-900\">{university.name}</div>\n                            <div className=\"text-sm text-gray-500\">{university.website}</div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {university.location}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {university.programs?.length || 0} programs\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                            university.is_approved ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n                          }`}>\n                            {university.is_approved ? 'Approved' : 'Pending'}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {new Date(university.created_at).toLocaleDateString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                          <div className=\"flex space-x-2\">\n                            <button \n                              className=\"text-indigo-600 hover:text-indigo-900 hover:bg-indigo-50 p-1 rounded\"\n                              title=\"View Details\"\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </button>\n                            {!university.is_approved && (\n                              <>\n                                <button\n                                  onClick={() => handleApproveUniversity(university.id)}\n                                  className=\"text-green-600 hover:text-green-900 hover:bg-green-50 p-1 rounded\"\n                                  title=\"Approve University\"\n                                >\n                                  <CheckCircle className=\"h-4 w-4\" />\n                                </button>\n                                <button\n                                  onClick={() => handleRejectUniversity(university.id)}\n                                  className=\"text-red-600 hover:text-red-900 hover:bg-red-50 p-1 rounded\"\n                                  title=\"Reject University\"\n                                >\n                                  <XCircle className=\"h-4 w-4\" />\n                                </button>\n                              </>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n\n        {/* Users Tab */}\n        {activeTab === 'users' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">User Management</h2>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search users...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {users\n                .filter(user => \n                  user.full_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                  user.email.toLowerCase().includes(searchTerm.toLowerCase())\n                )\n                .map((userProfile) => {\n                  const RoleIcon = getRoleIcon(userProfile.role);\n                  \n                  return (\n                    <div key={userProfile.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`p-2 rounded-lg ${userProfile.role === 'admin' ? 'bg-purple-100' : userProfile.role === 'school' ? 'bg-blue-100' : 'bg-green-100'}`}>\n                            <RoleIcon className={`h-5 w-5 ${userProfile.role === 'admin' ? 'text-purple-600' : userProfile.role === 'school' ? 'text-blue-600' : 'text-green-600'}`} />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">{userProfile.full_name}</h3>\n                            <p className=\"text-sm text-gray-500\">{userProfile.email}</p>\n                          </div>\n                        </div>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(userProfile.status)}`}>\n                          {userProfile.status}\n                        </span>\n                      </div>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-500\">Role</span>\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRoleColor(userProfile.role)}`}>\n                            {userProfile.role}\n                          </span>\n                        </div>\n                        {userProfile.country && (\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <MapPin className=\"h-4 w-4 mr-2\" />\n                            {userProfile.country}\n                          </div>\n                        )}\n                        {userProfile.field_of_interest && (\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <Star className=\"h-4 w-4 mr-2\" />\n                            {userProfile.field_of_interest}\n                          </div>\n                        )}\n                        <div className=\"flex items-center text-sm text-gray-600\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          Joined {new Date(userProfile.created_at).toLocaleDateString()}\n                        </div>\n                      </div>\n\n                      <div className=\"flex space-x-2\">\n                        <button\n                          onClick={() => { setSelectedUser(userProfile); setIsUserModalOpen(true); }}\n                          className=\"flex-1 bg-gray-100 text-gray-700 py-2 px-3 rounded-lg hover:bg-gray-200 transition-colors text-sm flex items-center justify-center\"\n                          title=\"View Details\"\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View Details\n                        </button>\n                        {userProfile.role !== 'admin' && (\n                          <button\n                            onClick={() => handlePromoteToAdmin(userProfile.user_id)}\n                            className=\"flex-1 bg-purple-100 text-purple-700 py-2 px-3 rounded-lg hover:bg-purple-200 transition-colors text-sm flex items-center justify-center font-bold border border-purple-200 shadow-sm\"\n                            title=\"Promote to Admin\"\n                          >\n                            <Crown className=\"h-4 w-4 mr-1\" />\n                            Promote to Admin\n                          </button>\n                        )}\n                        {userProfile.status === 'active' && (\n                          <button\n                            onClick={() => handleSuspendUser(userProfile.user_id)}\n                            className=\"bg-yellow-100 text-yellow-700 py-2 px-3 rounded-lg hover:bg-yellow-200 transition-colors\"\n                            title=\"Suspend User\"\n                          >\n                            <Ban className=\"h-4 w-4\" />\n                          </button>\n                        )}\n                        <button\n                          onClick={() => handleDeleteUser(userProfile.user_id)}\n                          className=\"bg-red-100 text-red-700 py-2 px-3 rounded-lg hover:bg-red-200 transition-colors\"\n                          title=\"Delete User\"\n                        >\n                          <UserX className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    </div>\n                  );\n                })}\n            </div>\n            \n            {users.length === 0 && !loading && (\n              <div className=\"text-center py-12\">\n                <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No user data available</p>\n                <p className=\"text-sm text-gray-400\">User data may be limited due to permissions</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Scholarships Tab */}\n        {activeTab === 'scholarships' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Scholarship Management</h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {scholarships.map((scholarship) => (\n                <div key={scholarship.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <h3 className=\"font-semibold text-gray-900 line-clamp-2\">{scholarship.title}</h3>\n                    {scholarship.is_exclusive && (\n                      <span className=\"bg-[#D0151C] text-white px-2 py-1 rounded-full text-xs font-bold\">\n                        Exclusive\n                      </span>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">Amount</span>\n                      <span className=\"font-semibold text-green-600\">{formatAmount(Number(scholarship.amount))}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">University</span>\n                      <span className=\"text-gray-900\">{scholarship.universities?.name || 'N/A'}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">Level</span>\n                      <span className=\"text-gray-900 capitalize\">{scholarship.level}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">Deadline</span>\n                      <span className=\"text-gray-900\">{new Date(scholarship.deadline).toLocaleDateString()}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">Status</span>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${scholarship.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>\n                        {scholarship.is_active ? 'Active' : 'Inactive'}\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <button className=\"flex-1 bg-gray-100 text-gray-700 py-2 px-3 rounded-lg hover:bg-gray-200 transition-colors text-sm\">\n                      View Details\n                    </button>\n                    <button className=\"bg-gray-100 text-gray-700 py-2 px-3 rounded-lg hover:bg-gray-200 transition-colors\">\n                      <Edit className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Activity Logs Tab */}\n        {activeTab === 'logs' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Activity Logs</h2>\n              <button\n                onClick={loadAdminData}\n                className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors flex items-center\"\n              >\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </button>\n            </div>\n\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Action</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Target</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Admin</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Details</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {adminLogs.map((log) => (\n                    <tr key={log.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800\">\n                          {log.action.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {log.target_type}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {log.admin_user_name || 'System'}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {new Date(log.created_at).toLocaleString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        <button className=\"text-indigo-600 hover:text-indigo-900\">\n                          <Eye className=\"h-4 w-4\" />\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                  {adminLogs.length === 0 && (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 text-center text-gray-500\">\n                        No activity logs found\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n\n        {/* Settings Tab */}\n        {activeTab === 'settings' && (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">System Settings</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Platform Configuration</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-700\">Auto-approve universities</span>\n                    <input type=\"checkbox\" className=\"rounded border-gray-300\" />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-700\">Email notifications</span>\n                    <input type=\"checkbox\" defaultChecked className=\"rounded border-gray-300\" />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-700\">Maintenance mode</span>\n                    <input type=\"checkbox\" className=\"rounded border-gray-300\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">System Statistics</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-700\">Database Size</span>\n                    <span className=\"text-sm font-medium text-gray-900\">245 MB</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-700\">Active Sessions</span>\n                    <span className=\"text-sm font-medium text-gray-900\">1,247</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-700\">Server Status</span>\n                    <span className=\"text-sm font-medium text-green-600\">Healthy</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* User Details Modal */}\n      <Dialog open={isUserModalOpen} onClose={() => setIsUserModalOpen(false)} className=\"fixed z-50 inset-0 overflow-y-auto\">\n        <div className=\"flex items-center justify-center min-h-screen px-4\">\n          <div className=\"fixed inset-0 bg-black opacity-30\" />\n          <div className=\"relative bg-white rounded-xl shadow-xl max-w-md w-full mx-auto p-8 z-50\">\n            <Dialog.Title className=\"text-xl font-bold mb-4 flex items-center\">\n              <Crown className=\"h-5 w-5 mr-2 text-purple-600\" />\n              User Details\n            </Dialog.Title>\n            {selectedUser && (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <span className={`p-2 rounded-lg ${selectedUser.role === 'admin' ? 'bg-purple-100' : selectedUser.role === 'school' ? 'bg-blue-100' : 'bg-green-100'}`}>\n                    {getRoleIcon(selectedUser.role)({ className: `h-5 w-5 ${selectedUser.role === 'admin' ? 'text-purple-600' : selectedUser.role === 'school' ? 'text-blue-600' : 'text-green-600'}` })}\n                  </span>\n                  <span className=\"font-semibold text-gray-900\">{selectedUser.full_name}</span>\n                </div>\n                <div className=\"text-sm text-gray-500\">{selectedUser.email}</div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Joined {new Date(selectedUser.created_at).toLocaleDateString()}\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRoleColor(selectedUser.role)}`}>{selectedUser.role}</span>\n                  <span className={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(selectedUser.status)}`}>{selectedUser.status}</span>\n                </div>\n                {selectedUser.country && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <MapPin className=\"h-4 w-4 mr-2\" />\n                    {selectedUser.country}\n                  </div>\n                )}\n                {selectedUser.field_of_interest && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Star className=\"h-4 w-4 mr-2\" />\n                    {selectedUser.field_of_interest}\n                  </div>\n                )}\n                {/* Promote to Admin button inside modal */}\n                {selectedUser.role !== 'admin' && (\n                  <button\n                    onClick={() => { handlePromoteToAdmin(selectedUser.user_id); setIsUserModalOpen(false); }}\n                    className=\"w-full bg-purple-600 text-white py-3 px-4 rounded-lg hover:bg-purple-700 transition-colors font-bold flex items-center justify-center mt-4\"\n                  >\n                    <Crown className=\"h-4 w-4 mr-2\" />\n                    Promote to Admin\n                  </button>\n                )}\n              </div>\n            )}\n            <button\n              onClick={() => setIsUserModalOpen(false)}\n              className=\"absolute top-2 right-2 text-gray-400 hover:text-gray-600\"\n              title=\"Close\"\n            >\n              <XCircle className=\"h-5 w-5\" />\n            </button>\n          </div>\n        </div>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AdminDashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\AdminDashboard\\AdminDashboardLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Outlet' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[429,432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[429,432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link, Outlet, useLocation, useNavigate } from 'react-router-dom';\nimport { \n  Crown, \n  Building, \n  Users, \n  Award, \n  Settings, \n  BarChart3,\n  Bell,\n  Search,\n  Menu,\n  X,\n  LogOut,\n  User,\n  ChevronDown,\n  Shield,\n  Activity,\n  AlertTriangle,\n  CheckCircle\n} from 'lucide-react';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface AdminDashboardLayoutProps {\n  user: any;\n  loading: boolean;\n  children: React.ReactNode;\n}\n\nconst AdminDashboardLayout: React.FC<AdminDashboardLayoutProps> = ({\n  user,\n  loading,\n  children\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { logout } = useAuth();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [userMenuOpen, setUserMenuOpen] = useState(false);\n  \n  const getActiveTab = () => {\n    const path = location.pathname;\n    if (path.includes('/universities')) return 'universities';\n    if (path.includes('/users')) return 'users';\n    if (path.includes('/scholarships')) return 'scholarships';\n    if (path.includes('/settings')) return 'settings';\n    return 'overview';\n  };\n\n  const activeTab = getActiveTab();\n\n  const handleLogout = () => {\n    logout();\n    navigate('/');\n    setSidebarOpen(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600\"></div>\n          <p className=\"text-slate-600 font-medium\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Check if user is admin\n  if (!user || user.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h1>\n          <p className=\"text-gray-600\">You need administrator privileges to access this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const sidebarItems = [\n    { id: 'overview', label: 'Overview', icon: BarChart3, path: '/admin/dashboard', badge: null },\n    { id: 'universities', label: 'Universities', icon: Building, path: '/admin/dashboard/universities', badge: null },\n    { id: 'users', label: 'Users', icon: Users, path: '/admin/dashboard/users', badge: null },\n    { id: 'scholarships', label: 'Scholarships', icon: Award, path: '/admin/dashboard/scholarships', badge: null },\n    { id: 'settings', label: 'System Settings', icon: Settings, path: '/admin/dashboard/settings', badge: null }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex\">\n      {/* Sidebar */}\n      <div className={`fixed inset-y-0 left-0 z-50 w-72 bg-white shadow-xl transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0 ${\n        sidebarOpen ? 'translate-x-0' : '-translate-x-full'\n      }`}>\n        <div className=\"flex flex-col h-full\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-between h-20 px-6 border-b border-slate-200\">\n            <Link to=\"/\" className=\"flex items-center justify-center w-full\">\n              <img \n                src=\"/logo.png.png\" \n                alt=\"Matrícula USA\" \n                className=\"h-12 w-auto\"\n              />\n            </Link>\n            <button\n              onClick={() => { setSidebarOpen(false); setUserMenuOpen(false); }}\n              className=\"lg:hidden absolute right-4 p-2 rounded-lg text-slate-400 hover:text-slate-600 hover:bg-slate-100\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n          </div>\n\n          {/* Admin Status */}\n          <div className=\"px-6 py-4 border-b border-slate-200\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg\">\n                <Crown className=\"h-6 w-6 text-white\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-semibold text-slate-900 truncate\">Admin Panel</h3>\n                <p className=\"text-sm text-slate-500 truncate\">System Administrator</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-center mt-3\">\n              <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-700\">\n                <Shield className=\"h-3 w-3 mr-1\" />\n                Full Access\n              </span>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 px-4 py-6 space-y-2\">\n            {sidebarItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = activeTab === item.id;\n              \n              return (\n                <Link\n                  key={item.id}\n                  to={item.path}\n                  className={`group flex items-center justify-between px-4 py-3 rounded-xl font-medium transition-all duration-200 ${\n                    isActive\n                      ? 'bg-purple-600 text-white shadow-lg'\n                      : 'text-slate-600 hover:text-slate-900 hover:bg-slate-100'\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Icon className={`h-5 w-5 ${isActive ? 'text-white' : 'text-slate-500'}`} />\n                    <span className=\"text-sm\">{item.label}</span>\n                  </div>\n                  {item.badge && (\n                    <span className=\"px-2 py-1 text-xs font-medium rounded-lg bg-slate-100 text-slate-500\">\n                      {item.badge}\n                    </span>\n                  )}\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* System Status */}\n          <div className=\"px-4 py-4 border-t border-slate-200\">\n            <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl p-4 border border-green-200\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-slate-900 text-sm\">System Status</h4>\n                  <p className=\"text-xs text-slate-500\">All systems operational</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Overlay for mobile */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={() => { setSidebarOpen(false); setUserMenuOpen(false); }}\n        />\n      )}\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Top Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200\">\n          <div className=\"flex items-center justify-between px-6 py-4\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => { setSidebarOpen(true); setUserMenuOpen(false); }}\n                className=\"lg:hidden p-2 rounded-lg text-slate-400 hover:text-slate-600 hover:bg-slate-100\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </button>\n              \n              <div className=\"hidden md:block\">\n                <h1 className=\"text-2xl font-bold text-slate-900\">\n                  {activeTab === 'overview' && 'Admin Overview'}\n                  {activeTab === 'universities' && 'University Management'}\n                  {activeTab === 'users' && 'User Management'}\n                  {activeTab === 'scholarships' && 'Scholarship Management'}\n                  {activeTab === 'settings' && 'System Settings'}\n                </h1>\n                <p className=\"text-slate-600\">\n                  {activeTab === 'overview' && 'Monitor platform performance and activity'}\n                  {activeTab === 'universities' && 'Manage university registrations and approvals'}\n                  {activeTab === 'users' && 'Manage user accounts and permissions'}\n                  {activeTab === 'scholarships' && 'Monitor scholarship programs and applications'}\n                  {activeTab === 'settings' && 'Configure system settings and preferences'}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Search */}\n              <div className=\"hidden lg:block\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search...\"\n                    className=\"w-80 pl-10 pr-4 py-2.5 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-purple-600 transition-all duration-200\"\n                  />\n                </div>\n              </div>\n\n              {/* Notifications */}\n              <button className=\"relative p-2.5 text-slate-400 hover:text-slate-600 hover:bg-slate-100 rounded-xl transition-colors\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full\"></span>\n              </button>\n\n              {/* User Menu */}\n              <div className=\"relative\">\n                <button\n                  onClick={() => { setUserMenuOpen(!userMenuOpen); setSidebarOpen(false); }}\n                  className=\"flex items-center space-x-3 p-2 rounded-xl hover:bg-slate-100 transition-colors\"\n                >\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                    <User className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div className=\"hidden md:block text-left\">\n                    <p className=\"font-semibold text-slate-900 text-sm\">{user?.name}</p>\n                    <p className=\"text-xs text-slate-500\">System Administrator</p>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4 text-slate-400\" />\n                </button>\n\n                {userMenuOpen && (\n                  <div className=\"absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-xl border border-slate-200 py-2 z-50\">\n                    <div className=\"px-4 py-3 border-b border-slate-200\">\n                      <p className=\"font-semibold text-slate-900\">{user?.name}</p>\n                      <p className=\"text-sm text-slate-500\">{user?.email}</p>\n                    </div>\n                    \n                    <Link\n                      to=\"/admin/dashboard/settings\"\n                      className=\"flex items-center px-4 py-3 text-sm text-slate-700 hover:bg-slate-50 transition-colors\"\n                      onClick={() => {\n                        setUserMenuOpen(false);\n                        setSidebarOpen(false);\n                      }}\n                    >\n                      <Settings className=\"h-4 w-4 mr-3 text-slate-400\" />\n                      System Settings\n                    </Link>\n                    \n                    <Link\n                      to=\"/admin/logs\"\n                      className=\"flex items-center px-4 py-3 text-sm text-slate-700 hover:bg-slate-50 transition-colors\"\n                      onClick={() => {\n                        setUserMenuOpen(false);\n                        setSidebarOpen(false);\n                      }}\n                    >\n                      <Activity className=\"h-4 w-4 mr-3 text-slate-400\" />\n                      Activity Logs\n                    </Link>\n                    \n                    <div className=\"border-t border-slate-200 my-2\"></div>\n                    \n                    <button\n                      onClick={handleLogout}\n                      className=\"flex items-center w-full px-4 py-3 text-sm text-red-600 hover:bg-red-50 transition-colors\"\n                    >\n                      <LogOut className=\"h-4 w-4 mr-3\" />\n                      Sign Out\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 p-6\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboardLayout;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\AdminDashboard\\Overview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[592,595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[592,595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[608,611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[608,611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[631,634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[631,634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  Building, \n  Users, \n  Award, \n  FileText, \n  TrendingUp, \n  AlertCircle, \n  CheckCircle, \n  Clock, \n  DollarSign,\n  Activity,\n  Crown,\n  Shield,\n  Eye,\n  ArrowUpRight,\n  Calendar,\n  Target\n} from 'lucide-react';\n\ninterface OverviewProps {\n  stats: {\n    totalUniversities: number;\n    pendingUniversities: number;\n    approvedUniversities: number;\n    totalStudents: number;\n    totalScholarships: number;\n    totalApplications: number;\n    totalFunding: number;\n    monthlyGrowth: number;\n  };\n  universities: any[];\n  users: any[];\n  applications: any[];\n  error: string | null;\n}\n\nconst Overview: React.FC<OverviewProps> = ({ stats, universities, users, applications, error }) => {\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(value);\n  };\n\n  const quickActions = [\n    {\n      title: 'Approve Universities',\n      description: 'Review pending university applications',\n      icon: Building,\n      color: 'bg-gradient-to-r from-blue-500 to-blue-600',\n      link: '/admin/dashboard/universities',\n      count: stats.pendingUniversities\n    },\n    {\n      title: 'Manage Users',\n      description: 'View and manage user accounts',\n      icon: Users,\n      color: 'bg-gradient-to-r from-green-500 to-green-600',\n      link: '/admin/dashboard/users',\n      count: users.length\n    },\n    {\n      title: 'Monitor Scholarships',\n      description: 'Track scholarship programs',\n      icon: Award,\n      color: 'bg-gradient-to-r from-purple-500 to-purple-600',\n      link: '/admin/dashboard/scholarships',\n      count: stats.totalScholarships\n    }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Error Alert */}\n      {error && (\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4\">\n          <div className=\"flex items-center\">\n            <AlertCircle className=\"h-5 w-5 text-yellow-600 mr-3\" />\n            <div>\n              <h3 className=\"font-medium text-yellow-800\">System Notice</h3>\n              <p className=\"text-sm text-yellow-700 mt-1\">{error}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Total Universities</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.totalUniversities}</p>\n              <div className=\"flex items-center mt-2\">\n                <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-sm font-medium text-green-600\">+{stats.monthlyGrowth}% this month</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <Building className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Total Users</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{users.length}</p>\n              <div className=\"flex items-center mt-2\">\n                <Users className=\"h-4 w-4 text-blue-500 mr-1\" />\n                <span className=\"text-sm font-medium text-blue-600\">{stats.totalStudents} students</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <Users className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Total Scholarships</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.totalScholarships}</p>\n              <div className=\"flex items-center mt-2\">\n                <DollarSign className=\"h-4 w-4 text-purple-500 mr-1\" />\n                <span className=\"text-sm font-medium text-purple-600\">{formatCurrency(stats.totalFunding)}</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <Award className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Applications</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.totalApplications}</p>\n              <div className=\"flex items-center mt-2\">\n                <FileText className=\"h-4 w-4 text-orange-500 mr-1\" />\n                <span className=\"text-sm font-medium text-orange-600\">Active submissions</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <FileText className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {quickActions.map((action, index) => {\n          const Icon = action.icon;\n          return (\n            <Link\n              key={index}\n              to={action.link}\n              className=\"group block p-6 bg-white rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 hover:-translate-y-1\"\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-12 h-12 ${action.color} rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>\n                  <Icon className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"text-2xl font-bold text-slate-900 mr-2\">{action.count}</span>\n                  <ArrowUpRight className=\"h-5 w-5 text-slate-400 group-hover:text-slate-600 transition-colors\" />\n                </div>\n              </div>\n              <h3 className=\"font-bold text-slate-900 mb-2\">{action.title}</h3>\n              <p className=\"text-slate-600 text-sm\">{action.description}</p>\n            </Link>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Pending Approvals */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200\">\n            <div className=\"p-6 border-b border-slate-200\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-900\">Pending University Approvals</h3>\n                  <p className=\"text-slate-500 text-sm\">Universities awaiting admin review</p>\n                </div>\n                <Link\n                  to=\"/admin/dashboard/universities\"\n                  className=\"text-purple-600 hover:text-purple-700 font-medium text-sm flex items-center\"\n                >\n                  View All\n                  <ArrowUpRight className=\"h-4 w-4 ml-1\" />\n                </Link>\n              </div>\n            </div>\n            \n            <div className=\"p-6\">\n              {universities.filter(u => !u.is_approved).length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-20 h-20 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                    <CheckCircle className=\"h-10 w-10 text-green-600\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-slate-900 mb-3\">All caught up!</h3>\n                  <p className=\"text-slate-500\">No universities pending approval</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {universities.filter(u => !u.is_approved).slice(0, 5).map((university) => (\n                    <div key={university.id} className=\"flex items-center justify-between p-4 bg-slate-50 hover:bg-slate-100 rounded-2xl transition-colors group\">\n                      <div className=\"flex items-center space-x-4 flex-1\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                          <Building className=\"h-6 w-6 text-white\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-bold text-slate-900 mb-1 truncate group-hover:text-purple-600 transition-colors\">\n                            {university.name}\n                          </h4>\n                          <div className=\"flex items-center space-x-4 text-sm text-slate-500\">\n                            <div className=\"flex items-center\">\n                              <Target className=\"h-4 w-4 mr-1\" />\n                              {university.location}\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-1\" />\n                              {new Date(university.created_at).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                        <button className=\"p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors\">\n                          <CheckCircle className=\"h-4 w-4\" />\n                        </button>\n                        <button className=\"p-2 text-slate-400 hover:text-slate-600 hover:bg-slate-100 rounded-lg transition-colors\">\n                          <Eye className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* System Status & Recent Activity */}\n        <div className=\"space-y-6\">\n          {/* System Status */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <h3 className=\"text-lg font-bold text-slate-900 mb-4 flex items-center\">\n              <Shield className=\"h-5 w-5 mr-2 text-green-500\" />\n              System Status\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Database</span>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                  <span className=\"text-sm text-green-600 font-medium\">Operational</span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">API Services</span>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                  <span className=\"text-sm text-green-600 font-medium\">Operational</span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Email Service</span>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                  <span className=\"text-sm text-green-600 font-medium\">Operational</span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">File Storage</span>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                  <span className=\"text-sm text-green-600 font-medium\">Operational</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Recent Activity */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <h3 className=\"text-lg font-bold text-slate-900 mb-4 flex items-center\">\n              <Activity className=\"h-5 w-5 mr-2 text-blue-500\" />\n              Recent Activity\n            </h3>\n            \n            <div className=\"space-y-4\">\n              {applications.slice(0, 4).map((activity, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <FileText className=\"h-4 w-4 text-blue-600\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-slate-900\">\n                      New scholarship application\n                    </p>\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      {activity.scholarship_title} • {new Date(activity.applied_at).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              \n              {applications.length === 0 && (\n                <p className=\"text-slate-500 text-sm text-center py-4\">No recent activity</p>\n              )}\n            </div>\n          </div>\n\n          {/* Admin Tools */}\n          <div className=\"bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl shadow-lg text-white p-6\">\n            <h3 className=\"text-lg font-bold mb-4 flex items-center\">\n              <Crown className=\"h-5 w-5 mr-2\" />\n              Admin Tools\n            </h3>\n            <div className=\"space-y-3\">\n              <Link\n                to=\"/admin/dashboard/settings\"\n                className=\"block w-full bg-white/20 backdrop-blur-sm border border-white/30 text-white py-2 px-4 rounded-xl hover:bg-white/30 transition-all duration-300 font-medium text-sm text-center\"\n              >\n                System Settings\n              </Link>\n              <Link\n                to=\"/admin/logs\"\n                className=\"block w-full bg-white/20 backdrop-blur-sm border border-white/30 text-white py-2 px-4 rounded-xl hover:bg-white/30 transition-all duration-300 font-medium text-sm text-center\"\n              >\n                Activity Logs\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\AdminDashboard\\ScholarshipManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[272,275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[272,275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Award, \n  DollarSign, \n  Calendar, \n  Building, \n  Search, \n  Filter, \n  Eye, \n  Edit,\n  TrendingUp,\n  Users,\n  CheckCircle,\n  Clock,\n  Zap\n} from 'lucide-react';\n\ninterface ScholarshipManagementProps {\n  scholarships: any[];\n  stats: {\n    total: number;\n    active: number;\n    totalFunding: number;\n  };\n}\n\nconst ScholarshipManagement: React.FC<ScholarshipManagementProps> = ({\n  scholarships,\n  stats\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [levelFilter, setLevelFilter] = useState('all');\n\n  const filteredScholarships = scholarships.filter(scholarship => {\n    const matchesSearch = scholarship.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         scholarship.universities?.name.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || \n      (statusFilter === 'active' && scholarship.is_active) ||\n      (statusFilter === 'inactive' && !scholarship.is_active);\n    \n    const matchesLevel = levelFilter === 'all' || scholarship.level === levelFilter;\n    \n    return matchesSearch && matchesStatus && matchesLevel;\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(value);\n  };\n\n  const getDaysUntilDeadline = (deadline: string) => {\n    const today = new Date();\n    const deadlineDate = new Date(deadline);\n    const diffTime = deadlineDate.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getDeadlineStatus = (deadline: string) => {\n    const days = getDaysUntilDeadline(deadline);\n    if (days < 0) return { status: 'expired', color: 'text-red-600', bg: 'bg-red-50' };\n    if (days <= 7) return { status: 'urgent', color: 'text-orange-600', bg: 'bg-orange-50' };\n    if (days <= 30) return { status: 'soon', color: 'text-yellow-600', bg: 'bg-yellow-50' };\n    return { status: 'normal', color: 'text-green-600', bg: 'bg-green-50' };\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Total Scholarships</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.total}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center\">\n              <Award className=\"h-6 w-6 text-purple-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Active Scholarships</p>\n              <p className=\"text-3xl font-bold text-green-600\">{stats.active}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Total Funding</p>\n              <p className=\"text-3xl font-bold text-blue-600\">{formatCurrency(stats.totalFunding)}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n              <DollarSign className=\"h-6 w-6 text-blue-600\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-slate-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search scholarships...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-12 pr-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-purple-600 transition-all duration-200\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex gap-4\">\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-purple-600 transition-all duration-200\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"active\">Active</option>\n              <option value=\"inactive\">Inactive</option>\n            </select>\n\n            <select\n              value={levelFilter}\n              onChange={(e) => setLevelFilter(e.target.value)}\n              className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-purple-600 transition-all duration-200\"\n            >\n              <option value=\"all\">All Levels</option>\n              <option value=\"undergraduate\">Undergraduate</option>\n              <option value=\"graduate\">Graduate</option>\n              <option value=\"doctorate\">Doctorate</option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"mt-4 flex items-center text-sm text-slate-600\">\n          <span className=\"font-medium\">{filteredScholarships.length}</span>\n          <span className=\"ml-1\">\n            scholarship{filteredScholarships.length !== 1 ? 's' : ''} found\n          </span>\n        </div>\n      </div>\n\n      {/* Scholarships Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredScholarships.map((scholarship) => {\n          const deadlineInfo = getDeadlineStatus(scholarship.deadline);\n          const daysLeft = getDaysUntilDeadline(scholarship.deadline);\n          \n          return (\n            <div key={scholarship.id} className=\"bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden hover:shadow-lg transition-all duration-300 group\">\n              {/* Header */}\n              <div className=\"p-6 pb-4\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-slate-900 mb-2 line-clamp-2 group-hover:text-purple-600 transition-colors\">\n                      {scholarship.title}\n                    </h3>\n                    \n                    <div className=\"flex items-center space-x-3\">\n                      <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${\n                        scholarship.is_active \n                          ? 'bg-green-100 text-green-700' \n                          : 'bg-slate-100 text-slate-600'\n                      }`}>\n                        {scholarship.is_active ? (\n                          <>\n                            <Zap className=\"h-3 w-3 mr-1\" />\n                            Active\n                          </>\n                        ) : (\n                          <>\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            Inactive\n                          </>\n                        )}\n                      </span>\n                      \n                      {scholarship.is_exclusive && (\n                        <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-700\">\n                          <Award className=\"h-3 w-3 mr-1\" />\n                          Exclusive\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Amount */}\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-500 mb-1\">Scholarship Amount</p>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {formatCurrency(Number(scholarship.amount))}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-slate-500 mb-1\">Level</p>\n                    <p className=\"text-sm font-bold text-slate-900 capitalize\">\n                      {scholarship.level}\n                    </p>\n                  </div>\n                </div>\n\n                {/* University */}\n                <div className=\"flex items-center text-sm text-slate-600 mb-4\">\n                  <Building className=\"h-4 w-4 mr-2\" />\n                  {scholarship.universities?.name || 'Unknown University'}\n                </div>\n\n                {/* Deadline */}\n                <div className={`p-3 rounded-xl border ${deadlineInfo.bg} border-slate-200`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-700\">Application Deadline</p>\n                      <p className=\"font-bold text-slate-900\">\n                        {new Date(scholarship.deadline).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      {daysLeft > 0 ? (\n                        <>\n                          <p className={`text-2xl font-bold ${deadlineInfo.color}`}>\n                            {daysLeft}\n                          </p>\n                          <p className={`text-xs font-medium ${deadlineInfo.color}`}>\n                            day{daysLeft !== 1 ? 's' : ''} left\n                          </p>\n                        </>\n                      ) : (\n                        <span className=\"text-sm font-bold text-red-600\">Expired</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Quick Stats */}\n              <div className=\"px-6 pb-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"bg-slate-50 p-3 rounded-xl text-center\">\n                    <Users className=\"h-5 w-5 mx-auto mb-2 text-slate-500\" />\n                    <p className=\"text-lg font-bold text-slate-900\">0</p>\n                    <p className=\"text-xs text-slate-500\">Applicants</p>\n                  </div>\n                  <div className=\"bg-slate-50 p-3 rounded-xl text-center\">\n                    <Eye className=\"h-5 w-5 mx-auto mb-2 text-slate-500\" />\n                    <p className=\"text-lg font-bold text-slate-900\">0</p>\n                    <p className=\"text-xs text-slate-500\">Views</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"px-6 pb-6\">\n                <div className=\"flex space-x-2\">\n                  <button className=\"flex-1 bg-slate-100 text-slate-700 py-2.5 px-4 rounded-xl hover:bg-slate-200 transition-colors font-medium text-sm\">\n                    View Details\n                  </button>\n                  <button className=\"bg-purple-100 text-purple-700 py-2.5 px-4 rounded-xl hover:bg-purple-200 transition-colors\">\n                    <Edit className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {filteredScholarships.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Award className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No scholarships found</h3>\n          <p className=\"text-slate-500\">\n            {searchTerm ? `No scholarships match \"${searchTerm}\"` : 'No scholarships available yet'}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScholarshipManagement;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\AdminDashboard\\SystemSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bell' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[970,973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[970,973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Settings, \n  Shield, \n  Bell, \n  Database, \n  Mail, \n  Server, \n  Users, \n  FileText, \n  Save, \n  RefreshCw,\n  CheckCircle,\n  AlertTriangle,\n  Info\n} from 'lucide-react';\n\nconst SystemSettings: React.FC = () => {\n  const [settings, setSettings] = useState({\n    // Platform Settings\n    autoApproveUniversities: false,\n    emailNotifications: true,\n    maintenanceMode: false,\n    allowRegistrations: true,\n    \n    // Security Settings\n    requireEmailVerification: true,\n    sessionTimeout: 24,\n    maxLoginAttempts: 5,\n    \n    // Email Settings\n    emailProvider: 'supabase',\n    emailFromName: 'Matrícula USA',\n    emailFromAddress: 'noreply@matriculausa.com',\n    \n    // System Settings\n    maxFileSize: 10,\n    backupFrequency: 'daily',\n    logRetention: 30\n  });\n\n  const [saving, setSaving] = useState(false);\n  const [saved, setSaved] = useState(false);\n\n  const handleSettingChange = (key: string, value: any) => {\n    setSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  const handleSave = async () => {\n    setSaving(true);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    setSaving(false);\n    setSaved(true);\n    \n    setTimeout(() => setSaved(false), 3000);\n  };\n\n  const settingSections = [\n    {\n      title: 'Platform Configuration',\n      icon: Settings,\n      color: 'bg-blue-100 text-blue-600',\n      settings: [\n        {\n          key: 'autoApproveUniversities',\n          label: 'Auto-approve Universities',\n          description: 'Automatically approve university registrations without manual review',\n          type: 'toggle'\n        },\n        {\n          key: 'emailNotifications',\n          label: 'Email Notifications',\n          description: 'Send email notifications for important events',\n          type: 'toggle'\n        },\n        {\n          key: 'maintenanceMode',\n          label: 'Maintenance Mode',\n          description: 'Put the platform in maintenance mode',\n          type: 'toggle'\n        },\n        {\n          key: 'allowRegistrations',\n          label: 'Allow New Registrations',\n          description: 'Allow new users to register on the platform',\n          type: 'toggle'\n        }\n      ]\n    },\n    {\n      title: 'Security Settings',\n      icon: Shield,\n      color: 'bg-green-100 text-green-600',\n      settings: [\n        {\n          key: 'requireEmailVerification',\n          label: 'Require Email Verification',\n          description: 'Users must verify their email before accessing the platform',\n          type: 'toggle'\n        },\n        {\n          key: 'sessionTimeout',\n          label: 'Session Timeout (hours)',\n          description: 'How long user sessions remain active',\n          type: 'number',\n          min: 1,\n          max: 168\n        },\n        {\n          key: 'maxLoginAttempts',\n          label: 'Max Login Attempts',\n          description: 'Maximum failed login attempts before account lockout',\n          type: 'number',\n          min: 3,\n          max: 10\n        }\n      ]\n    },\n    {\n      title: 'Email Configuration',\n      icon: Mail,\n      color: 'bg-purple-100 text-purple-600',\n      settings: [\n        {\n          key: 'emailProvider',\n          label: 'Email Provider',\n          description: 'Email service provider for sending notifications',\n          type: 'select',\n          options: [\n            { value: 'supabase', label: 'Supabase' },\n            { value: 'sendgrid', label: 'SendGrid' },\n            { value: 'mailgun', label: 'Mailgun' }\n          ]\n        },\n        {\n          key: 'emailFromName',\n          label: 'From Name',\n          description: 'Name displayed in outgoing emails',\n          type: 'text'\n        },\n        {\n          key: 'emailFromAddress',\n          label: 'From Email Address',\n          description: 'Email address used for outgoing emails',\n          type: 'email'\n        }\n      ]\n    },\n    {\n      title: 'System Configuration',\n      icon: Server,\n      color: 'bg-orange-100 text-orange-600',\n      settings: [\n        {\n          key: 'maxFileSize',\n          label: 'Max File Size (MB)',\n          description: 'Maximum file size for uploads',\n          type: 'number',\n          min: 1,\n          max: 100\n        },\n        {\n          key: 'backupFrequency',\n          label: 'Backup Frequency',\n          description: 'How often to backup the database',\n          type: 'select',\n          options: [\n            { value: 'hourly', label: 'Hourly' },\n            { value: 'daily', label: 'Daily' },\n            { value: 'weekly', label: 'Weekly' }\n          ]\n        },\n        {\n          key: 'logRetention',\n          label: 'Log Retention (days)',\n          description: 'How long to keep system logs',\n          type: 'number',\n          min: 7,\n          max: 365\n        }\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-900\">System Settings</h2>\n          <p className=\"text-slate-600\">Configure platform settings and preferences</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          {saved && (\n            <div className=\"flex items-center text-green-600 bg-green-50 px-3 py-2 rounded-lg\">\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\n              <span className=\"text-sm font-medium\">Settings saved</span>\n            </div>\n          )}\n          \n          <button\n            onClick={handleSave}\n            disabled={saving}\n            className=\"bg-purple-600 text-white px-6 py-3 rounded-xl hover:bg-purple-700 transition-colors font-medium flex items-center disabled:opacity-50\"\n          >\n            {saving ? (\n              <>\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                Saving...\n              </>\n            ) : (\n              <>\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save Changes\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* System Status */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n        <h3 className=\"text-lg font-bold text-slate-900 mb-4 flex items-center\">\n          <Database className=\"h-5 w-5 mr-2 text-green-500\" />\n          System Status\n        </h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">Database</p>\n                <p className=\"text-xs text-green-600\">Operational</p>\n              </div>\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">API Services</p>\n                <p className=\"text-xs text-green-600\">Operational</p>\n              </div>\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">Email Service</p>\n                <p className=\"text-xs text-green-600\">Operational</p>\n              </div>\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">File Storage</p>\n                <p className=\"text-xs text-green-600\">Operational</p>\n              </div>\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Settings Sections */}\n      {settingSections.map((section, sectionIndex) => {\n        const Icon = section.icon;\n        \n        return (\n          <div key={sectionIndex} className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <h3 className=\"text-lg font-bold text-slate-900 mb-6 flex items-center\">\n              <div className={`w-8 h-8 rounded-lg flex items-center justify-center mr-3 ${section.color}`}>\n                <Icon className=\"h-4 w-4\" />\n              </div>\n              {section.title}\n            </h3>\n            \n            <div className=\"space-y-6\">\n              {section.settings.map((setting, settingIndex) => (\n                <div key={settingIndex} className=\"flex items-center justify-between py-4 border-b border-slate-100 last:border-b-0\">\n                  <div className=\"flex-1\">\n                    <label className=\"text-sm font-medium text-slate-900 block mb-1\">\n                      {setting.label}\n                    </label>\n                    <p className=\"text-sm text-slate-500\">{setting.description}</p>\n                  </div>\n                  \n                  <div className=\"ml-6\">\n                    {setting.type === 'toggle' && (\n                      <label className=\"relative inline-flex items-center cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={settings[setting.key as keyof typeof settings] as boolean}\n                          onChange={(e) => handleSettingChange(setting.key, e.target.checked)}\n                          className=\"sr-only peer\"\n                        />\n                        <div className=\"w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600\"></div>\n                      </label>\n                    )}\n                    \n                    {setting.type === 'number' && (\n                      <input\n                        type=\"number\"\n                        min={setting.min}\n                        max={setting.max}\n                        value={settings[setting.key as keyof typeof settings] as number}\n                        onChange={(e) => handleSettingChange(setting.key, parseInt(e.target.value))}\n                        className=\"w-20 px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-purple-600 text-sm\"\n                      />\n                    )}\n                    \n                    {setting.type === 'text' && (\n                      <input\n                        type=\"text\"\n                        value={settings[setting.key as keyof typeof settings] as string}\n                        onChange={(e) => handleSettingChange(setting.key, e.target.value)}\n                        className=\"w-64 px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-purple-600 text-sm\"\n                      />\n                    )}\n                    \n                    {setting.type === 'email' && (\n                      <input\n                        type=\"email\"\n                        value={settings[setting.key as keyof typeof settings] as string}\n                        onChange={(e) => handleSettingChange(setting.key, e.target.value)}\n                        className=\"w-64 px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-purple-600 text-sm\"\n                      />\n                    )}\n                    \n                    {setting.type === 'select' && (\n                      <select\n                        value={settings[setting.key as keyof typeof settings] as string}\n                        onChange={(e) => handleSettingChange(setting.key, e.target.value)}\n                        className=\"w-40 px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-purple-600 text-sm\"\n                      >\n                        {setting.options?.map((option) => (\n                          <option key={option.value} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                      </select>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n      })}\n\n      {/* Warning Notice */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-6\">\n        <div className=\"flex items-start\">\n          <AlertTriangle className=\"h-5 w-5 text-yellow-600 mr-3 mt-0.5\" />\n          <div>\n            <h4 className=\"font-medium text-yellow-800 mb-2\">Important Notice</h4>\n            <p className=\"text-sm text-yellow-700\">\n              Changes to system settings may affect platform functionality. Please review all changes carefully before saving. \n              Some settings may require a system restart to take effect.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemSettings;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\AdminDashboard\\UniversityManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[765,768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[765,768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Building, \n  CheckCircle, \n  XCircle, \n  Eye, \n  Search, \n  Filter, \n  Calendar, \n  MapPin,\n  Globe,\n  Mail,\n  Phone,\n  AlertTriangle,\n  Clock,\n  TrendingUp\n} from 'lucide-react';\n\ninterface UniversityManagementProps {\n  universities: any[];\n  stats: {\n    total: number;\n    pending: number;\n    approved: number;\n  };\n  onApprove: (universityId: string) => void;\n  onReject: (universityId: string) => void;\n}\n\nconst UniversityManagement: React.FC<UniversityManagementProps> = ({\n  universities,\n  stats,\n  onApprove,\n  onReject\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [selectedUniversity, setSelectedUniversity] = useState<any>(null);\n\n  const filteredUniversities = universities.filter(university => {\n    const matchesSearch = university.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         university.location?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || \n      (statusFilter === 'approved' && university.is_approved) ||\n      (statusFilter === 'pending' && !university.is_approved);\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Total Universities</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.total}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n              <Building className=\"h-6 w-6 text-blue-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Pending Approval</p>\n              <p className=\"text-3xl font-bold text-orange-600\">{stats.pending}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center\">\n              <Clock className=\"h-6 w-6 text-orange-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Approved</p>\n              <p className=\"text-3xl font-bold text-green-600\">{stats.approved}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-slate-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search universities...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-12 pr-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-purple-600 transition-all duration-200\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex gap-4\">\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-purple-600 transition-all duration-200\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"approved\">Approved</option>\n              <option value=\"pending\">Pending</option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"mt-4 flex items-center text-sm text-slate-600\">\n          <span className=\"font-medium\">{filteredUniversities.length}</span>\n          <span className=\"ml-1\">\n            universit{filteredUniversities.length !== 1 ? 'ies' : 'y'} found\n          </span>\n        </div>\n      </div>\n\n      {/* Universities List */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-slate-200\">\n            <thead className=\"bg-slate-50\">\n              <tr>\n                <th className=\"px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                  University\n                </th>\n                <th className=\"px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                  Location\n                </th>\n                <th className=\"px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                  Contact\n                </th>\n                <th className=\"px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                  Applied\n                </th>\n                <th className=\"px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-slate-200\">\n              {filteredUniversities.map((university) => (\n                <tr key={university.id} className=\"hover:bg-slate-50 transition-colors\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center mr-4\">\n                        <Building className=\"h-5 w-5 text-white\" />\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-slate-900\">{university.name}</div>\n                        {university.website && (\n                          <div className=\"text-sm text-slate-500 flex items-center\">\n                            <Globe className=\"h-3 w-3 mr-1\" />\n                            {university.website}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-slate-900 flex items-center\">\n                      <MapPin className=\"h-4 w-4 mr-1 text-slate-400\" />\n                      {university.location || 'Not provided'}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"space-y-1\">\n                      {university.contact?.email && (\n                        <div className=\"text-sm text-slate-600 flex items-center\">\n                          <Mail className=\"h-3 w-3 mr-1\" />\n                          {university.contact.email}\n                        </div>\n                      )}\n                      {university.contact?.phone && (\n                        <div className=\"text-sm text-slate-600 flex items-center\">\n                          <Phone className=\"h-3 w-3 mr-1\" />\n                          {university.contact.phone}\n                        </div>\n                      )}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${\n                      university.is_approved \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-orange-100 text-orange-800'\n                    }`}>\n                      {university.is_approved ? (\n                        <>\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          Approved\n                        </>\n                      ) : (\n                        <>\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          Pending\n                        </>\n                      )}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-500\">\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-1\" />\n                      {new Date(university.created_at).toLocaleDateString()}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <div className=\"flex items-center space-x-2\">\n                      <button \n                        onClick={() => setSelectedUniversity(university)}\n                        className=\"text-purple-600 hover:text-purple-900 hover:bg-purple-50 p-2 rounded-lg transition-colors\"\n                        title=\"View Details\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n                      {!university.is_approved && (\n                        <>\n                          <button\n                            onClick={() => onApprove(university.id)}\n                            className=\"text-green-600 hover:text-green-900 hover:bg-green-50 p-2 rounded-lg transition-colors\"\n                            title=\"Approve University\"\n                          >\n                            <CheckCircle className=\"h-4 w-4\" />\n                          </button>\n                          <button\n                            onClick={() => onReject(university.id)}\n                            className=\"text-red-600 hover:text-red-900 hover:bg-red-50 p-2 rounded-lg transition-colors\"\n                            title=\"Reject University\"\n                          >\n                            <XCircle className=\"h-4 w-4\" />\n                          </button>\n                        </>\n                      )}\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {filteredUniversities.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Building className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No universities found</h3>\n            <p className=\"text-slate-500\">\n              {searchTerm ? `No universities match \"${searchTerm}\"` : 'No universities registered yet'}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* University Detail Modal */}\n      {selectedUniversity && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6 border-b border-slate-200\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-bold text-slate-900\">University Details</h3>\n                <button\n                  onClick={() => setSelectedUniversity(null)}\n                  className=\"text-slate-400 hover:text-slate-600 p-2 rounded-lg hover:bg-slate-100\"\n                >\n                  <XCircle className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"p-6 space-y-6\">\n              <div>\n                <h4 className=\"font-semibold text-slate-900 mb-3\">Basic Information</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Name</label>\n                    <p className=\"text-slate-900\">{selectedUniversity.name}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Location</label>\n                    <p className=\"text-slate-900\">{selectedUniversity.location || 'Not provided'}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Website</label>\n                    <p className=\"text-slate-900\">{selectedUniversity.website || 'Not provided'}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Status</label>\n                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                      selectedUniversity.is_approved \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-orange-100 text-orange-800'\n                    }`}>\n                      {selectedUniversity.is_approved ? 'Approved' : 'Pending'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {selectedUniversity.description && (\n                <div>\n                  <h4 className=\"font-semibold text-slate-900 mb-3\">Description</h4>\n                  <p className=\"text-slate-700\">{selectedUniversity.description}</p>\n                </div>\n              )}\n\n              {selectedUniversity.programs && selectedUniversity.programs.length > 0 && (\n                <div>\n                  <h4 className=\"font-semibold text-slate-900 mb-3\">Programs</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedUniversity.programs.map((program: string, index: number) => (\n                      <span key={index} className=\"bg-slate-100 text-slate-700 px-3 py-1 rounded-lg text-sm\">\n                        {program}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {!selectedUniversity.is_approved && (\n                <div className=\"flex space-x-3 pt-4 border-t border-slate-200\">\n                  <button\n                    onClick={() => {\n                      onApprove(selectedUniversity.id);\n                      setSelectedUniversity(null);\n                    }}\n                    className=\"flex-1 bg-green-600 text-white py-3 px-4 rounded-xl hover:bg-green-700 transition-colors font-medium\"\n                  >\n                    Approve University\n                  </button>\n                  <button\n                    onClick={() => {\n                      onReject(selectedUniversity.id);\n                      setSelectedUniversity(null);\n                    }}\n                    className=\"flex-1 bg-red-600 text-white py-3 px-4 rounded-xl hover:bg-red-700 transition-colors font-medium\"\n                  >\n                    Reject University\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UniversityManagement;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\AdminDashboard\\UserManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[281,284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[281,284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[740,743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[740,743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Users, \n  Crown, \n  Building, \n  GraduationCap, \n  Search, \n  Filter, \n  Ban, \n  UserX, \n  Eye,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  Activity,\n  AlertTriangle\n} from 'lucide-react';\n\ninterface UserManagementProps {\n  users: any[];\n  stats: {\n    total: number;\n    students: number;\n    schools: number;\n    admins: number;\n  };\n  onSuspend: (userId: string) => void;\n}\n\nconst UserManagement: React.FC<UserManagementProps> = ({\n  users,\n  stats,\n  onSuspend\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [roleFilter, setRoleFilter] = useState('all');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.full_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesRole = roleFilter === 'all' || user.role === roleFilter;\n    const matchesStatus = statusFilter === 'all' || user.status === statusFilter;\n    \n    return matchesSearch && matchesRole && matchesStatus;\n  });\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin': return Crown;\n      case 'school': return Building;\n      case 'student': return GraduationCap;\n      default: return Users;\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-purple-100 text-purple-800';\n      case 'school': return 'bg-blue-100 text-blue-800';\n      case 'student': return 'bg-green-100 text-green-800';\n      default: return 'bg-slate-100 text-slate-800';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'inactive': return 'bg-slate-100 text-slate-800';\n      case 'suspended': return 'bg-red-100 text-red-800';\n      default: return 'bg-slate-100 text-slate-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Total Users</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.total}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-slate-100 rounded-xl flex items-center justify-center\">\n              <Users className=\"h-6 w-6 text-slate-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Students</p>\n              <p className=\"text-3xl font-bold text-green-600\">{stats.students}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n              <GraduationCap className=\"h-6 w-6 text-green-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Universities</p>\n              <p className=\"text-3xl font-bold text-blue-600\">{stats.schools}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n              <Building className=\"h-6 w-6 text-blue-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Admins</p>\n              <p className=\"text-3xl font-bold text-purple-600\">{stats.admins}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center\">\n              <Crown className=\"h-6 w-6 text-purple-600\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-slate-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search users...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-12 pr-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-purple-600 transition-all duration-200\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex gap-4\">\n            <select\n              value={roleFilter}\n              onChange={(e) => setRoleFilter(e.target.value)}\n              className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-purple-600 transition-all duration-200\"\n            >\n              <option value=\"all\">All Roles</option>\n              <option value=\"student\">Students</option>\n              <option value=\"school\">Universities</option>\n              <option value=\"admin\">Admins</option>\n            </select>\n\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-purple-600 transition-all duration-200\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"active\">Active</option>\n              <option value=\"inactive\">Inactive</option>\n              <option value=\"suspended\">Suspended</option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"mt-4 flex items-center text-sm text-slate-600\">\n          <span className=\"font-medium\">{filteredUsers.length}</span>\n          <span className=\"ml-1\">\n            user{filteredUsers.length !== 1 ? 's' : ''} found\n          </span>\n        </div>\n      </div>\n\n      {/* Users Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredUsers.map((user) => {\n          const RoleIcon = getRoleIcon(user.role);\n          \n          return (\n            <div key={user.id} className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6 hover:shadow-lg transition-all duration-300\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-12 h-12 rounded-xl flex items-center justify-center ${\n                    user.role === 'admin' ? 'bg-purple-100' : \n                    user.role === 'school' ? 'bg-blue-100' : 'bg-green-100'\n                  }`}>\n                    <RoleIcon className={`h-6 w-6 ${\n                      user.role === 'admin' ? 'text-purple-600' : \n                      user.role === 'school' ? 'text-blue-600' : 'text-green-600'\n                    }`} />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-slate-900\">{user.full_name}</h3>\n                    <p className=\"text-sm text-slate-500\">{user.email}</p>\n                  </div>\n                </div>\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(user.status)}`}>\n                  {user.status}\n                </span>\n              </div>\n              \n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-slate-500\">Role</span>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRoleColor(user.role)}`}>\n                    {user.role}\n                  </span>\n                </div>\n                \n                {user.country && (\n                  <div className=\"flex items-center text-sm text-slate-600\">\n                    <MapPin className=\"h-4 w-4 mr-2\" />\n                    {user.country}\n                  </div>\n                )}\n                \n                {user.field_of_interest && (\n                  <div className=\"flex items-center text-sm text-slate-600\">\n                    <Activity className=\"h-4 w-4 mr-2\" />\n                    {user.field_of_interest}\n                  </div>\n                )}\n                \n                <div className=\"flex items-center text-sm text-slate-600\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Joined {new Date(user.created_at).toLocaleDateString()}\n                </div>\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => setSelectedUser(user)}\n                  className=\"flex-1 bg-slate-100 text-slate-700 py-2 px-3 rounded-lg hover:bg-slate-200 transition-colors text-sm font-medium\"\n                >\n                  View Details\n                </button>\n                \n                {user.status === 'active' && user.role !== 'admin' && (\n                  <button\n                    onClick={() => onSuspend(user.user_id)}\n                    className=\"bg-red-100 text-red-700 py-2 px-3 rounded-lg hover:bg-red-200 transition-colors\"\n                    title=\"Suspend User\"\n                  >\n                    <Ban className=\"h-4 w-4\" />\n                  </button>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {filteredUsers.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Users className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No users found</h3>\n          <p className=\"text-slate-500\">\n            {searchTerm ? `No users match \"${searchTerm}\"` : 'No users registered yet'}\n          </p>\n        </div>\n      )}\n\n      {/* User Detail Modal */}\n      {selectedUser && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6 border-b border-slate-200\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-bold text-slate-900\">User Details</h3>\n                <button\n                  onClick={() => setSelectedUser(null)}\n                  className=\"text-slate-400 hover:text-slate-600 p-2 rounded-lg hover:bg-slate-100\"\n                >\n                  <UserX className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"p-6 space-y-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className={`w-16 h-16 rounded-2xl flex items-center justify-center ${\n                  selectedUser.role === 'admin' ? 'bg-purple-100' : \n                  selectedUser.role === 'school' ? 'bg-blue-100' : 'bg-green-100'\n                }`}>\n                  {React.createElement(getRoleIcon(selectedUser.role), {\n                    className: `h-8 w-8 ${\n                      selectedUser.role === 'admin' ? 'text-purple-600' : \n                      selectedUser.role === 'school' ? 'text-blue-600' : 'text-green-600'\n                    }`\n                  })}\n                </div>\n                <div>\n                  <h4 className=\"text-xl font-bold text-slate-900\">{selectedUser.full_name}</h4>\n                  <p className=\"text-slate-600\">{selectedUser.email}</p>\n                  <div className=\"flex items-center space-x-2 mt-2\">\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRoleColor(selectedUser.role)}`}>\n                      {selectedUser.role}\n                    </span>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(selectedUser.status)}`}>\n                      {selectedUser.status}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h5 className=\"font-semibold text-slate-900 mb-3\">Contact Information</h5>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center text-sm\">\n                      <Mail className=\"h-4 w-4 mr-2 text-slate-400\" />\n                      <span className=\"text-slate-600\">{selectedUser.email}</span>\n                    </div>\n                    {selectedUser.phone && (\n                      <div className=\"flex items-center text-sm\">\n                        <Phone className=\"h-4 w-4 mr-2 text-slate-400\" />\n                        <span className=\"text-slate-600\">{selectedUser.phone}</span>\n                      </div>\n                    )}\n                    {selectedUser.country && (\n                      <div className=\"flex items-center text-sm\">\n                        <MapPin className=\"h-4 w-4 mr-2 text-slate-400\" />\n                        <span className=\"text-slate-600\">{selectedUser.country}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <h5 className=\"font-semibold text-slate-900 mb-3\">Account Information</h5>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center text-sm\">\n                      <Calendar className=\"h-4 w-4 mr-2 text-slate-400\" />\n                      <span className=\"text-slate-600\">\n                        Joined {new Date(selectedUser.created_at).toLocaleDateString()}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Activity className=\"h-4 w-4 mr-2 text-slate-400\" />\n                      <span className=\"text-slate-600\">\n                        Last active {new Date(selectedUser.last_active).toLocaleDateString()}\n                      </span>\n                    </div>\n                    {selectedUser.field_of_interest && (\n                      <div className=\"flex items-center text-sm\">\n                        <GraduationCap className=\"h-4 w-4 mr-2 text-slate-400\" />\n                        <span className=\"text-slate-600\">{selectedUser.field_of_interest}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {selectedUser.status === 'active' && selectedUser.role !== 'admin' && (\n                <div className=\"flex space-x-3 pt-4 border-t border-slate-200\">\n                  <button\n                    onClick={() => {\n                      onSuspend(selectedUser.user_id);\n                      setSelectedUser(null);\n                    }}\n                    className=\"bg-red-600 text-white py-3 px-6 rounded-xl hover:bg-red-700 transition-colors font-medium flex items-center\"\n                  >\n                    <Ban className=\"h-4 w-4 mr-2\" />\n                    Suspend User\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserManagement;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\AdminDashboard\\index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2775,2778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2775,2778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3575,3578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3575,3578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4158,4161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4158,4161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6000,6003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6000,6003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7274,7277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7274,7277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8053,8056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8053,8056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8990,8993],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8990,8993],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":294,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9820,9823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9820,9823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { supabase, University, Scholarship } from '../../lib/supabase';\nimport { useAuth } from '../../hooks/useAuth';\nimport AdminDashboardLayout from './AdminDashboardLayout';\nimport Overview from './Overview';\nimport UniversityManagement from './UniversityManagement';\nimport UserManagement from './UserManagement';\nimport ScholarshipManagement from './ScholarshipManagement';\nimport SystemSettings from './SystemSettings';\n\ninterface AdminStats {\n  totalUniversities: number;\n  pendingUniversities: number;\n  approvedUniversities: number;\n  totalStudents: number;\n  totalScholarships: number;\n  totalApplications: number;\n  totalFunding: number;\n  monthlyGrowth: number;\n}\n\ninterface UserProfile {\n  id: string;\n  user_id: string;\n  full_name: string;\n  email: string;\n  role: 'student' | 'school' | 'admin';\n  country?: string;\n  field_of_interest?: string;\n  status: 'active' | 'inactive' | 'suspended';\n  applications_count: number;\n  created_at: string;\n  last_active: string;\n}\n\ninterface Application {\n  id: string;\n  student_name: string;\n  student_email: string;\n  scholarship_title: string;\n  university_name: string;\n  amount: number;\n  status: 'pending' | 'approved' | 'rejected' | 'under_review';\n  applied_at: string;\n  reviewed_at?: string;\n  notes?: string;\n}\n\nconst AdminDashboard: React.FC = () => {\n  const [universities, setUniversities] = useState<University[]>([]);\n  const [users, setUsers] = useState<UserProfile[]>([]);\n  const [scholarships, setScholarships] = useState<Scholarship[]>([]);\n  const [applications, setApplications] = useState<Application[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  const [stats, setStats] = useState<AdminStats>({\n    totalUniversities: 0,\n    pendingUniversities: 0,\n    approvedUniversities: 0,\n    totalStudents: 0,\n    totalScholarships: 0,\n    totalApplications: 0,\n    totalFunding: 0,\n    monthlyGrowth: 12.5\n  });\n\n  useEffect(() => {\n    if (user && user.role === 'admin') {\n      loadAdminData();\n    }\n  }, [user]);\n\n  const loadAdminData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Load universities\n      const { data: universitiesData, error: universitiesError } = await supabase\n        .from('universities')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (universitiesError) {\n        console.error('Error loading universities:', universitiesError);\n        throw new Error(`Failed to load universities: ${universitiesError.message}`);\n      }\n\n      // Try to load users using the admin function\n      let usersData: any[] = [];\n      try {\n        const { data: adminUsersData, error: adminUsersError } = await supabase.rpc('get_admin_users_data');\n        \n        if (adminUsersError) {\n          console.error('Error loading admin users data:', adminUsersError);\n          \n          // Fallback to user_profiles only if the function fails\n          const { data: profilesData, error: profilesError } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .order('created_at', { ascending: false });\n          \n          if (profilesError) {\n            console.error('Error loading user profiles:', profilesError);\n            throw new Error(`Failed to load user data: ${profilesError.message}`);\n          }\n          \n          usersData = (profilesData || []).map((profile: any) => ({\n            id: profile.id,\n            user_id: profile.user_id,\n            full_name: profile.full_name || 'Unknown User',\n            email: 'Email not available',\n            role: 'student',\n            country: profile.country,\n            field_of_interest: profile.field_of_interest,\n            status: profile.status || 'active',\n            applications_count: 0,\n            created_at: profile.created_at,\n            last_active: profile.last_active || profile.created_at\n          }));\n        } else {\n          usersData = (adminUsersData || []).map((u: any) => ({\n            id: u.id,\n            user_id: u.id,\n            full_name: u.full_name || 'Unknown User',\n            email: u.email || 'Email not available',\n            role: u.raw_user_meta_data?.role || 'student',\n            country: u.country,\n            field_of_interest: u.field_of_interest,\n            status: u.status || 'active',\n            applications_count: 0,\n            created_at: u.created_at,\n            last_active: u.last_active || u.created_at\n          }));\n        }\n      } catch (userError) {\n        console.error('Error in user data loading:', userError);\n        usersData = [];\n        setError('Could not load user data. Some admin functions may be limited.');\n      }\n\n      // Load scholarships\n      const { data: scholarshipsData, error: scholarshipsError } = await supabase\n        .from('scholarships')\n        .select(`\n          *,\n          universities!inner (\n            name\n          )\n        `)\n        .order('created_at', { ascending: false });\n\n      if (scholarshipsError) {\n        console.error('Error loading scholarships:', scholarshipsError);\n      }\n\n      // Load applications\n      const { data: applicationsData, error: applicationsError } = await supabase\n        .from('scholarship_applications')\n        .select(`\n          *,\n          scholarships!inner (\n            title,\n            amount,\n            universities!inner (\n              name\n            )\n          )\n        `)\n        .order('created_at', { ascending: false });\n\n      if (applicationsError) {\n        console.error('Error loading applications:', applicationsError);\n      }\n\n      // Process data\n      const processedUniversities = universitiesData || [];\n      const processedScholarships = scholarshipsData || [];\n      const processedApplications = (applicationsData || []).map((app: any) => ({\n        id: app.id,\n        student_name: 'Student User',\n        student_email: '',\n        scholarship_title: app.scholarships?.title || 'Unknown Scholarship',\n        university_name: app.scholarships?.universities?.name || 'Unknown University',\n        amount: app.scholarships?.amount || 0,\n        status: app.status,\n        applied_at: app.applied_at,\n        reviewed_at: app.reviewed_at,\n        notes: app.notes\n      }));\n\n      setUniversities(processedUniversities);\n      setUsers(usersData);\n      setScholarships(processedScholarships);\n      setApplications(processedApplications);\n\n      // Calculate statistics\n      const newStats: AdminStats = {\n        totalUniversities: processedUniversities.length,\n        pendingUniversities: processedUniversities.filter(u => !u.is_approved).length,\n        approvedUniversities: processedUniversities.filter(u => u.is_approved).length,\n        totalStudents: usersData.filter(u => u.role === 'student').length,\n        totalScholarships: processedScholarships.length,\n        totalApplications: processedApplications.length,\n        totalFunding: processedScholarships.reduce((sum, s) => sum + Number(s.amount), 0),\n        monthlyGrowth: 12.5\n      };\n\n      setStats(newStats);\n    } catch (error: any) {\n      console.error('Error loading admin data:', error);\n      setError(`Failed to load admin data: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApproveUniversity = async (universityId: string) => {\n    try {\n      const { error } = await supabase.rpc('approve_university', {\n        university_id_param: universityId\n      });\n\n      if (error) throw error;\n\n      setUniversities(prev => prev.map(u => \n        u.id === universityId ? { ...u, is_approved: true } : u\n      ));\n      \n      setStats(prev => ({\n        ...prev,\n        approvedUniversities: prev.approvedUniversities + 1,\n        pendingUniversities: prev.pendingUniversities - 1\n      }));\n\n      alert('University approved successfully!');\n    } catch (error: any) {\n      console.error('Error approving university:', error);\n      alert(`Error approving university: ${error.message}`);\n    }\n  };\n\n  const handleRejectUniversity = async (universityId: string) => {\n    const reason = prompt('Please provide a reason for rejection (optional):');\n    \n    if (confirm('Are you sure you want to reject this university? This action cannot be undone.')) {\n      try {\n        const { error } = await supabase.rpc('reject_university', {\n          university_id_param: universityId,\n          reason_text: reason || ''\n        });\n\n        if (error) throw error;\n\n        setUniversities(prev => prev.filter(u => u.id !== universityId));\n        setStats(prev => ({\n          ...prev,\n          totalUniversities: prev.totalUniversities - 1,\n          pendingUniversities: prev.pendingUniversities - 1\n        }));\n\n        alert('University rejected and removed successfully!');\n      } catch (error: any) {\n        console.error('Error rejecting university:', error);\n        alert(`Error rejecting university: ${error.message}`);\n      }\n    }\n  };\n\n  const handleSuspendUser = async (userId: string) => {\n    if (confirm('Are you sure you want to suspend this user?')) {\n      try {\n        const { error } = await supabase\n          .from('user_profiles')\n          .update({ status: 'suspended' })\n          .eq('user_id', userId);\n\n        if (error) throw error;\n\n        await supabase.rpc('log_admin_action', {\n          action_text: 'suspend_user',\n          target_type_text: 'user',\n          target_id_param: userId\n        });\n\n        setUsers(prev => prev.map(u => \n          u.user_id === userId ? { ...u, status: 'suspended' } : u\n        ));\n\n        alert('User suspended successfully!');\n      } catch (error: any) {\n        console.error('Error suspending user:', error);\n        alert(`Error suspending user: ${error.message}`);\n      }\n    }\n  };\n\n  // Calculate stats for components\n  const componentStats = {\n    universities: {\n      total: stats.totalUniversities,\n      pending: stats.pendingUniversities,\n      approved: stats.approvedUniversities\n    },\n    users: {\n      total: users.length,\n      students: stats.totalStudents,\n      schools: users.filter(u => u.role === 'school').length,\n      admins: users.filter(u => u.role === 'admin').length\n    },\n    scholarships: {\n      total: stats.totalScholarships,\n      active: scholarships.filter(s => s.is_active).length,\n      totalFunding: stats.totalFunding\n    },\n    applications: {\n      total: stats.totalApplications,\n      pending: applications.filter(a => a.status === 'pending').length,\n      approved: applications.filter(a => a.status === 'approved').length\n    }\n  };\n\n  return (\n    <AdminDashboardLayout user={user} loading={loading}>\n      <Routes>\n        <Route \n          index \n          element={\n            <Overview \n              stats={stats}\n              universities={universities}\n              users={users}\n              applications={applications}\n              error={error}\n            />\n          } \n        />\n        <Route \n          path=\"universities\" \n          element={\n            <UniversityManagement \n              universities={universities}\n              stats={componentStats.universities}\n              onApprove={handleApproveUniversity}\n              onReject={handleRejectUniversity}\n            />\n          } \n        />\n        <Route \n          path=\"users\" \n          element={\n            <UserManagement \n              users={users}\n              stats={componentStats.users}\n              onSuspend={handleSuspendUser}\n            />\n          } \n        />\n        <Route \n          path=\"scholarships\" \n          element={\n            <ScholarshipManagement \n              scholarships={scholarships}\n              stats={componentStats.scholarships}\n            />\n          } \n        />\n        <Route \n          path=\"settings\" \n          element={<SystemSettings />} \n        />\n      </Routes>\n    </AdminDashboardLayout>\n  );\n};\n\nexport default AdminDashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\AdminRegistration.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4460,4463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4460,4463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Crown, Shield, Lock, Mail, User, Eye, EyeOff, CheckCircle, AlertCircle, Zap } from 'lucide-react';\nimport { supabase } from '../lib/supabase';\n\nconst AdminRegistration: React.FC = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    adminKey: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const navigate = useNavigate();\n\n  // Chave secreta para validar o registro de admin (você pode mudar isso)\n  const ADMIN_SECRET_KEY = 'MATRICULA_USA_ADMIN_2024';\n\n  const validatePassword = (password: string) => {\n    const minLength = 8;\n    const hasUpperCase = /[A-Z]/.test(password);\n    const hasLowerCase = /[a-z]/.test(password);\n    const hasNumbers = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n\n    if (password.length < minLength) {\n      return 'A senha deve ter pelo menos 8 caracteres';\n    }\n    if (!hasUpperCase) {\n      return 'A senha deve conter pelo menos uma letra maiúscula';\n    }\n    if (!hasLowerCase) {\n      return 'A senha deve conter pelo menos uma letra minúscula';\n    }\n    if (!hasNumbers) {\n      return 'A senha deve conter pelo menos um número';\n    }\n    if (!hasSpecialChar) {\n      return 'A senha deve conter pelo menos um caractere especial';\n    }\n    return null;\n  };\n\n  const getPasswordStrength = (password: string) => {\n    let strength = 0;\n    if (password.length >= 8) strength++;\n    if (/[A-Z]/.test(password)) strength++;\n    if (/[a-z]/.test(password)) strength++;\n    if (/\\d/.test(password)) strength++;\n    if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) strength++;\n\n    if (strength <= 2) return { level: 'weak', color: 'bg-red-500', text: 'Fraca' };\n    if (strength <= 3) return { level: 'medium', color: 'bg-yellow-500', text: 'Média' };\n    if (strength <= 4) return { level: 'good', color: 'bg-blue-500', text: 'Boa' };\n    return { level: 'strong', color: 'bg-green-500', text: 'Forte' };\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      // Validar chave de admin\n      if (formData.adminKey !== ADMIN_SECRET_KEY) {\n        throw new Error('Chave de administrador inválida');\n      }\n\n      // Validar senha\n      const passwordError = validatePassword(formData.password);\n      if (passwordError) {\n        throw new Error(passwordError);\n      }\n\n      // Verificar se as senhas coincidem\n      if (formData.password !== formData.confirmPassword) {\n        throw new Error('As senhas não coincidem');\n      }\n\n      // Registrar o usuário no Supabase\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            name: formData.name,\n            role: 'admin'\n          }\n        }\n      });\n\n      if (authError) {\n        throw authError;\n      }\n\n      if (authData.user) {\n        // Promover o usuário para admin usando a função do banco\n        const { data: promoteResult, error: promoteError } = await supabase.rpc('make_user_admin', {\n          user_email: formData.email\n        });\n\n        if (promoteError) {\n          console.error('Erro ao promover usuário:', promoteError);\n          throw new Error('Erro ao promover usuário para administrador: ' + promoteError.message);\n        }\n\n        // Verificar se a promoção foi bem-sucedida\n        if (promoteResult && !promoteResult.success) {\n          console.error('Falha na promoção:', promoteResult.message);\n          throw new Error('Falha ao promover usuário: ' + promoteResult.message);\n        }\n\n        setSuccess('Conta de administrador criada com sucesso! Você será redirecionado para o login.');\n        \n        // Redirecionar para login após 3 segundos\n        setTimeout(() => {\n          navigate('/login');\n        }, 3000);\n      }\n    } catch (err: any) {\n      setError(err.message || 'Erro ao criar conta de administrador');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const passwordStrength = getPasswordStrength(formData.password);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"bg-gradient-to-r from-purple-600 to-indigo-600 w-20 h-20 rounded-3xl flex items-center justify-center shadow-2xl\">\n              <Crown className=\"h-10 w-10 text-white\" />\n            </div>\n          </div>\n          \n          <h1 className=\"text-4xl font-black text-white mb-4\">\n            Registro de Administrador\n          </h1>\n          <p className=\"text-purple-200 text-lg leading-relaxed\">\n            Configure sua conta de administrador para o sistema Matrícula USA\n          </p>\n          \n          {/* Security Notice */}\n          <div className=\"mt-6 bg-white/10 backdrop-blur-sm border border-white/20 rounded-2xl p-4\">\n            <div className=\"flex items-center justify-center text-white\">\n              <Shield className=\"h-5 w-5 mr-2\" />\n              <span className=\"text-sm font-medium\">Acesso Restrito - Apenas Administradores</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Form */}\n        <div className=\"bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 p-8\">\n          {/* Success Message */}\n          {success && (\n            <div className=\"bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-2xl text-sm mb-6 flex items-center\">\n              <CheckCircle className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n              {success}\n            </div>\n          )}\n\n          {/* Error Message */}\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-2xl text-sm mb-6 flex items-center\">\n              <AlertCircle className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n              {error}\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Admin Key */}\n            <div>\n              <label htmlFor=\"adminKey\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                Chave de Administrador *\n              </label>\n              <div className=\"relative\">\n                <Crown className=\"absolute left-4 top-4 h-5 w-5 text-purple-500\" />\n                <input\n                  id=\"adminKey\"\n                  name=\"adminKey\"\n                  type=\"password\"\n                  required\n                  value={formData.adminKey}\n                  onChange={handleInputChange}\n                  className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300\"\n                  placeholder=\"Digite a chave secreta de administrador\"\n                />\n              </div>\n              <p className=\"text-xs text-slate-500 mt-1\">\n                Esta chave é necessária para criar contas de administrador\n              </p>\n            </div>\n\n            {/* Name */}\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                Nome Completo *\n              </label>\n              <div className=\"relative\">\n                <User className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                <input\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  required\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300\"\n                  placeholder=\"Seu nome completo\"\n                />\n              </div>\n            </div>\n\n            {/* Email */}\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                Email *\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300\"\n                  placeholder=\"admin@matriculausa.com\"\n                />\n              </div>\n            </div>\n\n            {/* Password */}\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                Senha *\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  className=\"w-full pl-12 pr-12 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300\"\n                  placeholder=\"Crie uma senha forte\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-4 top-4 text-slate-400 hover:text-slate-600\"\n                >\n                  {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                </button>\n              </div>\n              \n              {/* Password Strength */}\n              {formData.password && (\n                <div className=\"mt-2\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-xs text-slate-500\">Força da senha:</span>\n                    <span className={`text-xs font-medium ${\n                      passwordStrength.level === 'weak' ? 'text-red-600' :\n                      passwordStrength.level === 'medium' ? 'text-yellow-600' :\n                      passwordStrength.level === 'good' ? 'text-blue-600' :\n                      'text-green-600'\n                    }`}>\n                      {passwordStrength.text}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className={`h-2 rounded-full transition-all duration-300 ${passwordStrength.color}`}\n                      style={{ width: `${(passwordStrength.level === 'weak' ? 20 : \n                                          passwordStrength.level === 'medium' ? 40 :\n                                          passwordStrength.level === 'good' ? 70 : 100)}%` }}\n                    ></div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Confirm Password */}\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                Confirmar Senha *\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                <input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  required\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                  className=\"w-full pl-12 pr-12 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300\"\n                  placeholder=\"Confirme sua senha\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute right-4 top-4 text-slate-400 hover:text-slate-600\"\n                >\n                  {showConfirmPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                </button>\n              </div>\n              \n              {/* Password Match */}\n              {formData.confirmPassword && (\n                <div className=\"mt-2 flex items-center\">\n                  {formData.password === formData.confirmPassword ? (\n                    <div className=\"flex items-center text-green-600\">\n                      <CheckCircle className=\"h-4 w-4 mr-1\" />\n                      <span className=\"text-xs\">Senhas coincidem</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center text-red-600\">\n                      <AlertCircle className=\"h-4 w-4 mr-1\" />\n                      <span className=\"text-xs\">Senhas não coincidem</span>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Password Requirements */}\n            <div className=\"bg-slate-50 p-4 rounded-2xl\">\n              <h4 className=\"text-sm font-bold text-slate-900 mb-2\">Requisitos da Senha:</h4>\n              <ul className=\"text-xs text-slate-600 space-y-1\">\n                <li className={`flex items-center ${formData.password.length >= 8 ? 'text-green-600' : ''}`}>\n                  <div className={`w-2 h-2 rounded-full mr-2 ${formData.password.length >= 8 ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                  Pelo menos 8 caracteres\n                </li>\n                <li className={`flex items-center ${/[A-Z]/.test(formData.password) ? 'text-green-600' : ''}`}>\n                  <div className={`w-2 h-2 rounded-full mr-2 ${/[A-Z]/.test(formData.password) ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                  Uma letra maiúscula\n                </li>\n                <li className={`flex items-center ${/[a-z]/.test(formData.password) ? 'text-green-600' : ''}`}>\n                  <div className={`w-2 h-2 rounded-full mr-2 ${/[a-z]/.test(formData.password) ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                  Uma letra minúscula\n                </li>\n                <li className={`flex items-center ${/\\d/.test(formData.password) ? 'text-green-600' : ''}`}>\n                  <div className={`w-2 h-2 rounded-full mr-2 ${/\\d/.test(formData.password) ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                  Um número\n                </li>\n                <li className={`flex items-center ${/[!@#$%^&*(),.?\":{}|<>]/.test(formData.password) ? 'text-green-600' : ''}`}>\n                  <div className={`w-2 h-2 rounded-full mr-2 ${/[!@#$%^&*(),.?\":{}|<>]/.test(formData.password) ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                  Um caractere especial\n                </li>\n              </ul>\n            </div>\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              disabled={loading || !formData.adminKey || !formData.name || !formData.email || !formData.password || !formData.confirmPassword || formData.password !== formData.confirmPassword}\n              className=\"group relative w-full flex justify-center py-4 px-4 border border-transparent text-lg font-black rounded-2xl text-white bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-xl\"\n            >\n              {loading ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                  Criando Conta...\n                </div>\n              ) : (\n                <div className=\"flex items-center\">\n                  <Crown className=\"mr-2 h-5 w-5\" />\n                  Criar Conta de Administrador\n                  <Zap className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                </div>\n              )}\n            </button>\n          </form>\n\n          {/* Security Info */}\n          <div className=\"mt-6 pt-6 border-t border-slate-200\">\n            <div className=\"bg-purple-50 p-4 rounded-2xl\">\n              <div className=\"flex items-start\">\n                <Shield className=\"h-5 w-5 text-purple-600 mr-3 mt-0.5 flex-shrink-0\" />\n                <div>\n                  <h4 className=\"text-sm font-bold text-purple-900 mb-1\">Informações de Segurança</h4>\n                  <ul className=\"text-xs text-purple-700 space-y-1\">\n                    <li>• Esta conta terá acesso total ao sistema</li>\n                    <li>• Mantenha suas credenciais seguras</li>\n                    <li>• Use uma senha forte e única</li>\n                    <li>• A chave de administrador é necessária para validação</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Back to Login */}\n        <div className=\"text-center\">\n          <button\n            onClick={() => navigate('/login')}\n            className=\"text-purple-200 hover:text-white font-medium text-sm transition-colors\"\n          >\n            ← Voltar para o Login\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminRegistration;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\App.tsx","messages":[{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":17,"column":5,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":17,"endColumn":13},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":18,"column":7,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":18,"endColumn":21},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":19,"column":9,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":19,"endColumn":17},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":20,"column":11,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":20,"endColumn":19},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":21,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":21,"endColumn":50},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":21,"column":38,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":21,"endColumn":46},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":22,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":22,"endColumn":56},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":22,"column":43,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":22,"endColumn":52},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":23,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":23,"endColumn":67},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":23,"column":42,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":23,"endColumn":63},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":24,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":24,"endColumn":70},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":24,"column":50,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":24,"endColumn":66},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":25,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":25,"endColumn":70},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":25,"column":50,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":25,"endColumn":66},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":26,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":26,"endColumn":73},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":26,"column":49,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":26,"endColumn":69},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":27,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":27,"endColumn":68},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":27,"column":50,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":27,"endColumn":64},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":29,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":29,"endColumn":77},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":29,"column":54,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":29,"endColumn":73},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":30,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":30,"endColumn":75},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":30,"column":53,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":30,"endColumn":71},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":32,"column":13,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":32,"endColumn":81},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":32,"column":57,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":32,"endColumn":77}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { AuthProvider } from '../hooks/useAuth';\nimport Layout from '../components/Layout';\nimport Home from '../pages/Home';\nimport About from '../pages/About';\nimport Auth from '../pages/Auth';\nimport Scholarships from '../pages/Scholarships';\nimport Universities from '../pages/Universities';\nimport UniversityDetail from '../pages/UniversityDetail';\nimport HowItWorks from '../pages/HowItWorks';\nimport CheckoutSuccess from '../pages/CheckoutSuccess';\nimport CheckoutCancel from '../pages/CheckoutCancel';\nimport StudentDashboard from '../pages/StudentDashboard/index';\n\nfunction App() {\n  return (\n    <Router>\n      <AuthProvider>\n        <Layout>\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/about\" element={<About />} />\n            <Route path=\"/auth\" element={<Auth mode=\"login\" />} />\n            <Route path=\"/scholarships\" element={<Scholarships />} />\n            <Route path=\"/universities\" element={<Universities />} />\n            <Route path=\"/schools/:id\" element={<UniversityDetail />} />\n            <Route path=\"/how-it-works\" element={<HowItWorks />} />\n            {/* Checkout Routes */}\n            <Route path=\"/checkout/success\" element={<CheckoutSuccess />} />\n            <Route path=\"/checkout/cancel\" element={<CheckoutCancel />} />\n            {/* Student Routes */}\n            <Route path=\"/student/dashboard/*\" element={<StudentDashboard />} />\n          </Routes>\n        </Layout>\n      </AuthProvider>\n    </Router>\n  );\n}\n\nexport default App;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\ApplicationFeeCancel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\ApplicationFeeSuccess.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1157,1160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1157,1160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":60,"column":88,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2055,2176],"text":"\r\n              Thank you! Your application has been submitted and will now appear under &quot;My Applications\".\r\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2055,2176],"text":"\r\n              Thank you! Your application has been submitted and will now appear under &ldquo;My Applications\".\r\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2055,2176],"text":"\r\n              Thank you! Your application has been submitted and will now appear under &#34;My Applications\".\r\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2055,2176],"text":"\r\n              Thank you! Your application has been submitted and will now appear under &rdquo;My Applications\".\r\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":60,"column":104,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2055,2176],"text":"\r\n              Thank you! Your application has been submitted and will now appear under \"My Applications&quot;.\r\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2055,2176],"text":"\r\n              Thank you! Your application has been submitted and will now appear under \"My Applications&ldquo;.\r\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2055,2176],"text":"\r\n              Thank you! Your application has been submitted and will now appear under \"My Applications&#34;.\r\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2055,2176],"text":"\r\n              Thank you! Your application has been submitted and will now appear under \"My Applications&rdquo;.\r\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport { CheckCircle, ArrowRight, XCircle, Loader2 } from 'lucide-react';\r\nimport { supabase } from '../lib/supabase';\r\n\r\ntype VerificationStatus = 'loading' | 'success' | 'error';\r\n\r\nconst ApplicationFeeSuccess: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const [status, setStatus] = useState<VerificationStatus>('loading');\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const verifySession = async () => {\r\n      const sessionId = searchParams.get('session_id');\r\n      if (!sessionId) {\r\n        setError('No session ID found in URL.');\r\n        setStatus('error');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const { error: functionError } = await supabase.functions.invoke('verify-stripe-session', {\r\n          body: { sessionId },\r\n        });\r\n\r\n        if (functionError) {\r\n          throw new Error(`Verification failed: ${functionError.message}`);\r\n        }\r\n        \r\n        setStatus('success');\r\n\r\n      } catch (e: any) {\r\n        setError(e.message || 'An unknown error occurred during verification.');\r\n        setStatus('error');\r\n      }\r\n    };\r\n\r\n    verifySession();\r\n  }, [searchParams]);\r\n\r\n\r\n  const renderContent = () => {\r\n    switch (status) {\r\n      case 'loading':\r\n        return (\r\n          <>\r\n            <Loader2 className=\"text-blue-500 h-16 w-16 mx-auto mb-6 animate-spin\" />\r\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">Verifying Payment...</h1>\r\n            <p className=\"text-slate-600\">Please wait while we confirm your transaction. This may take a moment.</p>\r\n          </>\r\n        );\r\n      case 'success':\r\n        return (\r\n          <>\r\n            <CheckCircle className=\"text-green-500 h-16 w-16 mx-auto mb-6\" />\r\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">Payment Successful!</h1>\r\n            <p className=\"text-slate-600 mb-6\">\r\n              Thank you! Your application has been submitted and will now appear under \"My Applications\".\r\n            </p>\r\n            <button\r\n              onClick={() => navigate('/student/dashboard/applications')}\r\n              className=\"w-full bg-blue-600 text-white py-3 rounded-xl font-bold hover:bg-blue-700 transition-all duration-300 flex items-center justify-center gap-2\"\r\n            >\r\n              <span>Go to My Applications</span>\r\n              <ArrowRight className=\"h-5 w-5\" />\r\n            </button>\r\n          </>\r\n        );\r\n      case 'error':\r\n        return (\r\n           <>\r\n            <XCircle className=\"text-red-500 h-16 w-16 mx-auto mb-6\" />\r\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">Verification Failed</h1>\r\n            <p className=\"text-slate-600 mb-6\">\r\n              There was a problem verifying your payment. Please contact support.\r\n            </p>\r\n            <p className=\"text-sm text-red-700 bg-red-100 p-3 rounded-lg\">{error}</p>\r\n          </>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\r\n      <div className=\"max-w-md w-full bg-white rounded-2xl shadow-lg p-8 text-center border border-slate-200\">\r\n        {renderContent()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ApplicationFeeSuccess; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\Auth.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isAuthenticated' is assigned a value but never used.","line":32,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3054,3057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3054,3057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":153,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5663,5700],"text":"\n              Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5663,5700],"text":"\n              Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5663,5700],"text":"\n              Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5663,5700],"text":"\n              Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":238,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9834,9886],"text":"• Try resetting your password if you&apos;ve forgotten it"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9834,9886],"text":"• Try resetting your password if you&lsquo;ve forgotten it"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9834,9886],"text":"• Try resetting your password if you&#39;ve forgotten it"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9834,9886],"text":"• Try resetting your password if you&rsquo;ve forgotten it"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":324,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13601,13642],"text":"\n              I&apos;m a Student\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13601,13642],"text":"\n              I&lsquo;m a Student\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13601,13642],"text":"\n              I&#39;m a Student\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13601,13642],"text":"\n              I&rsquo;m a Student\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":335,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[14078,14122],"text":"\n              I&apos;m a University\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[14078,14122],"text":"\n              I&lsquo;m a University\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[14078,14122],"text":"\n              I&#39;m a University\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[14078,14122],"text":"\n              I&rsquo;m a University\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":443,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19544,19613],"text":"\n                    What you&apos;ll get as a student:\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19544,19613],"text":"\n                    What you&lsquo;ll get as a student:\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19544,19613],"text":"\n                    What you&#39;ll get as a student:\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19544,19613],"text":"\n                    What you&rsquo;ll get as a student:\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":639,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[29831,29911],"text":"\n                    What you&apos;ll get as a university partner:\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[29831,29911],"text":"\n                    What you&lsquo;ll get as a university partner:\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[29831,29911],"text":"\n                    What you&#39;ll get as a university partner:\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[29831,29911],"text":"\n                    What you&rsquo;ll get as a university partner:\n                  "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Mail, Lock, User, Building, UserCheck, Zap, Shield, Award, GraduationCap, Users, Globe, MapPin, CheckCircle } from 'lucide-react';\nimport { useAuth } from '../hooks/useAuth';\n\ninterface AuthProps {\n  mode: 'login' | 'register';\n}\n\nconst Auth: React.FC<AuthProps> = ({ mode }) => {\n  const [activeTab, setActiveTab] = useState<'student' | 'university'>('student');\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    // Student specific fields\n    phone: '',\n    country: '',\n    fieldOfInterest: '',\n    englishLevel: '',\n    // University specific fields\n    universityName: '',\n    position: '',\n    website: '',\n    location: ''\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showVerificationModal, setShowVerificationModal] = useState(false);\n  \n  const { login, register, isAuthenticated, user } = useAuth();\n  const navigate = useNavigate();\n\n  // Global scroll-to-top on login/register page load\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      window.scrollTo(0, 0);\n      // console.log('Scroll position reset to top on login/register page load.');\n    }, 75);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n\n    try {\n      if (mode === 'register') {\n        if (formData.password !== formData.confirmPassword) {\n          setError('Passwords do not match');\n          setLoading(false);\n          return;\n        }\n        \n        const userData = {\n          name: formData.name,\n          role: (activeTab === 'student' ? 'student' : 'school') as 'student' | 'school',\n          // Add additional registration data only for universities\n          ...(activeTab === 'university' && {\n            universityName: formData.universityName,\n            position: formData.position,\n            website: formData.website,\n            location: formData.location\n          })\n        };\n\n        await register(formData.email, formData.password, userData);\n\n        // Se for registro de universidade, mostra modal e retorna\n        if (activeTab === 'university') {\n          setShowVerificationModal(true);\n          return;\n        }\n        // Para estudante, após o registro bem-sucedido, permite que o useEffect reaja.\n        return;\n      } else {\n        await login(formData.email, formData.password);\n        // Após login bem-sucedido, redireciona para o dashboard correto\n        if (user && user.role === 'admin') {\n          navigate('/admin/dashboard', { replace: true });\n        } else if (user && user.role === 'school') {\n          navigate('/school/dashboard', { replace: true });\n        } else if (user && user.role === 'student') {\n          navigate('/student/dashboard', { replace: true });\n        }\n        return;\n      }\n    } catch (err: any) {\n      // Enhanced error handling with specific messages\n      let errorMessage = 'Authentication failed. Please try again.';\n      \n      if (err.message) {\n        const message = err.message.toLowerCase();\n        \n        if (message.includes('invalid_credentials') || message.includes('invalid login credentials')) {\n          errorMessage = 'Invalid email or password. Please check your credentials and try again.';\n        } else if (message.includes('email_not_confirmed')) {\n          errorMessage = 'Please check your email and click the confirmation link before signing in.';\n        } else if (message.includes('too_many_requests')) {\n          errorMessage = 'Too many login attempts. Please wait a few minutes before trying again.';\n        } else if (message.includes('user_not_found')) {\n          errorMessage = 'No account found with this email address. Please check your email or create a new account.';\n        } else if (message.includes('weak_password')) {\n          errorMessage = 'Password is too weak. Please choose a stronger password.';\n        } else if (message.includes('email_address_invalid')) {\n          errorMessage = 'Please enter a valid email address.';\n        } else if (message.includes('signup_disabled')) {\n          errorMessage = 'New registrations are currently disabled. Please contact support.';\n        } else {\n          errorMessage = err.message;\n        }\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleTabChange = (tab: 'student' | 'university') => {\n    setActiveTab(tab);\n  };\n\n  if (mode === 'login') {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          {/* Header */}\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-8\">\n              <img \n                src=\"/favicon-branco.png\" \n                alt=\"Matrícula USA\" \n                className=\"h-16 w-auto\"\n              />\n            </div>\n            <h2 className=\"text-4xl font-black text-slate-900 mb-4\">\n              Welcome Back\n            </h2>\n            <p className=\"text-slate-600 text-lg\">\n              Sign in to access your dashboard and continue your educational journey\n            </p>\n            <p className=\"mt-4 text-sm text-slate-500\">\n              Don't have an account?{' '}\n              <Link to=\"/register\" className=\"font-bold text-[#D0151C] hover:text-[#B01218] transition-colors\">\n                Sign up here\n              </Link>\n            </p>\n          </div>\n\n          {/* Form */}\n          <form className=\"mt-8 space-y-6 bg-slate-50 p-8 rounded-3xl shadow-lg border border-slate-200\" onSubmit={handleSubmit}>\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-2xl text-sm\">\n                <div className=\"font-medium text-red-800 mb-1\">Login Failed</div>\n                {error}\n              </div>\n            )}\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  className=\"appearance-none relative block w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  required\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  className=\"appearance-none relative block w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300\"\n                  placeholder=\"Enter your password\"\n                />\n              </div>\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"group relative w-full flex justify-center py-4 px-4 border border-transparent text-lg font-black rounded-2xl text-white bg-[#D0151C] hover:bg-[#B01218] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#D0151C] disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-xl\"\n            >\n              {loading ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                  Processing...\n                </div>\n              ) : (\n                <div className=\"flex items-center\">\n                  Sign In\n                  <Zap className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                </div>\n              )}\n            </button>\n\n            <div className=\"text-center\">\n              <Link to=\"/forgot-password\" className=\"text-sm text-[#D0151C] hover:text-[#B01218] font-medium transition-colors\">\n                Forgot your password?\n              </Link>\n            </div>\n\n            {/* Login Help Section */}\n            {error && (\n              <div className=\"bg-blue-50 border border-blue-200 p-4 rounded-2xl\">\n                <h4 className=\"text-sm font-bold text-blue-900 mb-2\">Having trouble signing in?</h4>\n                <ul className=\"text-xs text-blue-800 space-y-1\">\n                  <li>• Double-check your email address and password</li>\n                  <li>• Make sure your account is confirmed (check your email)</li>\n                  <li>• Try resetting your password if you've forgotten it</li>\n                  <li>• Contact support if you continue having issues</li>\n                </ul>\n              </div>\n            )}\n\n            {/* Trust Indicators */}\n            <div className=\"flex justify-center items-center space-x-6 pt-6 border-t border-slate-200\">\n              <div className=\"flex items-center text-xs text-slate-500\">\n                <Shield className=\"h-4 w-4 mr-1 text-green-500\" />\n                <span>Secure Login</span>\n              </div>\n              <div className=\"flex items-center text-xs text-slate-500\">\n                <Award className=\"h-4 w-4 mr-1 text-yellow-500\" />\n                <span>Trusted Platform</span>\n              </div>\n              <div className=\"flex items-center text-xs text-slate-500\">\n                <Zap className=\"h-4 w-4 mr-1 text-[#D0151C]\" />\n                <span>Fast Access</span>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white py-12 px-4 sm:px-6 lg:px-8\">\n      {/* Modal for email verification after university registration */}\n      {showVerificationModal && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40\">\n          <div className=\"bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full text-center border border-slate-200\">\n            <div className=\"mb-4\">\n              <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-2\" />\n              <h2 className=\"text-2xl font-bold text-slate-900 mb-2\">Registration successful!</h2>\n              <p className=\"text-slate-700 text-base mb-4\">\n                A verification link has been sent to your email.<br />\n                Please check your inbox (and spam/junk folder) to complete your login and access the dashboard.\n              </p>\n            </div>\n            <button\n              className=\"bg-[#05294E] text-white px-6 py-3 rounded-xl font-bold hover:bg-[#02172b] transition-all duration-200\"\n              onClick={() => { setShowVerificationModal(false); navigate('/school/termsandconditions'); }}\n            >\n              Got it\n            </button>\n          </div>\n        </div>\n      )}\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"flex justify-center mb-8\">\n            <img \n              src=\"/favicon-branco.png\" \n              alt=\"Matrícula USA\" \n              className=\"h-16 w-auto\"\n            />\n          </div>\n          <h1 className=\"text-5xl font-black text-slate-900 mb-4\">\n            Create Your Account\n          </h1>\n          <p className=\"text-xl text-slate-600 max-w-2xl mx-auto\">\n            Create your account and unlock exclusive scholarship opportunities through our AI-powered platform\n          </p>\n          <p className=\"mt-4 text-sm text-slate-500\">\n            Already have an account?{' '}\n            <Link to=\"/login\" className=\"font-bold text-[#D0151C] hover:text-[#B01218] transition-colors\">\n              Sign in here\n            </Link>\n          </p>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"bg-slate-100 p-2 rounded-2xl flex space-x-2\">\n            <button\n              onClick={() => handleTabChange('student')}\n              className={`flex items-center px-8 py-4 rounded-xl font-bold transition-all duration-300 ${\n                activeTab === 'student'\n                  ? 'bg-white text-[#05294E] shadow-lg'\n                  : 'text-slate-600 hover:text-slate-900'\n              }`}\n            >\n              <GraduationCap className=\"h-5 w-5 mr-2\" />\n              I'm a Student\n            </button>\n            <button\n              onClick={() => handleTabChange('university')}\n              className={`flex items-center px-8 py-4 rounded-xl font-bold transition-all duration-300 ${\n                activeTab === 'university'\n                  ? 'bg-white text-[#05294E] shadow-lg'\n                  : 'text-slate-600 hover:text-slate-900'\n              }`}\n            >\n              <Building className=\"h-5 w-5 mr-2\" />\n              I'm a University\n            </button>\n          </div>\n        </div>\n\n        {/* Form Container */}\n        <div className=\"bg-slate-50 rounded-3xl p-8 shadow-lg border border-slate-200\">\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-2xl text-sm mb-6\">\n              <div className=\"font-medium text-red-800 mb-1\">Registration Failed</div>\n              {error}\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Student Form */}\n            {activeTab === 'student' && (\n              <>\n                <div className=\"text-center mb-8\">\n                  <div className=\"bg-[#05294E] w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <GraduationCap className=\"h-8 w-8 text-white\" />\n                  </div>\n                  <h2 className=\"text-3xl font-black text-slate-900 mb-2\">Student Registration</h2>\n                  <p className=\"text-slate-600\">Start your journey to American education excellence</p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label htmlFor=\"name\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Full Name *\n                    </label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        required\n                        value={formData.name}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300\"\n                        placeholder=\"Enter your full name\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"email\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Email Address *\n                    </label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        required\n                        value={formData.email}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300\"\n                        placeholder=\"Enter your email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"password\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Password *\n                    </label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        value={formData.password}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300\"\n                        placeholder=\"Create a password\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"confirmPassword\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Confirm Password *\n                    </label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"confirmPassword\"\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        required\n                        value={formData.confirmPassword}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300\"\n                        placeholder=\"Confirm your password\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Student Benefits */}\n                <div className=\"bg-white p-6 rounded-2xl border border-slate-200 mt-8\">\n                  <h3 className=\"text-lg font-bold text-slate-900 mb-4 flex items-center\">\n                    <Award className=\"h-5 w-5 mr-2 text-[#05294E]\" />\n                    What you'll get as a student:\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-slate-600\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#05294E] rounded-full mr-3\"></div>\n                      AI-powered scholarship matching\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#05294E] rounded-full mr-3\"></div>\n                      Access to exclusive opportunities\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#05294E] rounded-full mr-3\"></div>\n                      Personal application support\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#05294E] rounded-full mr-3\"></div>\n                      English proficiency assessment\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#05294E] rounded-full mr-3\"></div>\n                      Visa and immigration support\n                    </div>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {/* University Form */}\n            {activeTab === 'university' && (\n              <>\n                <div className=\"text-center mb-8\">\n                  <div className=\"bg-[#D0151C] w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <Building className=\"h-8 w-8 text-white\" />\n                  </div>\n                  <h2 className=\"text-3xl font-black text-slate-900 mb-2\">University Registration</h2>\n                  <p className=\"text-slate-600\">Partner with us to reach talented international students</p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label htmlFor=\"universityName\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      University Name *\n                    </label>\n                    <div className=\"relative\">\n                      <Building className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"universityName\"\n                        name=\"universityName\"\n                        type=\"text\"\n                        required\n                        value={formData.universityName}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#D0151C] focus:border-[#D0151C] transition-all duration-300\"\n                        placeholder=\"Enter university name\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"name\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Contact Person Name *\n                    </label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        required\n                        value={formData.name}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#D0151C] focus:border-[#D0151C] transition-all duration-300\"\n                        placeholder=\"Your full name\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"position\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Role at University *\n                    </label>\n                    <div className=\"relative\">\n                      <UserCheck className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"position\"\n                        name=\"position\"\n                        type=\"text\"\n                        required\n                        value={formData.position}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#D0151C] focus:border-[#D0151C] transition-all duration-300\"\n                        placeholder=\"e.g., Admissions Officer, Program Director\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"email\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Official Email *\n                    </label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        required\n                        value={formData.email}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#D0151C] focus:border-[#D0151C] transition-all duration-300\"\n                        placeholder=\"Official university email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"website\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      University Website\n                    </label>\n                    <div className=\"relative\">\n                      <Globe className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"website\"\n                        name=\"website\"\n                        type=\"url\"\n                        value={formData.website}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#D0151C] focus:border-[#D0151C] transition-all duration-300\"\n                        placeholder=\"https://university.edu\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"location\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Location *\n                    </label>\n                    <div className=\"relative\">\n                      <MapPin className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"location\"\n                        name=\"location\"\n                        type=\"text\"\n                        required\n                        value={formData.location}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#D0151C] focus:border-[#D0151C] transition-all duration-300\"\n                        placeholder=\"City, State\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"password\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Password *\n                    </label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        value={formData.password}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#D0151C] focus:border-[#D0151C] transition-all duration-300\"\n                        placeholder=\"Create a password\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"confirmPassword\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                      Confirm Password *\n                    </label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                      <input\n                        id=\"confirmPassword\"\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        required\n                        value={formData.confirmPassword}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#D0151C] focus:border-[#D0151C] transition-all duration-300\"\n                        placeholder=\"Confirm your password\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* University Benefits */}\n                <div className=\"bg-white p-6 rounded-2xl border border-slate-200 mt-8\">\n                  <h3 className=\"text-lg font-bold text-slate-900 mb-4 flex items-center\">\n                    <Users className=\"h-5 w-5 mr-2 text-[#D0151C]\" />\n                    What you'll get as a university partner:\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-slate-600\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#D0151C] rounded-full mr-3\"></div>\n                      Access to qualified international students\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#D0151C] rounded-full mr-3\"></div>\n                      AI-powered student matching\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#D0151C] rounded-full mr-3\"></div>\n                      Scholarship program management\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-[#D0151C] rounded-full mr-3\"></div>\n                      Analytics and reporting tools\n                    </div>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className={`w-full flex justify-center py-4 px-4 border border-transparent text-lg font-black rounded-2xl text-white transition-all duration-300 transform hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed ${\n                activeTab === 'student' \n                  ? 'bg-[#05294E] hover:bg-[#05294E]/90 focus:ring-[#05294E]' \n                  : 'bg-[#D0151C] hover:bg-[#B01218] focus:ring-[#D0151C]'\n              }`}\n            >\n              {loading ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                  Creating Account...\n                </div>\n              ) : (\n                <div className=\"flex items-center\">\n                  Create {activeTab === 'student' ? 'Student' : 'University'} Account\n                  <Zap className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                </div>\n              )}\n            </button>\n\n            {/* Trust Indicators */}\n            <div className=\"flex justify-center items-center space-x-6 pt-6 border-t border-slate-200\">\n              <div className=\"flex items-center text-xs text-slate-500\">\n                <Shield className=\"h-4 w-4 mr-1 text-green-500\" />\n                <span>Secure</span>\n              </div>\n              <div className=\"flex items-center text-xs text-slate-500\">\n                <Award className=\"h-4 w-4 mr-1 text-yellow-500\" />\n                <span>Trusted</span>\n              </div>\n              <div className=\"flex items-center text-xs text-slate-500\">\n                <Zap className=\"h-4 w-4 mr-1 text-[#D0151C]\" />\n                <span>Fast Setup</span>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\CheckoutCancel.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":22,"column":119,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1087,1257],"text":"\n            If you encountered any issues during the checkout process or have questions about our services, please don&apos;t hesitate to contact our support team.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1087,1257],"text":"\n            If you encountered any issues during the checkout process or have questions about our services, please don&lsquo;t hesitate to contact our support team.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1087,1257],"text":"\n            If you encountered any issues during the checkout process or have questions about our services, please don&#39;t hesitate to contact our support team.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1087,1257],"text":"\n            If you encountered any issues during the checkout process or have questions about our services, please don&rsquo;t hesitate to contact our support team.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { XCircle, ArrowLeft, HelpCircle } from 'lucide-react';\n\nconst CheckoutCancel: React.FC = () => {\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-2xl shadow-lg border border-slate-200 p-8 max-w-md w-full text-center\">\n        <div className=\"w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n          <XCircle className=\"h-10 w-10 text-slate-500\" />\n        </div>\n        <h2 className=\"text-2xl font-bold text-slate-900 mb-4\">Payment Cancelled</h2>\n        <p className=\"text-slate-600 mb-6\">\n          Your payment process was cancelled. No charges have been made to your account.\n        </p>\n        <div className=\"bg-slate-50 rounded-xl p-6 mb-6 text-left\">\n          <h3 className=\"font-bold text-slate-900 mb-2 flex items-center\">\n            <HelpCircle className=\"h-5 w-5 mr-2 text-[#05294E]\" />\n            Need Help?\n          </h3>\n          <p className=\"text-slate-600 mb-4\">\n            If you encountered any issues during the checkout process or have questions about our services, please don't hesitate to contact our support team.\n          </p>\n          <p className=\"text-slate-600\">\n            <strong>Email:</strong> support@matriculausa.com\n          </p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Link\n            to=\"/scholarships\"\n            className=\"bg-[#05294E] text-white px-6 py-3 rounded-xl hover:bg-[#05294E]/90 transition-colors font-bold flex items-center justify-center\"\n          >\n            <ArrowLeft className=\"mr-2 h-5 w-5\" />\n            Try Again\n          </Link>\n          <Link\n            to=\"/\"\n            className=\"bg-slate-100 text-slate-700 px-6 py-3 rounded-xl hover:bg-slate-200 transition-colors font-medium\"\n          >\n            Return Home\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckoutCancel;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\CheckoutSuccess.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1028,1031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1028,1031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":83,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3504,3516],"text":"What&apos;s Next?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3504,3516],"text":"What&lsquo;s Next?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3504,3516],"text":"What&#39;s Next?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3504,3516],"text":"What&rsquo;s Next?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { CheckCircle, ArrowRight } from 'lucide-react';\nimport { useAuth } from '../hooks/useAuth';\n\nconst CheckoutSuccess: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const sessionId = searchParams.get('session_id');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    const verifyPayment = async () => {\n      if (!sessionId) {\n        setError('No session ID provided');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Here you would typically verify the payment with your backend\n        // For now, we'll just simulate a successful verification\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        \n        // In a real implementation, you would update the user's status in your database\n        setLoading(false);\n      } catch (err: any) {\n        console.error('Error verifying payment:', err);\n        setError(err.message || 'An error occurred while verifying your payment');\n        setLoading(false);\n      }\n    };\n\n    verifyPayment();\n  }, [sessionId]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#05294E]\"></div>\n          <p className=\"text-slate-600 font-medium\">Verifying your payment...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n        <div className=\"bg-white rounded-2xl shadow-lg border border-slate-200 p-8 max-w-md w-full text-center\">\n          <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <svg className=\"w-8 h-8 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n            </svg>\n          </div>\n          <h2 className=\"text-2xl font-bold text-slate-900 mb-4\">Payment Verification Failed</h2>\n          <p className=\"text-slate-600 mb-6\">{error}</p>\n          <Link\n            to=\"/\"\n            className=\"bg-[#05294E] text-white px-6 py-3 rounded-xl hover:bg-[#05294E]/90 transition-colors font-bold inline-flex items-center\"\n          >\n            Return Home\n            <ArrowRight className=\"ml-2 h-5 w-5\" />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-2xl shadow-lg border border-slate-200 p-8 max-w-md w-full text-center\">\n        <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n          <CheckCircle className=\"h-10 w-10 text-green-600\" />\n        </div>\n        <h2 className=\"text-2xl font-bold text-slate-900 mb-4\">Payment Successful!</h2>\n        <p className=\"text-slate-600 mb-6\">\n          Thank you for your purchase, {user?.name || 'valued customer'}! Your payment has been processed successfully.\n        </p>\n        <div className=\"bg-slate-50 rounded-xl p-6 mb-6 text-left\">\n          <h3 className=\"font-bold text-slate-900 mb-2\">What's Next?</h3>\n          <ul className=\"space-y-2 text-slate-600\">\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              Your Selection Process has been activated\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              You can now access all features of the application process\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              Our team will contact you shortly with next steps\n            </li>\n          </ul>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Link\n            to=\"/student/dashboard\"\n            className=\"bg-[#05294E] text-white px-6 py-3 rounded-xl hover:bg-[#05294E]/90 transition-colors font-bold flex items-center justify-center\"\n          >\n            Go to Dashboard\n            <ArrowRight className=\"ml-2 h-5 w-5\" />\n          </Link>\n          <Link\n            to=\"/\"\n            className=\"bg-slate-100 text-slate-700 px-6 py-3 rounded-xl hover:bg-slate-200 transition-colors font-medium\"\n          >\n            Return Home\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckoutSuccess;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\ForgotPassword.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2277,2280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2277,2280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10406,10409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10406,10409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Mail, ArrowLeft, CheckCircle, AlertCircle, Shield, Zap, Lock, Eye, EyeOff } from 'lucide-react';\nimport { supabase } from '../lib/supabase';\n\nconst ForgotPassword: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [emailSent, setEmailSent] = useState(false);\n  const [emailVerified, setEmailVerified] = useState(false);\n  const location = useLocation();\n\n  // Detect access_token in URL (Supabase reset link)\n  const [showResetForm, setShowResetForm] = useState(false);\n  const [accessToken, setAccessToken] = useState<string | null>(null);\n  const [refreshToken, setRefreshToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    const hash = window.location.hash;\n    const params = new URLSearchParams(hash.replace(/^#/, '?'));\n    const token = params.get('access_token');\n    const refresh = params.get('refresh_token');\n    if (token && refresh) {\n      setShowResetForm(true);\n      setAccessToken(token);\n      setRefreshToken(refresh);\n      setEmailVerified(true); // Skip to password reset step\n      setEmailSent(true);\n    }\n  }, [location]);\n\n  const handleSendVerification = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setMessage('');\n\n    try {\n      // Generate a simple 6-digit verification code\n      const code = Math.floor(100000 + Math.random() * 900000).toString();\n\n      // Send email with verification code (simulated)\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/forgot-password?verified=true`,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      setEmailSent(true);\n      setMessage(`Verification code sent to ${email}! For demo purposes, the code is: ${code}`);\n    } catch (err: any) {\n      setError(err.message || 'An error occurred. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const validatePassword = (password: string) => {\n    const minLength = 8;\n    const hasUpperCase = /[A-Z]/.test(password);\n    const hasLowerCase = /[a-z]/.test(password);\n    const hasNumbers = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n\n    if (password.length < minLength) {\n      return 'Password must be at least 8 characters long';\n    }\n    if (!hasUpperCase) {\n      return 'Password must contain at least one uppercase letter';\n    }\n    if (!hasLowerCase) {\n      return 'Password must contain at least one lowercase letter';\n    }\n    if (!hasNumbers) {\n      return 'Password must contain at least one number';\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character';\n    }\n    return null;\n  };\n\n  const getPasswordStrength = (password: string) => {\n    let strength = 0;\n    if (password.length >= 8) strength++;\n    if (/[A-Z]/.test(password)) strength++;\n    if (/[a-z]/.test(password)) strength++;\n    if (/\\d/.test(password)) strength++;\n    if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) strength++;\n\n    if (strength <= 2) return { level: 'weak', color: 'bg-red-500', text: 'Weak' };\n    if (strength <= 3) return { level: 'medium', color: 'bg-yellow-500', text: 'Medium' };\n    if (strength <= 4) return { level: 'good', color: 'bg-blue-500', text: 'Good' };\n    return { level: 'strong', color: 'bg-green-500', text: 'Strong' };\n  };\n\n  const passwordStrength = getPasswordStrength(password);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-slate-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Back to Login Link */}\n        <div className=\"text-center\">\n          <Link \n            to=\"/login\" \n            className=\"inline-flex items-center text-sm text-slate-600 hover:text-[#05294E] transition-colors font-medium\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Sign In\n          </Link>\n        </div>\n\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"bg-[#05294E] w-16 h-16 rounded-3xl flex items-center justify-center shadow-2xl\">\n              {emailVerified ? <Lock className=\"h-8 w-8 text-white\" /> : <Mail className=\"h-8 w-8 text-white\" />}\n            </div>\n          </div>\n          \n          <h2 className=\"text-4xl font-black text-slate-900 mb-4\">\n            {!emailSent ? 'Forgot Password?' : \n             !emailVerified ? 'Verify Your Email' : \n             'Set New Password'}\n          </h2>\n          \n          <p className=\"text-slate-600 text-lg leading-relaxed\">\n            {!emailSent \n              ? 'Enter your email address and we\\'ll send you a verification code to reset your password.'\n              : !emailVerified \n              ? 'Enter the verification code we sent to your email address.'\n              : 'Create a new secure password for your account.'\n            }\n          </p>\n        </div>\n\n        {/* Main Form Container */}\n        <div className=\"bg-white p-8 rounded-3xl shadow-xl border border-slate-200\">\n          {/* Step 1: Email Input */}\n          {!emailSent && (\n            <form onSubmit={handleSendVerification} className=\"space-y-6\">\n              {/* Error Message */}\n              {error && (\n                <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-2xl text-sm flex items-center\">\n                  <AlertCircle className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                  {error}\n                </div>\n              )}\n\n              {/* Email Input */}\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                  Email Address\n                </label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                  <input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    required\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"appearance-none relative block w-full pl-12 pr-4 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300\"\n                    placeholder=\"Enter your email address\"\n                  />\n                </div>\n              </div>\n\n              {/* Submit Button */}\n              <button\n                type=\"submit\"\n                disabled={loading || !email.trim()}\n                className=\"group relative w-full flex justify-center py-4 px-4 border border-transparent text-lg font-black rounded-2xl text-white bg-[#05294E] hover:bg-[#05294E]/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#05294E] disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-xl\"\n              >\n                {loading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                    Sending Code...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center\">\n                    Send Verification Code\n                    <Zap className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                  </div>\n                )}\n              </button>\n            </form>\n          )}\n\n          {/* Step 2: Email Verification - REMOVIDO */}\n          {emailSent && !showResetForm && (\n            <div className=\"bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded-2xl text-sm flex items-center mb-4\">\n              <CheckCircle className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n              A link to reset your password has been sent to your email. Please check your inbox (and spam/junk folder) to continue.\n            </div>\n          )}\n\n          {/* Step 3: Password Reset */}\n          {(emailVerified || showResetForm) && (\n            <form onSubmit={async (e) => {\n              e.preventDefault();\n              setLoading(true);\n              setError(\"\");\n              // Validar senha\n              const passwordError = validatePassword(password);\n              if (passwordError) {\n                setError(passwordError);\n                setLoading(false);\n                return;\n              }\n              if (password !== confirmPassword) {\n                setError('Passwords do not match');\n                setLoading(false);\n                return;\n              }\n              try {\n                if (showResetForm && accessToken && refreshToken) {\n                  // Autentica sessão antes de atualizar senha\n                  const { error: sessionError } = await supabase.auth.setSession({\n                    access_token: accessToken,\n                    refresh_token: refreshToken,\n                  });\n                  if (sessionError) throw sessionError;\n                  const { error } = await supabase.auth.updateUser({ password });\n                  if (error) throw error;\n                  setMessage('Password updated successfully! You can now sign in with your new password.');\n                  setTimeout(() => { window.location.href = '/login'; }, 3000);\n                } else {\n                  // Simulação local (fluxo antigo)\n                  await new Promise(resolve => setTimeout(resolve, 2000));\n                  setMessage('Password updated successfully! You can now sign in with your new password.');\n                  setTimeout(() => { window.location.href = '/login'; }, 3000);\n                }\n              } catch (err: any) {\n                setError(err.message || 'An error occurred while updating your password. Please try again.');\n              } finally {\n                setLoading(false);\n              }\n            }} className=\"space-y-6\">\n              {/* Success Message */}\n              {message && (\n                <div className=\"bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-2xl text-sm flex items-center\">\n                  <CheckCircle className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                  {message}\n                </div>\n              )}\n\n              {/* Error Message */}\n              {error && (\n                <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-2xl text-sm flex items-center\">\n                  <AlertCircle className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                  {error}\n                </div>\n              )}\n\n              {/* New Password */}\n              <div>\n                <label htmlFor=\"password\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                  New Password\n                </label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                  <input\n                    id=\"password\"\n                    name=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    required\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"appearance-none relative block w-full pl-12 pr-12 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300\"\n                    placeholder=\"Enter your new password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-4 top-4 text-slate-400 hover:text-slate-600\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                  </button>\n                </div>\n                \n                {/* Password Strength Indicator */}\n                {password && (\n                  <div className=\"mt-2\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-xs text-slate-500\">Password strength:</span>\n                      <span className={`text-xs font-medium ${\n                        passwordStrength.level === 'weak' ? 'text-red-600' :\n                        passwordStrength.level === 'medium' ? 'text-yellow-600' :\n                        passwordStrength.level === 'good' ? 'text-blue-600' :\n                        'text-green-600'\n                      }`}>\n                        {passwordStrength.text}\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full transition-all duration-300 ${passwordStrength.color}`}\n                        style={{ width: `${(passwordStrength.level === 'weak' ? 20 : \n                                            passwordStrength.level === 'medium' ? 40 :\n                                            passwordStrength.level === 'good' ? 70 : 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Confirm Password */}\n              <div>\n                <label htmlFor=\"confirmPassword\" className=\"block text-sm font-bold text-slate-900 mb-2\">\n                  Confirm New Password\n                </label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-4 top-4 h-5 w-5 text-slate-400\" />\n                  <input\n                    id=\"confirmPassword\"\n                    name=\"confirmPassword\"\n                    type={showConfirmPassword ? 'text' : 'password'}\n                    required\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    className=\"appearance-none relative block w-full pl-12 pr-12 py-4 bg-white border border-slate-300 placeholder-slate-500 text-slate-900 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300\"\n                    placeholder=\"Confirm your new password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-4 top-4 text-slate-400 hover:text-slate-600\"\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                  </button>\n                </div>\n                \n                {/* Password Match Indicator */}\n                {confirmPassword && (\n                  <div className=\"mt-2 flex items-center\">\n                    {password === confirmPassword ? (\n                      <div className=\"flex items-center text-green-600\">\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                        <span className=\"text-xs\">Passwords match</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center text-red-600\">\n                        <AlertCircle className=\"h-4 w-4 mr-1\" />\n                        <span className=\"text-xs\">Passwords do not match</span>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Password Requirements */}\n              <div className=\"bg-slate-50 p-4 rounded-2xl\">\n                <h4 className=\"text-sm font-bold text-slate-900 mb-2\">Password Requirements:</h4>\n                <ul className=\"text-xs text-slate-600 space-y-1\">\n                  <li className={`flex items-center ${password.length >= 8 ? 'text-green-600' : ''}`}>\n                    <div className={`w-2 h-2 rounded-full mr-2 ${password.length >= 8 ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                    At least 8 characters long\n                  </li>\n                  <li className={`flex items-center ${/[A-Z]/.test(password) ? 'text-green-600' : ''}`}>\n                    <div className={`w-2 h-2 rounded-full mr-2 ${/[A-Z]/.test(password) ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                    One uppercase letter\n                  </li>\n                  <li className={`flex items-center ${/[a-z]/.test(password) ? 'text-green-600' : ''}`}>\n                    <div className={`w-2 h-2 rounded-full mr-2 ${/[a-z]/.test(password) ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                    One lowercase letter\n                  </li>\n                  <li className={`flex items-center ${/\\d/.test(password) ? 'text-green-600' : ''}`}>\n                    <div className={`w-2 h-2 rounded-full mr-2 ${/\\d/.test(password) ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                    One number\n                  </li>\n                  <li className={`flex items-center ${/[!@#$%^&*(),.?\":{}|<>]/.test(password) ? 'text-green-600' : ''}`}>\n                    <div className={`w-2 h-2 rounded-full mr-2 ${/[!@#$%^&*(),.?\":{}|<>]/.test(password) ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                    One special character\n                  </li>\n                </ul>\n              </div>\n\n              {/* Submit Button */}\n              <button\n                type=\"submit\"\n                disabled={loading || !password || !confirmPassword || password !== confirmPassword}\n                className=\"group relative w-full flex justify-center py-4 px-4 border border-transparent text-lg font-black rounded-2xl text-white bg-[#05294E] hover:bg-[#05294E]/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#05294E] disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-xl\"\n              >\n                {loading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                    Updating Password...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center\">\n                    Update Password\n                    <Zap className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                  </div>\n                )}\n              </button>\n            </form>\n          )}\n\n          {/* Trust Indicators */}\n          <div className=\"flex justify-center items-center space-x-6 pt-6 border-t border-slate-200 mt-6\">\n            <div className=\"flex items-center text-xs text-slate-500\">\n              <Shield className=\"h-4 w-4 mr-1 text-green-500\" />\n              <span>Secure Process</span>\n            </div>\n            <div className=\"flex items-center text-xs text-slate-500\">\n              <CheckCircle className=\"h-4 w-4 mr-1 text-blue-500\" />\n              <span>Email Verified</span>\n            </div>\n            <div className=\"flex items-center text-xs text-slate-500\">\n              <Zap className=\"h-4 w-4 mr-1 text-[#D0151C]\" />\n              <span>Quick Reset</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Additional Help */}\n        <div className=\"text-center\">\n          <p className=\"text-sm text-slate-500\">\n            Need help? Contact our support team at{' '}\n            <a href=\"mailto:support@matriculausa.com\" className=\"text-[#05294E] hover:underline font-medium\">\n              support@matriculausa.com\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPassword;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\Home.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":3,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":3,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BookOpen' is defined but never used.","line":3,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":85},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":3,"column":87,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":90},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Shield' is defined but never used.","line":3,"column":92,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":3,"column":100,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":110},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":3,"column":122,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":132},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Play' is defined but never used.","line":3,"column":134,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":138},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":3,"column":154,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":160},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heart' is defined but never used.","line":3,"column":162,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":167},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Brain' is defined but never used.","line":3,"column":169,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":174},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Rocket' is defined but never used.","line":3,"column":176,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":182},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":3,"column":184,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":189},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CreditCard' is defined but never used.","line":3,"column":191,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":201},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StripeCheckout' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'featuredSchools' is assigned a value but never used.","line":12,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Search' is not defined.","line":145,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":145,"endColumn":24}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { GraduationCap, Globe, Users, Award, ArrowRight, CheckCircle, Star, BookOpen, Zap, Shield, TrendingUp, Sparkles, DollarSign, Play, ChevronRight, Target, Heart, Brain, Rocket, Clock, CreditCard } from 'lucide-react';\nimport { useUniversities } from '../hooks/useUniversities';\nimport { StripeCheckout } from '../components/StripeCheckout';\nimport { useAuth } from '../hooks/useAuth';\nimport { useSubscription } from '../hooks/useSubscription';\nimport { motion } from 'framer-motion';\n\nconst Home: React.FC = () => {\n  const { universities, loading, error } = useUniversities();\n  const featuredSchools = universities.slice(0, 6);\n  const { isAuthenticated } = useAuth();\n  const { hasPaidProcess, loading: subscriptionLoading } = useSubscription();\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        when: \"beforeChildren\",\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: { y: 0, opacity: 1 }\n  };\n\n  return (\n    <div className=\"bg-slate-50\">\n      {/* Hero Section */}\n      <main className=\"relative bg-gradient-to-br from-[#05294E] to-slate-900 text-white overflow-hidden\">\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-20 -left-20 w-96 h-96 bg-white/5 rounded-full blur-3xl animate-pulse\"></div>\n          <div className=\"absolute bottom-20 -right-20 w-96 h-96 bg-[#D0151C]/10 rounded-full blur-3xl animate-pulse\"></div>\n        </div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24 md:py-32 text-center\">\n          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }}>\n            <div className=\"inline-flex items-center bg-white/10 backdrop-blur-sm border border-white/20 rounded-full px-6 py-2 mb-8\">\n              <Star className=\"h-4 w-4 mr-2 text-yellow-300\" />\n              <span className=\"text-sm font-medium\">Your Gateway to U.S. Education</span>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-black mb-6 leading-tight\">\n              Unlock Your <span className=\"text-[#D0151C]\">U.S. University</span> Dream\n            </h1>\n            \n            <p className=\"text-xl text-slate-200 max-w-3xl mx-auto leading-relaxed\">\n              We connect international students with exclusive scholarships at top American universities.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mt-10\">\n              <Link \n                to={isAuthenticated ? (hasPaidProcess ? \"/scholarships\" : \"/subscribe\") : \"/register\"}\n                className=\"bg-[#D0151C] text-white px-8 py-4 rounded-2xl hover:bg-[#B01218] transition-all duration-300 font-bold text-lg shadow-2xl transform hover:scale-105 flex items-center justify-center\"\n              >\n                {subscriptionLoading ? 'Loading...' : (isAuthenticated ? (hasPaidProcess ? 'Find Scholarships' : 'Unlock Access') : 'Get Started')}\n                <ArrowRight className=\"ml-3 h-5 w-5\" />\n              </Link>\n              <Link \n                to=\"#how-it-works\"\n                className=\"bg-white/10 backdrop-blur-sm border border-white/20 text-white px-8 py-4 rounded-2xl hover:bg-white/20 transition-all duration-300 font-bold text-lg flex items-center justify-center\"\n              >\n                Learn More\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </main>\n\n      {/* Featured Universities Section */}\n      <section className=\"py-24 bg-slate-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-black text-slate-900 mb-4\">\n              Featured <span className=\"text-[#05294E]\">Universities</span>\n            </h2>\n            <p className=\"text-lg text-slate-600 max-w-2xl mx-auto\">\n              Explore some of the top institutions offering exclusive scholarships through our platform.\n            </p>\n          </div>\n\n          {loading && <p className=\"text-center\">Loading universities...</p>}\n          {error && <p className=\"text-center text-red-500\">Error: {error}</p>}\n          {!loading && !error && (\n            <motion.div \n              className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n              variants={containerVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n            >\n              {universities.slice(0, 6).map((uni) => (\n                <Link to={`/universities/${uni.id}`} key={uni.id} className=\"group block\">\n                  <motion.div\n                    className=\"bg-white rounded-2xl shadow-lg overflow-hidden transform transition-all duration-500 hover:scale-105 hover:shadow-2xl\"\n                    variants={itemVariants}\n                  >\n                    <div className=\"h-48 overflow-hidden\">\n                      <img src={uni.logo_url} alt={uni.name} className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-500\" />\n                    </div>\n                    <div className=\"p-6\">\n                      <h4 className=\"text-xl font-bold text-slate-900 mb-2\">{uni.name}</h4>\n                      <p className=\"text-slate-600 text-sm\">{uni.location}</p>\n                    </div>\n                  </motion.div>\n                </Link>\n              ))}\n            </motion.div>\n          )}\n\n          <div className=\"text-center mt-16\">\n             <Link\n               to=\"/universities\"\n               className=\"inline-flex items-center bg-white border-2 border-[#05294E] text-[#05294E] px-8 py-4 rounded-2xl text-lg font-bold hover:bg-[#05294E] hover:text-white transition-all duration-300 shadow-lg hover:shadow-xl\"\n             >\n               <GraduationCap className=\"mr-3 h-5 w-5\" />\n               View All Universities\n               <ChevronRight className=\"ml-2 h-5 w-5\" />\n             </Link>\n           </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section id=\"how-it-works\" className=\"py-24 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-black text-slate-900 mb-4\">\n              How It <span className=\"text-[#05294E]\">Works</span>\n            </h2>\n            <p className=\"text-lg text-slate-600 max-w-2xl mx-auto\">\n              A simple, streamlined process to connect you with your future.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n            {/* Step 1 */}\n            <div className=\"bg-slate-50 p-8 rounded-2xl border border-slate-200\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-[#05294E] to-blue-700 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                <Search className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">1. Discover</h3>\n              <p className=\"text-slate-600\">\n                Browse our curated list of scholarships from leading U.S. universities.\n              </p>\n            </div>\n            {/* Step 2 */}\n            <div className=\"bg-slate-50 p-8 rounded-2xl border border-slate-200\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-[#D0151C] to-red-600 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                <CheckCircle className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">2. Apply</h3>\n              <p className=\"text-slate-600\">\n                Complete your profile and apply to the scholarships that fit you best.\n              </p>\n            </div>\n            {/* Step 3 */}\n            <div className=\"bg-slate-50 p-8 rounded-2xl border border-slate-200\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                <Award className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">3. Succeed</h3>\n              <p className=\"text-slate-600\">\n                Receive offers and start your journey at a U.S. university.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-24 bg-slate-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"bg-gradient-to-br from-[#05294E] via-slate-800 to-[#05294E] rounded-3xl p-12 text-white text-center relative overflow-hidden shadow-2xl\">\n            <div className=\"absolute inset-0\">\n              <div className=\"absolute top-0 left-0 w-64 h-64 bg-white/5 rounded-full blur-3xl\"></div>\n              <div className=\"absolute bottom-0 right-0 w-96 h-96 bg-[#D0151C]/10 rounded-full blur-3xl\"></div>\n            </div>\n            \n            <div className=\"relative\">\n              <div className=\"inline-flex items-center bg-white/10 backdrop-blur-sm border border-white/20 rounded-full px-6 py-2 mb-6\">\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                <span className=\"text-sm font-medium\">Ready to Start?</span>\n              </div>\n              \n              <h2 className=\"text-4xl md:text-5xl font-black mb-6 leading-tight\">\n                Ready to <span className=\"text-[#D0151C]\">Transform</span> Your Future?\n              </h2>\n              <p className=\"text-xl text-slate-200 mb-10 max-w-3xl mx-auto leading-relaxed\">\n                Join thousands of international students who have secured their educational dreams through our exclusive scholarship opportunities.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n                <Link\n                  to=\"/register\"\n                  className=\"bg-[#D0151C] text-white px-10 py-5 rounded-2xl hover:bg-[#B01218] transition-all duration-300 font-bold text-lg shadow-2xl transform hover:scale-105 flex items-center justify-center\"\n                >\n                  Get Started Today\n                  <ArrowRight className=\"ml-3 h-5 w-5\" />\n                </Link>\n                <Link\n                  to=\"/how-it-works\"\n                  className=\"bg-white/10 backdrop-blur-sm border border-white/20 text-white px-10 py-5 rounded-2xl hover:bg-white/20 transition-all duration-300 font-bold text-lg flex items-center justify-center\"\n                >\n                  <Award className=\"mr-3 h-5 w-5\" />\n                  Learn More\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Home;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\HowItWorks.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":303,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[16139,16281],"text":"\n                    &quot;The AI matching found me a full scholarship I never would have discovered. The process was seamless!\"\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[16139,16281],"text":"\n                    &ldquo;The AI matching found me a full scholarship I never would have discovered. The process was seamless!\"\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[16139,16281],"text":"\n                    &#34;The AI matching found me a full scholarship I never would have discovered. The process was seamless!\"\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[16139,16281],"text":"\n                    &rdquo;The AI matching found me a full scholarship I never would have discovered. The process was seamless!\"\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":303,"column":122,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[16139,16281],"text":"\n                    \"The AI matching found me a full scholarship I never would have discovered. The process was seamless!&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[16139,16281],"text":"\n                    \"The AI matching found me a full scholarship I never would have discovered. The process was seamless!&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[16139,16281],"text":"\n                    \"The AI matching found me a full scholarship I never would have discovered. The process was seamless!&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[16139,16281],"text":"\n                    \"The AI matching found me a full scholarship I never would have discovered. The process was seamless!&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":320,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17067,17193],"text":"\n                    &quot;From application to visa approval in just 3 months. The support team was incredible!\"\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17067,17193],"text":"\n                    &ldquo;From application to visa approval in just 3 months. The support team was incredible!\"\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17067,17193],"text":"\n                    &#34;From application to visa approval in just 3 months. The support team was incredible!\"\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17067,17193],"text":"\n                    &rdquo;From application to visa approval in just 3 months. The support team was incredible!\"\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":320,"column":106,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17067,17193],"text":"\n                    \"From application to visa approval in just 3 months. The support team was incredible!&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17067,17193],"text":"\n                    \"From application to visa approval in just 3 months. The support team was incredible!&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17067,17193],"text":"\n                    \"From application to visa approval in just 3 months. The support team was incredible!&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17067,17193],"text":"\n                    \"From application to visa approval in just 3 months. The support team was incredible!&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  User, \n  Brain, \n  CheckCircle, \n  ArrowRight, \n  Sparkles, \n  Target, \n  Shield, \n  Award, \n  Clock, \n  Users,\n  FileText,\n  Search,\n  Heart,\n  Star,\n  TrendingUp,\n  Rocket,\n  BookOpen,\n  DollarSign\n} from 'lucide-react';\n\nconst HowItWorks: React.FC = () => {\n  return (\n    <div className=\"bg-white\">\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-[#05294E] via-slate-800 to-[#05294E] text-white py-24 relative overflow-hidden\">\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-20 left-10 w-72 h-72 bg-[#D0151C]/10 rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-20 right-10 w-96 h-96 bg-white/5 rounded-full blur-3xl\"></div>\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[600px] h-[600px] bg-white/5 rounded-full blur-3xl\"></div>\n        </div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center bg-white/10 backdrop-blur-sm border border-white/20 rounded-full px-6 py-2 mb-8\">\n              <Sparkles className=\"h-4 w-4 mr-2 text-white\" />\n              <span className=\"text-sm font-medium text-white\">Revolutionary Process</span>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-black mb-6 leading-tight\">\n              <span className=\"text-white\">\n                How It\n              </span>\n              <br />\n              <span className=\"text-[#D0151C]\">Works</span>\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-slate-200 max-w-4xl mx-auto leading-relaxed\">\n              Discover how our AI-powered platform transforms your educational dreams into reality \n              through a simple, intelligent, and comprehensive process designed for international students.\n            </p>\n            \n            {/* Trust Indicators */}\n            <div className=\"flex flex-wrap justify-center items-center gap-8 mt-12 text-slate-300\">\n              <div className=\"flex items-center bg-white/10 backdrop-blur-sm rounded-xl px-4 py-2\">\n                <Clock className=\"h-5 w-5 mr-2 text-green-400\" />\n                <span className=\"text-sm font-medium\">5 Minutes Setup</span>\n              </div>\n              <div className=\"flex items-center bg-white/10 backdrop-blur-sm rounded-xl px-4 py-2\">\n                <TrendingUp className=\"h-5 w-5 mr-2 text-yellow-400\" />\n                <span className=\"text-sm font-medium\">95% Success Rate</span>\n              </div>\n              <div className=\"flex items-center bg-white/10 backdrop-blur-sm rounded-xl px-4 py-2\">\n                <Shield className=\"h-5 w-5 mr-2 text-blue-400\" />\n                <span className=\"text-sm font-medium\">100% Secure</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Process Steps */}\n      <section className=\"py-24 bg-gradient-to-br from-slate-50 to-blue-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-flex items-center bg-white rounded-full px-6 py-2 mb-6 shadow-lg border border-slate-200\">\n              <Target className=\"h-4 w-4 mr-2 text-[#05294E]\" />\n              <span className=\"text-sm font-bold text-slate-700\">Simple 3-Step Process</span>\n            </div>\n            <h2 className=\"text-4xl md:text-5xl font-black text-slate-900 mb-6\">\n              Your Journey to\n              <br />\n              <span className=\"text-[#05294E]\">Academic Excellence</span>\n            </h2>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              From profile creation to university enrollment, we guide you through every step with cutting-edge technology and personalized support.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n            {/* Step 1 */}\n            <div className=\"relative group\">\n              <div className=\"bg-white p-10 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 border border-slate-200 group-hover:-translate-y-2\">\n                <div className=\"absolute -top-6 left-8\">\n                  <div className=\"bg-[#05294E] w-16 h-16 rounded-3xl flex items-center justify-center shadow-2xl group-hover:scale-110 transition-transform duration-300\">\n                    <span className=\"text-2xl font-black text-white\">1</span>\n                  </div>\n                </div>\n                \n                <div className=\"pt-8\">\n                  <div className=\"bg-[#05294E]/10 w-20 h-20 rounded-3xl flex items-center justify-center mb-8 group-hover:scale-110 transition-transform duration-300\">\n                    <User className=\"h-10 w-10 text-[#05294E]\" />\n                  </div>\n                  \n                  <h3 className=\"text-3xl font-black text-slate-900 mb-6\">Create Your Smart Profile</h3>\n                  <p className=\"text-slate-600 leading-relaxed text-lg mb-8\">\n                    Build a comprehensive academic profile using our intelligent form system. Our AI analyzes your background, achievements, and goals to create a unique student fingerprint.\n                  </p>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center text-slate-700\">\n                      <CheckCircle className=\"h-5 w-5 mr-3 text-green-600\" />\n                      <span className=\"font-medium\">Academic history & achievements</span>\n                    </div>\n                    <div className=\"flex items-center text-slate-700\">\n                      <CheckCircle className=\"h-5 w-5 mr-3 text-green-600\" />\n                      <span className=\"font-medium\">Career goals & preferences</span>\n                    </div>\n                    <div className=\"flex items-center text-slate-700\">\n                      <CheckCircle className=\"h-5 w-5 mr-3 text-green-600\" />\n                      <span className=\"font-medium\">Financial requirements</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Connector Arrow */}\n              <div className=\"hidden lg:block absolute top-1/2 -right-6 transform -translate-y-1/2\">\n                <ArrowRight className=\"h-8 w-8 text-[#05294E]\" />\n              </div>\n            </div>\n\n            {/* Step 2 */}\n            <div className=\"relative group\">\n              <div className=\"bg-white p-10 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 border border-slate-200 group-hover:-translate-y-2\">\n                <div className=\"absolute -top-6 left-8\">\n                  <div className=\"bg-[#D0151C] w-16 h-16 rounded-3xl flex items-center justify-center shadow-2xl group-hover:scale-110 transition-transform duration-300\">\n                    <span className=\"text-2xl font-black text-white\">2</span>\n                  </div>\n                </div>\n                \n                <div className=\"pt-8\">\n                  <div className=\"bg-[#D0151C]/10 w-20 h-20 rounded-3xl flex items-center justify-center mb-8 group-hover:scale-110 transition-transform duration-300\">\n                    <Brain className=\"h-10 w-10 text-[#D0151C]\" />\n                  </div>\n                  \n                  <h3 className=\"text-3xl font-black text-slate-900 mb-6\">AI-Powered Matching</h3>\n                  <p className=\"text-slate-600 leading-relaxed text-lg mb-8\">\n                    Our advanced machine learning algorithms instantly analyze thousands of scholarship opportunities and university programs to find your perfect matches.\n                  </p>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center text-slate-700\">\n                      <CheckCircle className=\"h-5 w-5 mr-3 text-green-600\" />\n                      <span className=\"font-medium\">Personalized scholarship matches</span>\n                    </div>\n                    <div className=\"flex items-center text-slate-700\">\n                      <CheckCircle className=\"h-5 w-5 mr-3 text-green-600\" />\n                      <span className=\"font-medium\">University program recommendations</span>\n                    </div>\n                    <div className=\"flex items-center text-slate-700\">\n                      <CheckCircle className=\"h-5 w-5 mr-3 text-green-600\" />\n                      <span className=\"font-medium\">Exclusive opportunity access</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Connector Arrow */}\n              <div className=\"hidden lg:block absolute top-1/2 -right-6 transform -translate-y-1/2\">\n                <ArrowRight className=\"h-8 w-8 text-[#D0151C]\" />\n              </div>\n            </div>\n\n            {/* Step 3 */}\n            <div className=\"relative group\">\n              <div className=\"bg-white p-10 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 border border-slate-200 group-hover:-translate-y-2\">\n                <div className=\"absolute -top-6 left-8\">\n                  <div className=\"bg-green-600 w-16 h-16 rounded-3xl flex items-center justify-center shadow-2xl group-hover:scale-110 transition-transform duration-300\">\n                    <span className=\"text-2xl font-black text-white\">3</span>\n                  </div>\n                </div>\n                \n                <div className=\"pt-8\">\n                  <div className=\"bg-green-100 w-20 h-20 rounded-3xl flex items-center justify-center mb-8 group-hover:scale-110 transition-transform duration-300\">\n                    <Rocket className=\"h-10 w-10 text-green-600\" />\n                  </div>\n                  \n                  <h3 className=\"text-3xl font-black text-slate-900 mb-6\">Apply & Succeed</h3>\n                  <p className=\"text-slate-600 leading-relaxed text-lg mb-8\">\n                    Submit applications with confidence using our guided process. Receive comprehensive support from application to visa processing and enrollment.\n                  </p>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center text-slate-700\">\n                      <CheckCircle className=\"h-5 w-5 mr-3 text-green-600\" />\n                      <span className=\"font-medium\">Guided application process</span>\n                    </div>\n                    <div className=\"flex items-center text-slate-700\">\n                      <CheckCircle className=\"h-5 w-5 mr-3 text-green-600\" />\n                      <span className=\"font-medium\">Legal & visa support</span>\n                    </div>\n                    <div className=\"flex items-center text-slate-700\">\n                      <CheckCircle className=\"h-5 w-5 mr-3 text-green-600\" />\n                      <span className=\"font-medium\">Enrollment assistance</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Detailed Process Flow */}\n      <section className=\"py-24 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-4xl md:text-5xl font-black text-slate-900 mb-6\">\n              Behind the <span className=\"text-[#D0151C]\">Technology</span>\n            </h2>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              Discover the advanced features and intelligent systems that power your success\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center group\">\n              <div className=\"bg-[#05294E] w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300 shadow-2xl\">\n                <Search className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Smart Discovery</h3>\n              <p className=\"text-slate-600 leading-relaxed\">\n                Our AI scans thousands of opportunities daily, finding hidden scholarships that match your unique profile.\n              </p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"bg-[#D0151C] w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300 shadow-2xl\">\n                <FileText className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Document Management</h3>\n              <p className=\"text-slate-600 leading-relaxed\">\n                Secure cloud storage and intelligent organization of all your academic documents and applications.\n              </p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"bg-green-600 w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300 shadow-2xl\">\n                <Heart className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Personal Support</h3>\n              <p className=\"text-slate-600 leading-relaxed\">\n                Dedicated counselors and AI assistants provide 24/7 support throughout your entire journey.\n              </p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"bg-purple-600 w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300 shadow-2xl\">\n                <TrendingUp className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Success Tracking</h3>\n              <p className=\"text-slate-600 leading-relaxed\">\n                Real-time analytics and progress tracking to optimize your application success rate.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Success Stories Preview */}\n      <section className=\"py-24 bg-gradient-to-br from-slate-50 to-blue-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16 items-center\">\n            <div>\n              <div className=\"inline-flex items-center bg-white rounded-full px-6 py-2 mb-6 shadow-lg border border-slate-200\">\n                <Star className=\"h-4 w-4 mr-2 text-yellow-500\" />\n                <span className=\"text-sm font-bold text-slate-700\">Success Stories</span>\n              </div>\n              \n              <h2 className=\"text-4xl md:text-5xl font-black text-slate-900 mb-8\">\n                Real Results from\n                <br />\n                <span className=\"text-[#05294E]\">Real Students</span>\n              </h2>\n              \n              <div className=\"space-y-8\">\n                <div className=\"bg-white p-6 rounded-2xl shadow-lg border border-slate-200\">\n                  <div className=\"flex items-center mb-4\">\n                    <img\n                      src=\"https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=1\"\n                      alt=\"Maria Silva\"\n                      className=\"w-12 h-12 rounded-xl mr-4\"\n                    />\n                    <div>\n                      <div className=\"font-bold text-slate-900\">Maria Silva</div>\n                      <div className=\"text-sm text-[#05294E] font-medium\">MIT, Computer Science</div>\n                    </div>\n                  </div>\n                  <p className=\"text-slate-700 italic\">\n                    \"The AI matching found me a full scholarship I never would have discovered. The process was seamless!\"\n                  </p>\n                </div>\n\n                <div className=\"bg-white p-6 rounded-2xl shadow-lg border border-slate-200\">\n                  <div className=\"flex items-center mb-4\">\n                    <img\n                      src=\"https://images.pexels.com/photos/2182970/pexels-photo-2182970.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=1\"\n                      alt=\"Carlos Rodriguez\"\n                      className=\"w-12 h-12 rounded-xl mr-4\"\n                    />\n                    <div>\n                      <div className=\"font-bold text-slate-900\">Carlos Rodriguez</div>\n                      <div className=\"text-sm text-[#D0151C] font-medium\">Harvard, MBA</div>\n                    </div>\n                  </div>\n                  <p className=\"text-slate-700 italic\">\n                    \"From application to visa approval in just 3 months. The support team was incredible!\"\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <img\n                src=\"https://images.pexels.com/photos/5428836/pexels-photo-5428836.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\"\n                alt=\"Students celebrating\"\n                className=\"rounded-3xl shadow-2xl w-full\"\n              />\n              \n              {/* Floating Stats */}\n              <div className=\"absolute -bottom-6 -left-6 bg-white rounded-2xl p-6 shadow-2xl border border-slate-200\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-black text-[#05294E] mb-2\">95%</div>\n                  <div className=\"text-sm font-medium text-slate-600\">Success Rate</div>\n                </div>\n              </div>\n              \n              <div className=\"absolute -top-6 -right-6 bg-white rounded-2xl p-6 shadow-2xl border border-slate-200\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-black text-[#D0151C] mb-2\">$50M+</div>\n                  <div className=\"text-sm font-medium text-slate-600\">Secured</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-24 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-black text-slate-900 mb-6\">\n              Frequently Asked <span className=\"text-[#05294E]\">Questions</span>\n            </h2>\n            <p className=\"text-xl text-slate-600\">\n              Everything you need to know about our revolutionary platform\n            </p>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"bg-gradient-to-r from-slate-50 to-blue-50 p-8 rounded-3xl border border-slate-200\">\n              <h3 className=\"text-xl font-bold text-slate-900 mb-4\">How long does the entire process take?</h3>\n              <p className=\"text-slate-600 leading-relaxed\">\n                The initial profile setup takes just 5 minutes. Our AI provides instant matches, and most students receive scholarship offers within 2-4 weeks. The complete process from application to enrollment typically takes 3-6 months.\n              </p>\n            </div>\n\n            <div className=\"bg-gradient-to-r from-slate-50 to-blue-50 p-8 rounded-3xl border border-slate-200\">\n              <h3 className=\"text-xl font-bold text-slate-900 mb-4\">What makes your AI matching different?</h3>\n              <p className=\"text-slate-600 leading-relaxed\">\n                Our proprietary algorithm analyzes over 200 data points including academic performance, extracurricular activities, career goals, and personal preferences. It continuously learns from successful placements to improve match accuracy.\n              </p>\n            </div>\n\n            <div className=\"bg-gradient-to-r from-slate-50 to-blue-50 p-8 rounded-3xl border border-slate-200\">\n              <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Is there a cost to use the platform?</h3>\n              <p className=\"text-slate-600 leading-relaxed\">\n                Basic access is free and includes standard scholarship matching. Premium membership unlocks exclusive opportunities, personalized counseling, and comprehensive application support with a 95% success guarantee.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-24 bg-[#05294E] text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-0 left-0 w-96 h-96 bg-white/5 rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-0 right-0 w-96 h-96 bg-[#D0151C]/20 rounded-full blur-3xl\"></div>\n        </div>\n        \n        <div className=\"relative max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"inline-flex items-center bg-white/10 backdrop-blur-sm border border-white/20 rounded-full px-6 py-2 mb-8\">\n            <Sparkles className=\"h-4 w-4 mr-2\" />\n            <span className=\"text-sm font-medium\">Ready to Start?</span>\n          </div>\n          \n          <h2 className=\"text-4xl md:text-6xl font-black mb-6 leading-tight\">\n            Begin Your Journey to\n            <br />\n            <span className=\"text-[#D0151C]\">Academic Success</span>\n          </h2>\n          \n          <p className=\"text-xl mb-10 text-blue-100 max-w-3xl mx-auto leading-relaxed\">\n            Join thousands of international students who have transformed their educational dreams into reality through our revolutionary platform.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n            <Link\n              to=\"/register\"\n              className=\"group bg-[#D0151C] text-white px-10 py-5 rounded-2xl text-xl font-black hover:bg-[#B01218] transition-all duration-300 transform hover:scale-105 shadow-2xl flex items-center justify-center\"\n            >\n              Create Your Profile Now\n              <ArrowRight className=\"ml-3 h-6 w-6 group-hover:translate-x-1 transition-transform\" />\n            </Link>\n            <Link\n              to=\"/scholarships\"\n              className=\"group bg-transparent border-2 border-white text-white px-10 py-5 rounded-2xl text-xl font-black hover:bg-white hover:text-[#05294E] transition-all duration-300 flex items-center justify-center\"\n            >\n              <BookOpen className=\"mr-3 h-6 w-6\" />\n              Explore Scholarships\n            </Link>\n          </div>\n          \n          {/* Trust Indicators */}\n          <div className=\"flex flex-wrap justify-center items-center gap-8 mt-12 text-slate-300\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-5 w-5 mr-2 text-green-400\" />\n              <span className=\"text-sm font-medium\">5,000+ Students</span>\n            </div>\n            <div className=\"flex items-center\">\n              <DollarSign className=\"h-5 w-5 mr-2 text-yellow-400\" />\n              <span className=\"text-sm font-medium\">$50M+ Secured</span>\n            </div>\n            <div className=\"flex items-center\">\n              <Award className=\"h-5 w-5 mr-2 text-[#D0151C]\" />\n              <span className=\"text-sm font-medium\">95% Success Rate</span>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default HowItWorks;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\ScholarshipFeeSuccess.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":44,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2544,2547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2544,2547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst messages = {\r\n  title: 'Scholarship Fee Payment Successful!',\r\n  processed: 'We have received your Scholarship Fee payment. We will contact you soon with the next steps for your scholarship process.',\r\n  sessionId: 'Session ID:',\r\n  confirmation: 'You will receive a confirmation email shortly.',\r\n  goHome: 'Return Home',\r\n  verifying: 'Verifying your payment...',\r\n  pleaseWait: 'Please wait.',\r\n  errorTitle: 'Payment Processing Error',\r\n  errorTryAgain: 'Please try again or contact support.'\r\n};\r\n\r\nconst ScholarshipFeeSuccess: React.FC = () => {\r\n  const [sessionId, setSessionId] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const getSessionIdFromUrl = () => {\r\n      const queryParams = new URLSearchParams(window.location.search);\r\n      return queryParams.get('session_id');\r\n    };\r\n\r\n    const id = getSessionIdFromUrl();\r\n    if (id) {\r\n      setSessionId(id);\r\n      const verifySession = async (sId: string) => {\r\n        try {\r\n          const SUPABASE_PROJECT_URL = 'https://fitpynguasqqutuhzifx.supabase.co';\r\n          const EDGE_FUNCTION_ENDPOINT = `${SUPABASE_PROJECT_URL}/functions/v1/verify-stripe-session`;\r\n\r\n          // Recupera o token JWT do usuário autenticado do localStorage\r\n          let token = null;\r\n          try {\r\n            const raw = localStorage.getItem('sb-fitpynguasqqutuhzifx-auth-token');\r\n            if (raw) {\r\n              const tokenObj = JSON.parse(raw);\r\n              token = tokenObj?.access_token || null;\r\n            }\r\n          } catch (e) {\r\n            token = null;\r\n          }\r\n\r\n          const response = await fetch(EDGE_FUNCTION_ENDPOINT, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...(token && { 'Authorization': `Bearer ${token}` }),\r\n            },\r\n            body: JSON.stringify({ sessionId: sId }),\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) {\r\n            throw new Error(data.error || 'Failed to verify session on the backend.');\r\n          }\r\n          if (data.status === 'complete') {\r\n            // Success\r\n          } else {\r\n            setError(data.message || 'Stripe session is not complete or is invalid.');\r\n          }\r\n        } catch (err: any) {\r\n          setError('Error communicating with the verification server: ' + err.message);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      verifySession(id);\r\n    } else {\r\n      setError('Session ID not found in URL.');\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const handleGoDashboard = () => {\r\n    navigate('/student/dashboard');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div style={styles.container}>\r\n        <h2 style={styles.heading}>{messages.verifying}</h2>\r\n        <p style={styles.text}>{messages.pleaseWait}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div style={styles.container}>\r\n        <h2 style={styles.heading}>{messages.errorTitle}</h2>\r\n        <p style={styles.errorText}>{error}</p>\r\n        <p style={styles.text}>{messages.errorTryAgain}</p>\r\n        <button onClick={handleGoDashboard} style={styles.button}>Go to Dashboard</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <h1 style={styles.heading}>{messages.title}</h1>\r\n      <p style={styles.text}>{messages.processed}</p>\r\n      {sessionId && (\r\n        <p style={styles.sessionId}>\r\n          {messages.sessionId} <code>{sessionId}</code>\r\n        </p>\r\n      )}\r\n      <p style={styles.text}>{messages.confirmation}</p>\r\n      <button onClick={handleGoDashboard} style={styles.button}>Go to Dashboard</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles: { [key: string]: React.CSSProperties } = {\r\n  container: {\r\n    fontFamily: 'Arial, sans-serif',\r\n    textAlign: 'center',\r\n    padding: '40px',\r\n    maxWidth: '600px',\r\n    margin: '50px auto',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n    borderRadius: '8px',\r\n    backgroundColor: '#fff',\r\n    color: '#333',\r\n  },\r\n  heading: {\r\n    color: '#28a745',\r\n    fontSize: '2em',\r\n    marginBottom: '20px',\r\n  },\r\n  text: {\r\n    fontSize: '1.1em',\r\n    lineHeight: '1.6',\r\n    marginBottom: '15px',\r\n  },\r\n  errorText: {\r\n    color: '#dc3545',\r\n    fontSize: '1.1em',\r\n    lineHeight: '1.6',\r\n    marginBottom: '15px',\r\n  },\r\n  sessionId: {\r\n    backgroundColor: '#f0f0f0',\r\n    padding: '10px',\r\n    borderRadius: '4px',\r\n    display: 'inline-block',\r\n    margin: '10px 0',\r\n    fontSize: '0.9em',\r\n    color: '#555',\r\n  },\r\n  button: {\r\n    display: 'inline-block',\r\n    marginTop: '20px',\r\n    padding: '10px 20px',\r\n    backgroundColor: '#007bff',\r\n    color: 'white',\r\n    textDecoration: 'none',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    fontSize: '1em',\r\n    cursor: 'pointer',\r\n    transition: 'background-color 0.3s ease',\r\n  },\r\n};\r\n\r\nexport default ScholarshipFeeSuccess; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\Scholarships.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":2,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":2,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":2,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":2,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":88},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":2,"column":148,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":154},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heart' is defined but never used.","line":2,"column":156,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":161},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'needCPT' is assigned a value but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setNeedCPT' is assigned a value but never used.","line":13,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'visaAssistance' is assigned a value but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setVisaAssistance' is assigned a value but never used.","line":14,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'minScholarshipValue' is assigned a value but never used.","line":19,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'visaOptions' is assigned a value but never used.","line":38,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'deadlineStatus' is assigned a value but never used.","line":273,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":273,"endColumn":35}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Search, DollarSign, Calendar, Award, Zap, Filter, Clock, GraduationCap, MapPin, Star, CheckCircle, Building, Users, ArrowRight, Sparkles, Target, Heart, AlertTriangle } from 'lucide-react';\nimport { useAuth } from '../hooks/useAuth';\nimport { useNavigate } from 'react-router-dom';\nimport { useScholarships } from '../hooks/useScholarships';\nimport type { Scholarship } from '../types';\nimport { StripeCheckout } from '../components/StripeCheckout';\n\nconst Scholarships: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedLevel, setSelectedLevel] = useState('all');\n  const [selectedField, setSelectedField] = useState('all');\n  const [needCPT, setNeedCPT] = useState(false);\n  const [visaAssistance, setVisaAssistance] = useState('all');\n  const { scholarships, loading, error } = useScholarships();\n\n  // Get min and max scholarship values from data\n  const scholarshipValues = scholarships.map((s: Scholarship) => s.amount);\n  const minScholarshipValue = Math.min(...scholarshipValues);\n  const maxScholarshipValue = Math.max(...scholarshipValues);\n\n  // Range state\n  const [maxPrice, setMaxPrice] = useState(() => maxScholarshipValue);\n  const [minPrice, setMinPrice] = useState(0);\n\n  // Sempre que o valor máximo das bolsas mudar, atualize o filtro\n  useEffect(() => {\n    setMaxPrice(maxScholarshipValue);\n  }, [maxScholarshipValue]);\n\n  const levelOptions = [\n    { value: 'all', label: 'All Levels' },\n    { value: 'graduate', label: 'Graduate' },\n    { value: 'doctorate', label: 'Doctorate' },\n    { value: 'undergraduate', label: 'Undergraduate' },\n  ];\n\n  const visaOptions = [\n    { value: 'all', label: 'All Visa Assistance' },\n    { value: 'cos', label: 'COS' },\n    { value: 'initial', label: 'Initial' },\n  ];\n\n  const { isAuthenticated, userProfile } = useAuth();\n  const navigate = useNavigate();\n\n  const isLocked = !userProfile?.has_paid_selection_process_fee;\n\n  const filteredScholarships = scholarships.filter((scholarship: Scholarship) => {\n    const matchesSearch = scholarship.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRange = maxPrice > 0 ? scholarship.amount <= maxPrice : false;\n    const matchesLevel = selectedLevel === 'all' || (scholarship.level && scholarship.level.toLowerCase() === selectedLevel);\n    const matchesField = selectedField === 'all' || (scholarship.field_of_study && scholarship.field_of_study.toLowerCase().includes(selectedField.toLowerCase()));\n    return matchesSearch && matchesRange && matchesLevel && matchesField;\n  });\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getFieldBadgeColor = (field: string | undefined) => {\n    switch (field?.toLowerCase()) {\n      case 'stem':\n        return 'bg-blue-600';\n      case 'business':\n        return 'bg-green-600';\n      case 'engineering':\n        return 'bg-purple-600';\n      default:\n        return 'bg-slate-600';\n    }\n  };\n\n  const getLevelIcon = (level: string) => {\n    switch (level) {\n      case 'undergraduate':\n        return <GraduationCap className=\"h-4 w-4\" />;\n      case 'graduate':\n        return <Users className=\"h-4 w-4\" />;\n      case 'doctorate':\n        return <Award className=\"h-4 w-4\" />;\n      default:\n        return <GraduationCap className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getDaysUntilDeadline = (deadline: string) => {\n    const today = new Date();\n    const deadlineDate = new Date(deadline);\n    const diffTime = deadlineDate.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getDeadlineStatus = (deadline: string) => {\n    const days = getDaysUntilDeadline(deadline);\n    if (days < 0) return { status: 'expired', color: 'text-red-600', bg: 'bg-red-50' };\n    if (days <= 7) return { status: 'urgent', color: 'text-orange-600', bg: 'bg-orange-50' };\n    if (days <= 30) return { status: 'soon', color: 'text-yellow-600', bg: 'bg-yellow-50' };\n    return { status: 'normal', color: 'text-green-600', bg: 'bg-green-50' };\n  };\n\n  const PAGE_SIZE = 20;\n  const [page, setPage] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n\n  // Atualizar totalCount sempre que scholarships mudar\n  useEffect(() => {\n    setTotalCount(filteredScholarships.length);\n  }, [filteredScholarships]);\n\n  // Paginação dos resultados filtrados\n  const paginatedScholarships = filteredScholarships.slice(page * PAGE_SIZE, (page + 1) * PAGE_SIZE);\n\n  return (\n    <div className=\"bg-white min-h-screen\">\n      {/* Header */}\n      <section className=\"bg-gradient-to-br from-[#05294E] via-slate-800 to-[#05294E] text-white py-20 relative overflow-hidden\">\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-20 left-10 w-72 h-72 bg-[#D0151C]/10 rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-20 right-10 w-96 h-96 bg-white/5 rounded-full blur-3xl\"></div>\n        </div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center bg-white/10 backdrop-blur-sm border border-white/20 rounded-full px-6 py-2 mb-8\">\n              <Award className=\"h-4 w-4 mr-2 text-white\" />\n              <span className=\"text-sm font-medium text-white\">Exclusive Opportunities</span>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-6xl font-black mb-6 leading-tight\">\n              <span className=\"text-white\">Scholarship</span>\n              <br />\n              <span className=\"text-[#D0151C]\">Opportunities</span>\n            </h1>\n            \n            <p className=\"text-xl text-slate-200 max-w-3xl mx-auto leading-relaxed\">\n              Discover exclusive funding opportunities crafted specifically for international students pursuing American education excellence.\n            </p>\n            \n            {/* Stats */}\n            <div className=\"flex flex-wrap justify-center items-center gap-8 mt-12 text-slate-300\">\n              <div className=\"flex items-center bg-white/10 backdrop-blur-sm rounded-xl px-4 py-2\">\n                <DollarSign className=\"h-5 w-5 mr-2 text-green-400\" />\n                <span className=\"text-sm font-medium\">$50M+ Available</span>\n              </div>\n              <div className=\"flex items-center bg-white/10 backdrop-blur-sm rounded-xl px-4 py-2\">\n                <Star className=\"h-5 w-5 mr-2 text-yellow-400\" />\n                <span className=\"text-sm font-medium\">95% Success Rate</span>\n              </div>\n              <div className=\"flex items-center bg-white/10 backdrop-blur-sm rounded-xl px-4 py-2\">\n                <CheckCircle className=\"h-5 w-5 mr-2 text-blue-400\" />\n                <span className=\"text-sm font-medium\">150+ Universities</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Modern Filter Bar */}\n        <div className=\"bg-white shadow-lg rounded-2xl border border-slate-200 p-6 mb-10 flex flex-col gap-4 md:flex-row md:items-center md:gap-6\">\n          {/* Search Input */}\n          <div className=\"flex items-center flex-1 min-w-[220px] max-w-sm bg-slate-50 rounded-lg border border-slate-200 px-3 py-2 focus-within:ring-2 focus-within:ring-[#05294E]\">\n            <Search className=\"h-5 w-5 text-slate-400 mr-2\" aria-hidden=\"true\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search scholarships...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full bg-transparent outline-none border-none text-sm text-slate-900 placeholder-slate-400\"\n              aria-label=\"Search scholarships\"\n              disabled={loading}\n            />\n          </div>\n\n          {/* Price Range Filter */}\n          <div className=\"flex items-center gap-2 min-w-[260px]\">\n            <label htmlFor=\"min-price\" className=\"text-xs text-slate-500\">Min</label>\n            <input\n              id=\"min-price\"\n              type=\"number\"\n              min={0}\n              max={maxScholarshipValue}\n              value={minPrice}\n              onChange={e => setMinPrice(Number(e.target.value))}\n              className=\"w-20 px-2 py-1 border border-slate-200 rounded-md text-xs focus:ring-1 focus:ring-[#05294E] focus:border-[#05294E] bg-slate-50\"\n              placeholder=\"$0\"\n              aria-label=\"Minimum scholarship value\"\n              disabled={loading}\n            />\n            <span className=\"text-xs text-slate-400\">-</span>\n            <label htmlFor=\"max-price\" className=\"text-xs text-slate-500\">Max</label>\n            <input\n              id=\"max-price\"\n              type=\"number\"\n              min={0}\n              max={maxScholarshipValue}\n              value={maxPrice}\n              onChange={e => setMaxPrice(Number(e.target.value))}\n              className=\"w-20 px-2 py-1 border border-slate-200 rounded-md text-xs focus:ring-1 focus:ring-[#05294E] focus:border-[#05294E] bg-slate-50\"\n              placeholder={formatAmount(maxScholarshipValue)}\n              aria-label=\"Maximum scholarship value\"\n              disabled={loading}\n            />\n          </div>\n\n          {/* Dropdown Filters */}\n          <div className=\"flex items-center gap-2 min-w-[120px]\">\n            <select\n              value={selectedLevel}\n              onChange={(e) => setSelectedLevel(e.target.value)}\n              className=\"px-3 py-2 border border-slate-200 rounded-lg focus:ring-1 focus:ring-[#05294E] focus:border-[#05294E] text-xs bg-slate-50 min-w-[110px]\"\n              aria-label=\"Level\"\n              disabled={loading}\n            >\n              {levelOptions.map(option => (\n                <option key={option.value} value={option.value}>{option.label}</option>\n              ))}\n            </select>\n            <select\n              value={selectedField}\n              onChange={(e) => setSelectedField(e.target.value)}\n              className=\"px-3 py-2 border border-slate-200 rounded-lg focus:ring-1 focus:ring-[#05294E] focus:border-[#05294E] text-xs bg-slate-50 min-w-[110px]\"\n              aria-label=\"Field\"\n              disabled={loading}\n            >\n              <option value=\"all\">All Fields</option>\n              <option value=\"stem\">STEM</option>\n              <option value=\"business\">Business</option>\n              <option value=\"engineering\">Engineering</option>\n              <option value=\"any\">Any Field</option>\n            </select>\n          </div>\n\n          {/* Results Count */}\n          <div className=\"flex items-center justify-end flex-1 min-w-[120px]\">\n            <span className=\"text-xs text-slate-600 bg-slate-100 rounded px-3 py-1 font-medium\">\n              {loading ? 'Loading...' : `${filteredScholarships.length} scholarships found`}\n            </span>\n          </div>\n        </div>\n\n        {/* Scholarships Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {loading ? (\n            // Skeleton cards durante o carregamento\n            Array.from({ length: PAGE_SIZE }).map((_, i) => (\n              <div key={i} className=\"bg-white rounded-3xl shadow-lg border border-slate-200 p-6 animate-pulse\">\n                <div className=\"h-6 bg-slate-200 rounded w-3/4 mb-4\"></div>\n                <div className=\"h-4 bg-slate-200 rounded w-1/2 mb-8\"></div>\n                <div className=\"space-y-3\">\n                  <div className=\"h-10 bg-slate-200 rounded\"></div>\n                  <div className=\"h-10 bg-slate-200 rounded\"></div>\n                  <div className=\"h-10 bg-slate-200 rounded\"></div>\n                </div>\n                <div className=\"mt-6 h-12 bg-slate-200 rounded-xl\"></div>\n              </div>\n            ))\n          ) : error ? (\n            <div className=\"col-span-full text-center text-slate-500 py-12\">\n              <AlertTriangle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n              <p>{error}</p>\n            </div>\n          ) : paginatedScholarships.length === 0 ? (\n            <div className=\"col-span-full text-center text-slate-500 py-12\">No scholarships found.</div>\n          ) : (\n            paginatedScholarships.map((scholarship: Scholarship) => {\n              const deadlineStatus = getDeadlineStatus(scholarship.deadline);\n              \n              return (\n                <div key={scholarship.id} className=\"group relative bg-white rounded-3xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-slate-200 hover:-translate-y-2\">\n                  {/* Card Content */}\n                  <div className=\"p-6\">\n                    {/* Title and Badges */}\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold text-slate-900 mb-3 leading-tight line-clamp-2 group-hover:text-[#05294E] transition-colors\">\n                          {scholarship.title}\n                        </h3>\n                        \n                        {/* University */}\n                        <div className=\"flex items-center text-slate-600 mb-4\">\n                          <Building className=\"h-4 w-4 mr-2 text-[#05294E]\" />\n                          <span className=\"text-xs font-semibold mr-1\">University:</span>\n                          <span className={`text-sm select-none ${isLocked ? 'blur-sm' : ''}`}>{scholarship.universities?.name || 'Unknown University'}</span>\n                        </div>\n                      </div>\n                      \n                      {/* Exclusive Badge */}\n                      {scholarship.is_exclusive && (\n                        <span className=\"bg-[#D0151C] text-white px-3 py-1 rounded-xl text-xs font-bold shadow-lg\">\n                          Exclusive\n                        </span>\n                      )}\n                    </div>\n\n                    {/* Financial Values Section */}\n                    <div className=\"mb-4\">\n                      <div className=\"bg-slate-50 rounded-xl p-3 border border-slate-200 flex flex-col gap-1\">\n                        <div className=\"flex items-center justify-between text-xs\">\n                          <span className=\"font-semibold text-slate-700\">Original Annual Value</span>\n                          <span className=\"font-bold text-blue-700\">{formatAmount(scholarship.original_annual_value ?? 0)}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs\">\n                          <span className=\"font-semibold text-slate-700\">Value Per Credit</span>\n                          <span className=\"font-bold text-blue-700\">{formatAmount(scholarship.original_value_per_credit ?? 0)}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs\">\n                          <span className=\"font-semibold text-slate-700\">Annual Value With Scholarship</span>\n                          <span className=\"font-bold text-green-700\">{formatAmount(scholarship.annual_value_with_scholarship ?? 0)}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Details */}\n                    <div className=\"space-y-2 mb-6\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-slate-500\">Level</span>\n                        <div className={`flex items-center ${isLocked ? 'blur-sm select-none' : ''}`}>\n                          {getLevelIcon(scholarship.level || 'undergraduate')}\n                          <span className=\"ml-1 capitalize text-slate-700\">{scholarship.level}</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-slate-500\">Field</span>\n                        <span className={`px-2 py-1 rounded-lg text-xs font-medium text-white ${getFieldBadgeColor(scholarship.field_of_study)} ${isLocked ? 'blur-sm select-none' : ''}`}>\n                          {scholarship.field_of_study || 'Any Field'}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-slate-500\">Deadline</span>\n                        <div className={`flex items-center ${isLocked ? 'blur-sm select-none' : ''}`}>\n                          <Clock className={`h-3 w-3 mr-1 ${getDeadlineStatus(scholarship.deadline).color}`} />\n                          <span className=\"text-slate-700\">{getDaysUntilDeadline(scholarship.deadline)} days left</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Action Button */}\n                  <div className=\"px-6 pb-6\">\n                    <button\n                      className={`w-full bg-gradient-to-r from-[#05294E] to-slate-700 text-white py-4 px-6 rounded-2xl font-bold text-sm uppercase tracking-wide flex items-center justify-center group-hover:shadow-xl transform group-hover:scale-105 transition-all duration-300 ${isLocked ? 'opacity-60 cursor-not-allowed' : 'hover:from-[#05294E]/90 hover:to-slate-600'}`}\n                      onClick={() => {\n                        if (isLocked) return;\n                        if (!isAuthenticated) {\n                          navigate('/login');\n                        } else {\n                          alert('Application feature coming soon!');\n                        }\n                      }}\n                      disabled={isLocked}\n                    >\n                      <Award className=\"h-4 w-4 mr-2\" />\n                      {isLocked ? 'Unlock full details by paying the selection process fee.' : 'Apply Now'}\n                      {!isLocked && <ArrowRight className=\"h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform\" />}\n                    </button>\n                  </div>\n                  \n                  {/* Overlay for locked cards */}\n                  {isLocked && (\n                    <div className=\"absolute inset-0 bg-white/70 flex flex-col items-center justify-center z-10\">\n                      <span className=\"text-[#05294E] font-bold text-lg mb-2\">Unlock full details</span>\n                      <span className=\"text-slate-600 text-sm text-center mb-4\">Pay the selection process fee to view all scholarship information and apply.</span>\n                      {/* Botão de pagamento */}\n                      {!isAuthenticated ? (\n                        <button\n                          className=\"bg-[#D0151C] text-white px-6 py-3 rounded-xl hover:bg-[#B01218] transition-all duration-300 font-bold mt-2\"\n                          onClick={() => navigate('/login')}\n                        >\n                          Sign in to pay selection fee\n                        </button>\n                      ) : (\n                        <StripeCheckout\n                          productId=\"SELECTION_PROCESS\"\n                          feeType=\"application_fee\"\n                          buttonText=\"Pay Selection Fee to Unlock\"\n                          className=\"mt-2\"\n                          onSuccess={() => {}}\n                          onError={(err) => alert(err)}\n                        />\n                      )}\n                    </div>\n                  )}\n                  {/* Hover Effect Overlay */}\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-[#05294E]/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\"></div>\n                </div>\n              );\n            })\n          )}\n        </div>\n\n        {/* No Results */}\n        {filteredScholarships.length === 0 && (\n          <div className=\"text-center py-20\">\n            <div className=\"bg-gradient-to-br from-slate-100 to-slate-200 w-32 h-32 rounded-full flex items-center justify-center mx-auto mb-8 shadow-lg\">\n              <Award className=\"h-16 w-16 text-slate-400\" />\n            </div>\n            <h3 className=\"text-3xl font-bold text-slate-600 mb-4\">No scholarships found</h3>\n            <p className=\"text-slate-500 text-lg mb-8\">Try adjusting your search criteria to discover more opportunities</p>\n            <button \n              onClick={() => {\n                setSearchTerm('');\n                setSelectedLevel('all');\n                setSelectedField('all');\n                setMaxPrice(() => maxScholarshipValue);\n                setMinPrice(0);\n              }}\n              className=\"bg-[#05294E] text-white px-8 py-3 rounded-2xl hover:bg-[#05294E]/90 transition-all duration-300 font-bold\"\n            >\n              Clear Filters\n            </button>\n          </div>\n        )}\n\n        {/* Call to Action */}\n        <div className=\"mt-20 bg-gradient-to-br from-[#05294E] via-slate-800 to-[#05294E] rounded-3xl p-12 text-white text-center relative overflow-hidden shadow-2xl\">\n          <div className=\"absolute inset-0\">\n            <div className=\"absolute top-0 left-0 w-64 h-64 bg-white/5 rounded-full blur-3xl\"></div>\n            <div className=\"absolute bottom-0 right-0 w-96 h-96 bg-[#D0151C]/10 rounded-full blur-3xl\"></div>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"inline-flex items-center bg-white/10 backdrop-blur-sm border border-white/20 rounded-full px-6 py-2 mb-6\">\n              <Sparkles className=\"h-4 w-4 mr-2\" />\n              <span className=\"text-sm font-medium\">Ready to Start?</span>\n            </div>\n            \n            <h2 className=\"text-4xl md:text-5xl font-black mb-6 leading-tight\">\n              Ready to <span className=\"text-[#D0151C]\">Transform</span> Your Future?\n            </h2>\n            <p className=\"text-xl text-slate-200 mb-10 max-w-3xl mx-auto leading-relaxed\">\n              Join thousands of international students who have secured their educational dreams through our exclusive scholarship opportunities.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n              <button \n                onClick={() => navigate('/register')}\n                className=\"bg-[#D0151C] text-white px-10 py-5 rounded-2xl hover:bg-[#B01218] transition-all duration-300 font-bold text-lg shadow-2xl transform hover:scale-105 flex items-center justify-center\"\n              >\n                Get Started Today\n                <ArrowRight className=\"ml-3 h-5 w-5\" />\n              </button>\n              <button \n                onClick={() => navigate('/how-it-works')}\n                className=\"bg-white/10 backdrop-blur-sm border border-white/20 text-white px-10 py-5 rounded-2xl hover:bg-white/20 transition-all duration-300 font-bold text-lg flex items-center justify-center\"\n              >\n                <Award className=\"mr-3 h-5 w-5\" />\n                Learn More\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Paginação */}\n        <div className=\"flex justify-center items-center gap-4 mt-10\">\n          <button\n            className=\"px-4 py-2 rounded bg-slate-200 text-slate-700 font-semibold disabled:opacity-50\"\n            onClick={() => setPage((p) => Math.max(0, p - 1))}\n            disabled={page === 0}\n          >\n            Previous\n          </button>\n          <span className=\"text-slate-600 font-medium\">\n            Page {page + 1} of {Math.ceil(totalCount / PAGE_SIZE) || 1}\n          </span>\n          <button\n            className=\"px-4 py-2 rounded bg-[#05294E] text-white font-semibold disabled:opacity-50\"\n            onClick={() => setPage((p) => p + 1)}\n            disabled={(page + 1) * PAGE_SIZE >= totalCount}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Scholarships;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\SchoolDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":3,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":3,"column":134,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":137},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkUserStatus' and 'loadDashboardData'. Either include them or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [checkUserStatus, loadDashboardData, user]","fix":{"range":[979,985],"text":"[checkUserStatus, loadDashboardData, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":279,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11357,11360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11357,11360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Building, Users, DollarSign, Award, Plus, Edit, Trash2, Eye, Calendar, CheckCircle, Clock, AlertCircle, Settings, FileText, Zap } from 'lucide-react';\nimport { supabase } from '../lib/supabase';\nimport type { University, Scholarship } from '../types';\nimport { useAuth } from '../hooks/useAuth';\n\nconst SchoolDashboard: React.FC = () => {\n  const [university, setUniversity] = useState<University | null>(null);\n  const [scholarships, setScholarships] = useState<Scholarship[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'overview' | 'scholarships' | 'profile'>('overview');\n  const { user } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (user) {\n      // Check if user should be redirected to terms or profile setup\n      checkUserStatus();\n      loadDashboardData();\n    }\n  }, [user]);\n\n  const checkUserStatus = async () => {\n    if (!user || user.role !== 'school') return;\n\n    try {\n      const { data: university, error } = await supabase\n        .from('universities')\n        .select('terms_accepted, profile_completed')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        console.error('Error checking user status:', error);\n        return;\n      }\n\n      if (!university || !university.terms_accepted) {\n        navigate('/school/termsandconditions');\n        return;\n      }\n\n      if (!university.profile_completed) {\n        navigate('/school/setup-profile');\n        return;\n      }\n    } catch (error) {\n      console.error('Error checking user status:', error);\n    }\n  };\n\n  const loadDashboardData = async () => {\n    if (!user) return;\n\n    try {\n      // Load university data\n      const { data: universityData, error: universityError } = await supabase\n        .from('universities')\n        .select('*')\n        .eq('user_id', user.id)\n        .maybeSingle();\n\n      if (universityError) throw universityError;\n      setUniversity(universityData);\n\n      // Load scholarships only if university exists\n      if (universityData) {\n        const { data: scholarshipsData, error: scholarshipsError } = await supabase\n          .from('scholarships')\n          .select('*')\n          .eq('university_id', universityData.id);\n\n        if (scholarshipsError) throw scholarshipsError;\n        setScholarships(scholarshipsData || []);\n      }\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteScholarship = async (scholarshipId: string) => {\n    if (!confirm('Are you sure you want to delete this scholarship?')) return;\n\n    try {\n      const { error } = await supabase\n        .from('scholarships')\n        .delete()\n        .eq('id', scholarshipId);\n\n      if (error) throw error;\n      \n      setScholarships(prev => prev.filter(s => s.id !== scholarshipId));\n    } catch (error) {\n      console.error('Error deleting scholarship:', error);\n      alert('Error deleting scholarship. Please try again.');\n    }\n  };\n\n  const toggleScholarshipStatus = async (scholarshipId: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from('scholarships')\n        .update({ is_active: !currentStatus })\n        .eq('id', scholarshipId);\n\n      if (error) throw error;\n      \n      setScholarships(prev => prev.map(s => \n        s.id === scholarshipId ? { ...s, is_active: !currentStatus } : s\n      ));\n    } catch (error) {\n      console.error('Error updating scholarship status:', error);\n      alert('Error updating scholarship. Please try again.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#05294E]\"></div>\n      </div>\n    );\n  }\n\n  // Get stats even without university profile\n  const stats = {\n    totalScholarships: scholarships.length,\n    activeScholarships: scholarships.filter(s => s.is_active).length,\n    totalFunding: scholarships.reduce((sum, s) => sum + Number(s.amount), 0),\n    avgAmount: scholarships.length > 0 ? scholarships.reduce((sum, s) => sum + Number(s.amount), 0) / scholarships.length : 0\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                {university?.name || user?.name || 'University Dashboard'}\n              </h1>\n              {university?.location && (\n                <p className=\"text-gray-600\">{university.location}</p>\n              )}\n              \n              <div className=\"flex items-center mt-2 space-x-4\">\n                {university ? (\n                  <>\n                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                      university.is_approved \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-yellow-100 text-yellow-800'\n                    }`}>\n                      {university.is_approved ? (\n                        <>\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          Approved\n                        </>\n                      ) : (\n                        <>\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          Pending Approval\n                        </>\n                      )}\n                    </span>\n                    {!university.profile_completed && (\n                      <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                        <AlertCircle className=\"h-3 w-3 mr-1\" />\n                        Profile Incomplete\n                      </span>\n                    )}\n                  </>\n                ) : (\n                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                    <Settings className=\"h-3 w-3 mr-1\" />\n                    Profile Setup Required\n                  </span>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              {!university?.profile_completed ? (\n                <Link\n                  to=\"/school/setup-profile\"\n                  className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors flex items-center\"\n                >\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Complete Profile\n                </Link>\n              ) : (\n                <Link\n                  to=\"/school/scholarship/new\"\n                  className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors flex items-center\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  New Scholarship\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Show welcome message if no university profile or profile not completed */}\n        {(!university || !university.profile_completed) && (\n          <div className=\"bg-white rounded-xl shadow-lg border border-gray-200 p-8 mb-8\">\n            <div className=\"text-center\">\n              <div className=\"bg-[#05294E] w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Building className=\"h-8 w-8 text-white\" />\n              </div>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                {!university ? 'Welcome to Matrícula USA!' : 'Complete Your Profile'}\n              </h2>\n              <p className=\"text-gray-600 mb-6 max-w-2xl mx-auto\">\n                {!university \n                  ? 'Complete your university profile to start attracting international students and manage scholarship opportunities on our platform.'\n                  : 'Finish setting up your university profile to start creating scholarship opportunities for international students.'\n                }\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                <div className=\"bg-gray-50 p-6 rounded-lg text-center\">\n                  <FileText className=\"h-8 w-8 text-[#05294E] mx-auto mb-3\" />\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Complete Profile</h3>\n                  <p className=\"text-sm text-gray-600\">Add your university information and get approved</p>\n                </div>\n                <div className=\"bg-gray-50 p-6 rounded-lg text-center\">\n                  <Award className=\"h-8 w-8 text-[#D0151C] mx-auto mb-3\" />\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Create Scholarships</h3>\n                  <p className=\"text-sm text-gray-600\">Offer exclusive scholarships to international students</p>\n                </div>\n                <div className=\"bg-gray-50 p-6 rounded-lg text-center\">\n                  <Users className=\"h-8 w-8 text-green-600 mx-auto mb-3\" />\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Connect with Students</h3>\n                  <p className=\"text-sm text-gray-600\">Reach qualified international applicants</p>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Link\n                  to=\"/school/setup-profile\"\n                  className=\"bg-[#05294E] text-white px-6 py-3 rounded-lg hover:bg-[#05294E]/90 transition-colors font-medium flex items-center justify-center\"\n                >\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  {!university ? 'Setup University Profile' : 'Complete Profile'}\n                </Link>\n                {!university && (\n                  <Link\n                    to=\"/school/termsandconditions\"\n                    className=\"bg-gray-200 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-300 transition-colors font-medium flex items-center justify-center\"\n                  >\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Review Terms & Conditions\n                  </Link>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Navigation Tabs */}\n        <div className=\"border-b border-gray-200 mb-8\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {[\n              { id: 'overview', label: 'Overview', icon: Building },\n              { id: 'scholarships', label: 'Scholarships', icon: Award },\n              { id: 'profile', label: 'Profile', icon: Edit }\n            ].map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as any)}\n                  className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center transition-colors ${\n                    activeTab === tab.id\n                      ? 'border-[#05294E] text-[#05294E]'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <Icon className=\"h-4 w-4 mr-2\" />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Overview Tab */}\n        {activeTab === 'overview' && (\n          <div className=\"space-y-8\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-[#05294E]/10 p-3 rounded-lg\">\n                    <Award className=\"h-6 w-6 text-[#05294E]\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Total Scholarships</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.totalScholarships}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-green-100 p-3 rounded-lg\">\n                    <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Active Scholarships</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.activeScholarships}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-blue-100 p-3 rounded-lg\">\n                    <DollarSign className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Total Funding</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      ${stats.totalFunding.toLocaleString()}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-purple-100 p-3 rounded-lg\">\n                    <Users className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Avg. Amount</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      ${Math.round(stats.avgAmount).toLocaleString()}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Recent Scholarships */}\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Recent Scholarships</h3>\n                  {university?.profile_completed && (\n                    <Link\n                      to=\"/school/scholarship/new\"\n                      className=\"text-[#05294E] hover:text-[#05294E]/80 font-medium text-sm\"\n                    >\n                      Create New\n                    </Link>\n                  )}\n                </div>\n              </div>\n              <div className=\"p-6\">\n                {!university?.profile_completed ? (\n                  <div className=\"text-center py-12\">\n                    <Settings className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Complete your profile first</h3>\n                    <p className=\"text-gray-500 mb-4\">Set up your university profile to start creating scholarships</p>\n                    <Link\n                      to=\"/school/setup-profile\"\n                      className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors\"\n                    >\n                      Complete Profile\n                    </Link>\n                  </div>\n                ) : scholarships.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Award className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No scholarships yet</h3>\n                    <p className=\"text-gray-500 mb-4\">Start by creating your first scholarship opportunity</p>\n                    <Link\n                      to=\"/school/scholarship/new\"\n                      className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors\"\n                    >\n                      Create Scholarship\n                    </Link>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {scholarships.slice(0, 5).map((scholarship) => (\n                      <div key={scholarship.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900\">{scholarship.title}</h4>\n                          <div className=\"flex items-center space-x-4 mt-1 text-sm text-gray-500\">\n                            <span>${scholarship.amount.toLocaleString()}</span>\n                            <span>•</span>\n                            <span>Due: {new Date(scholarship.deadline).toLocaleDateString()}</span>\n                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                              scholarship.is_active \n                                ? 'bg-green-100 text-green-800' \n                                : 'bg-gray-100 text-gray-800'\n                            }`}>\n                              {scholarship.is_active ? 'Active' : 'Inactive'}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <button className=\"text-gray-400 hover:text-gray-600\">\n                            <Eye className=\"h-4 w-4\" />\n                          </button>\n                          <button className=\"text-gray-400 hover:text-gray-600\">\n                            <Edit className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Scholarships Tab */}\n        {activeTab === 'scholarships' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Manage Scholarships</h2>\n              {university?.profile_completed && (\n                <Link\n                  to=\"/school/scholarship/new\"\n                  className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors flex items-center\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  New Scholarship\n                </Link>\n              )}\n            </div>\n\n            {!university?.profile_completed ? (\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n                <Settings className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-medium text-gray-900 mb-2\">Profile setup required</h3>\n                <p className=\"text-gray-500 mb-6\">Complete your university profile to start creating scholarships</p>\n                <Link\n                  to=\"/school/setup-profile\"\n                  className=\"bg-[#05294E] text-white px-6 py-3 rounded-lg hover:bg-[#05294E]/90 transition-colors\"\n                >\n                  Complete University Profile\n                </Link>\n              </div>\n            ) : scholarships.length === 0 ? (\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n                <Award className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-medium text-gray-900 mb-2\">No scholarships created yet</h3>\n                <p className=\"text-gray-500 mb-6\">Start attracting international students by creating scholarship opportunities</p>\n                <Link\n                  to=\"/school/scholarship/new\"\n                  className=\"bg-[#05294E] text-white px-6 py-3 rounded-lg hover:bg-[#05294E]/90 transition-colors\"\n                >\n                  Create Your First Scholarship\n                </Link>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {scholarships.map((scholarship) => (\n                  <div key={scholarship.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\">\n                    <div className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <h3 className=\"font-semibold text-gray-900 line-clamp-2\">{scholarship.title}</h3>\n                        <div className=\"flex items-center space-x-1\">\n                          <button\n                            onClick={() => toggleScholarshipStatus(scholarship.id, scholarship.is_active)}\n                            className={`p-1 rounded transition-colors ${\n                              scholarship.is_active ? 'text-green-600 hover:bg-green-50' : 'text-gray-400 hover:bg-gray-50'\n                            }`}\n                            title={scholarship.is_active ? 'Deactivate' : 'Activate'}\n                          >\n                            <CheckCircle className=\"h-4 w-4\" />\n                          </button>\n                          <button className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-50 rounded transition-colors\">\n                            <Edit className=\"h-4 w-4\" />\n                          </button>\n                          <button\n                            onClick={() => handleDeleteScholarship(scholarship.id)}\n                            className=\"p-1 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded transition-colors\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-500\">Amount</span>\n                          <span className=\"font-semibold text-green-600\">${scholarship.amount.toLocaleString()}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-500\">Deadline</span>\n                          <span className=\"text-sm text-gray-900\">\n                            {new Date(scholarship.deadline).toLocaleDateString()}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-500\">Level</span>\n                          <span className=\"text-sm text-gray-900 capitalize\">{scholarship.level}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-500\">Status</span>\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                            scholarship.is_active \n                              ? 'bg-green-100 text-green-800' \n                              : 'bg-gray-100 text-gray-800'\n                          }`}>\n                            {scholarship.is_active ? 'Active' : 'Inactive'}\n                          </span>\n                        </div>\n                        \n                        {scholarship.is_exclusive && (\n                          <div className=\"flex items-center text-sm text-[#D0151C]\">\n                            <Award className=\"h-4 w-4 mr-1\" />\n                            Exclusive Scholarship\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Profile Tab */}\n        {activeTab === 'profile' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">University Profile</h2>\n              {university ? (\n                <Link\n                  to=\"/school/edit-profile\"\n                  className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors flex items-center\"\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Profile\n                </Link>\n              ) : (\n                <Link\n                  to=\"/school/setup-profile\"\n                  className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors flex items-center\"\n                >\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Setup Profile\n                </Link>\n              )}\n            </div>\n\n            {!university ? (\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n                <Building className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-medium text-gray-900 mb-2\">No university profile found</h3>\n                <p className=\"text-gray-500 mb-6\">\n                  Create your university profile to showcase your institution to international students\n                </p>\n                <Link\n                  to=\"/school/setup-profile\"\n                  className=\"bg-[#05294E] text-white px-6 py-3 rounded-lg hover:bg-[#05294E]/90 transition-colors\"\n                >\n                  Create University Profile\n                </Link>\n              </div>\n            ) : (\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Basic Information</h3>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">University Name</label>\n                        <p className=\"text-gray-900\">{university.name}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Website</label>\n                        <a href={university.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-[#05294E] hover:underline block\">\n                          {university.website}\n                        </a>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Location</label>\n                        <p className=\"text-gray-900\">{university.location}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Contact Information</h3>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Phone</label>\n                        <p className=\"text-gray-900\">{university.contact?.phone}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Email</label>\n                        <p className=\"text-gray-900\">{university.contact?.email}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Admissions Email</label>\n                        <p className=\"text-gray-900\">{university.contact?.admissionsEmail}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {university.description && (\n                  <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Description</h3>\n                    <p className=\"text-gray-700 leading-relaxed\">{university.description}</p>\n                  </div>\n                )}\n\n                {university.programs && university.programs.length > 0 && (\n                  <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Academic Programs</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {university.programs.map((program: string, index: number) => (\n                        <span\n                          key={index}\n                          className=\"inline-flex items-center px-3 py-1 rounded-full text-sm bg-gray-100 text-gray-700\"\n                        >\n                          {program}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SchoolDashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\SchoolDashboard\\NewScholarship.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MAX_IMAGE_SIZE_MB' is assigned a value but never used.","line":19,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ALLOWED_IMAGE_TYPES' is assigned a value but never used.","line":20,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":26},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUniversityId'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [user, navigate, fetchUniversityId]","fix":{"range":[1504,1520],"text":"[user, navigate, fetchUniversityId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2427,2430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2427,2430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7635,7638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7635,7638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Award, \n  DollarSign, \n  Calendar, \n  CheckCircle, \n  AlertTriangle, \n  Save,\n  ArrowLeft,\n  BookOpen,\n  Target,\n  Clock,\n  Info\n} from 'lucide-react';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../hooks/useAuth';\n\nconst MAX_IMAGE_SIZE_MB = 2;\nconst ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/webp'];\n\nconst NewScholarship: React.FC = () => {\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  const [universityId, setUniversityId] = useState<string | null>(null);\n  // const [imageFile, setImageFile] = useState<File | null>(null);\n  // const [imagePreview, setImagePreview] = useState<string | null>(null);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    amount: '',\n    deadline: '',\n    requirements: [''],\n    field_of_study: '',\n    level: 'undergraduate',\n    eligibility: [''],\n    benefits: [''],\n    is_exclusive: false,\n    is_active: true,\n    original_annual_value: '',\n    original_value_per_credit: '',\n    annual_value_with_scholarship: '',\n  });\n\n  useEffect(() => {\n    // Check if user is authenticated and has a university\n    if (user) {\n      fetchUniversityId();\n    } else {\n      navigate('/login');\n    }\n  }, [user, navigate]);\n\n  const fetchUniversityId = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('universities')\n        .select('id, profile_completed, is_approved')\n        .eq('user_id', user?.id)\n        .single();\n\n      if (error) throw error;\n\n      if (!data) {\n        setError('University profile not found. Please complete your profile first.');\n        return;\n      }\n\n      if (!data.profile_completed) {\n        setError('Please complete your university profile before creating scholarships.');\n        setTimeout(() => {\n          navigate('/school/dashboard/profile');\n        }, 3000);\n        return;\n      }\n\n      if (!data.is_approved) {\n        setError('Your university profile is pending approval. You can create scholarships, but they will not be visible to students until your profile is approved.');\n      }\n\n      setUniversityId(data.id);\n    } catch (error: any) {\n      console.error('Error fetching university:', error);\n      setError('Error loading university data. Please try again later.');\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: checked\n    }));\n  };\n\n  const handleArrayInputChange = (index: number, field: 'requirements' | 'eligibility' | 'benefits', value: string) => {\n    setFormData(prev => {\n      const newArray = [...prev[field]];\n      newArray[index] = value;\n      return {\n        ...prev,\n        [field]: newArray\n      };\n    });\n  };\n\n  const addArrayItem = (field: 'requirements' | 'eligibility' | 'benefits') => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: [...prev[field], '']\n    }));\n  };\n\n  const removeArrayItem = (index: number, field: 'requirements' | 'eligibility' | 'benefits') => {\n    setFormData(prev => {\n      const newArray = [...prev[field]];\n      newArray.splice(index, 1);\n      return {\n        ...prev,\n        [field]: newArray.length ? newArray : ['']\n      };\n    });\n  };\n\n  // Image upload handler\n  // const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //   const file = e.target.files?.[0];\n  //   if (!file) return;\n  //   if (!ALLOWED_IMAGE_TYPES.includes(file.type)) {\n  //     setError('Only JPG, PNG, or WEBP images are allowed.');\n  //     return;\n  //   }\n  //   if (file.size > MAX_IMAGE_SIZE_MB * 1024 * 1024) {\n  //     setError('Image size must be less than 2MB.');\n  //     return;\n  //   }\n  //   setImageFile(file);\n  //   setImagePreview(URL.createObjectURL(file));\n  //   setError(null);\n  // };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!universityId) {\n      setError('University profile not found. Please complete your profile first.');\n      return;\n    }\n\n    // Validate form\n    if (!formData.title.trim()) {\n      setError('Scholarship title is required');\n      return;\n    }\n\n    if (!formData.original_annual_value.trim() || isNaN(Number(formData.original_annual_value))) {\n      setError('Valid original annual value is required');\n      return;\n    }\n    if (!formData.original_value_per_credit.trim() || isNaN(Number(formData.original_value_per_credit))) {\n      setError('Valid value per credit is required');\n      return;\n    }\n    if (!formData.annual_value_with_scholarship.trim() || isNaN(Number(formData.annual_value_with_scholarship))) {\n      setError('Valid annual value with scholarship is required');\n      return;\n    }\n\n    if (!formData.deadline.trim()) {\n      setError('Application deadline is required');\n      return;\n    }\n\n    // if (!imageFile) {\n    //   setError('Scholarship image is required.');\n    //   return;\n    // }\n\n    // Filter out empty array items\n    const requirements = formData.requirements.filter(item => item.trim());\n    const eligibility = formData.eligibility.filter(item => item.trim());\n    const benefits = formData.benefits.filter(item => item.trim());\n\n    if (requirements.length === 0) {\n      setError('At least one requirement is required');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // --- IMAGEM DESABILITADA TEMPORARIAMENTE ---\n      // const fileExt = imageFile.name.split('.').pop();\n      // const fileName = `scholarship_${Date.now()}.${fileExt}`;\n      // const { data: uploadData, error: uploadError } = await supabase.storage\n      //   .from('scholarship-images')\n      //   .upload(fileName, imageFile, { upsert: false });\n      // if (uploadError) throw uploadError;\n      // const { data: publicUrlData } = supabase.storage\n      //   .from('scholarship-images')\n      //   .getPublicUrl(fileName);\n      // const imageUrl = publicUrlData?.publicUrl;\n      // if (!imageUrl) throw new Error('Could not get image URL');\n      // --- FIM IMAGEM ---\n      // 3. Prepare data for submission\n      const scholarshipData = {\n        title: formData.title,\n        description: formData.description,\n        amount: Number(formData.amount),\n        deadline: formData.deadline,\n        requirements,\n        field_of_study: formData.field_of_study,\n        level: formData.level,\n        eligibility,\n        benefits,\n        is_exclusive: formData.is_exclusive,\n        is_active: formData.is_active,\n        university_id: universityId,\n        image_url: null, // Imagem desabilitada\n        original_annual_value: Number(formData.original_annual_value),\n        original_value_per_credit: Number(formData.original_value_per_credit),\n        annual_value_with_scholarship: Number(formData.annual_value_with_scholarship),\n      };\n      // 4. Submit to Supabase\n      const { error: submitError } = await supabase\n        .from('scholarships')\n        .insert(scholarshipData);\n      if (submitError) throw submitError;\n      setSuccess(true);\n      navigate('/school/dashboard/scholarships');\n    } catch (error: any) {\n      console.error('Error creating scholarship:', error);\n      setError(`Error creating scholarship: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <button\n            onClick={() => navigate('/school/dashboard/scholarships')}\n            className=\"flex items-center text-slate-600 hover:text-[#05294E] mb-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Scholarships\n          </button>\n          \n          <h1 className=\"text-3xl font-bold text-slate-900\">Create New Scholarship</h1>\n          <p className=\"text-slate-600 mt-2\">\n            Define a new scholarship opportunity for international students\n          </p>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-xl p-4 mb-6\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-5 w-5 text-red-500 mr-3 flex-shrink-0\" />\n              <p className=\"text-red-700\">{error}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Success Message */}\n        {success && (\n          <div className=\"bg-green-50 border border-green-200 rounded-xl p-4 mb-6\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"h-5 w-5 text-green-500 mr-3 flex-shrink-0\" />\n              <p className=\"text-green-700\">Scholarship created successfully! Redirecting...</p>\n            </div>\n          </div>\n        )}\n\n        {/* Scholarship Form */}\n        <form onSubmit={handleSubmit} className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8\">\n          <div className=\"space-y-8\">\n            {/* Image Upload Section */}\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900 mb-6 flex items-center\">\n                <Award className=\"h-5 w-5 mr-2 text-[#05294E]\" />\n                Scholarship Image <span className=\"text-slate-400 ml-2\">(optional)</span>\n              </h2>\n              <div className=\"flex flex-col items-start gap-4\">\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Upload Image (JPG, PNG, WEBP, max 2MB)</label>\n                <input\n                  type=\"file\"\n                  accept=\"image/jpeg,image/png,image/webp\"\n                  // onChange={handleImageChange}\n                  // required\n                  disabled\n                  className=\"block w-full text-sm text-slate-700 file:mr-4 file:py-2 file:px-4 file:rounded-xl file:border-0 file:text-sm file:font-semibold file:bg-[#05294E] file:text-white opacity-50 cursor-not-allowed\"\n                />\n                {/* {imagePreview && (\n                  <img src={imagePreview} alt=\"Preview\" className=\"mt-2 rounded-xl border border-slate-200 max-h-48\" />\n                )} */}\n              </div>\n            </div>\n\n            {/* Basic Information */}\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900 mb-6 flex items-center\">\n                <Award className=\"h-5 w-5 mr-2 text-[#05294E]\" />\n                Basic Information\n              </h2>\n              \n              <div className=\"grid grid-cols-1 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Scholarship Title *\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"title\"\n                    value={formData.title}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                    placeholder=\"e.g., International Excellence Scholarship\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Description\n                  </label>\n                  <textarea\n                    name=\"description\"\n                    value={formData.description}\n                    onChange={handleInputChange}\n                    rows={4}\n                    className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                    placeholder=\"Describe the scholarship, its purpose, and any special features\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Financial Details */}\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900 mb-6 flex items-center\">\n                <DollarSign className=\"h-5 w-5 mr-2 text-green-600\" />\n                Financial Details\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Original Annual Value (USD) *\n                  </label>\n                  <input\n                    type=\"number\"\n                    name=\"original_annual_value\"\n                    value={formData.original_annual_value}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                    placeholder=\"e.g., 20000\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Value Per Credit (USD) *\n                  </label>\n                  <input\n                    type=\"number\"\n                    name=\"original_value_per_credit\"\n                    value={formData.original_value_per_credit}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                    placeholder=\"e.g., 500\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Annual Value With Scholarship (USD) *\n                  </label>\n                  <input\n                    type=\"number\"\n                    name=\"annual_value_with_scholarship\"\n                    value={formData.annual_value_with_scholarship}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                    placeholder=\"e.g., 12000\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Application Deadline *\n                  </label>\n                  <div className=\"relative\">\n                    <Calendar className=\"absolute left-4 top-3.5 h-5 w-5 text-slate-400\" />\n                    <input\n                      type=\"date\"\n                      name=\"deadline\"\n                      value={formData.deadline}\n                      onChange={handleInputChange}\n                      className=\"w-full pl-12 pr-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                      required\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Eligibility & Requirements */}\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900 mb-6 flex items-center\">\n                <Target className=\"h-5 w-5 mr-2 text-[#D0151C]\" />\n                Eligibility & Requirements\n              </h2>\n              \n              <div className=\"grid grid-cols-1 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Field of Study\n                  </label>\n                  <select\n                    name=\"field_of_study\"\n                    value={formData.field_of_study}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                  >\n                    <option value=\"\">Any Field</option>\n                    <option value=\"STEM\">STEM</option>\n                    <option value=\"Business\">Business</option>\n                    <option value=\"Arts & Humanities\">Arts & Humanities</option>\n                    <option value=\"Social Sciences\">Social Sciences</option>\n                    <option value=\"Health Sciences\">Health Sciences</option>\n                    <option value=\"Engineering\">Engineering</option>\n                    <option value=\"Computer Science\">Computer Science</option>\n                    <option value=\"Law\">Law</option>\n                    <option value=\"Medicine\">Medicine</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Academic Level *\n                  </label>\n                  <select\n                    name=\"level\"\n                    value={formData.level}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                    required\n                  >\n                    <option value=\"undergraduate\">Undergraduate</option>\n                    <option value=\"graduate\">Graduate</option>\n                    <option value=\"doctorate\">Doctorate</option>\n                  </select>\n                </div>\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <label className=\"block text-sm font-medium text-slate-700\">\n                      Requirements *\n                    </label>\n                    <button\n                      type=\"button\"\n                      onClick={() => addArrayItem('requirements')}\n                      className=\"text-sm text-[#05294E] hover:text-[#05294E]/80 font-medium\"\n                    >\n                      + Add Requirement\n                    </button>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    {formData.requirements.map((req, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"text\"\n                          value={req}\n                          onChange={(e) => handleArrayInputChange(index, 'requirements', e.target.value)}\n                          className=\"flex-1 px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                          placeholder=\"e.g., Minimum GPA 3.5\"\n                        />\n                        {formData.requirements.length > 1 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => removeArrayItem(index, 'requirements')}\n                            className=\"p-3 text-red-500 hover:bg-red-50 rounded-lg transition-colors\"\n                          >\n                            &times;\n                          </button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <label className=\"block text-sm font-medium text-slate-700\">\n                      Eligibility Criteria\n                    </label>\n                    <button\n                      type=\"button\"\n                      onClick={() => addArrayItem('eligibility')}\n                      className=\"text-sm text-[#05294E] hover:text-[#05294E]/80 font-medium\"\n                    >\n                      + Add Criterion\n                    </button>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    {formData.eligibility.map((item, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"text\"\n                          value={item}\n                          onChange={(e) => handleArrayInputChange(index, 'eligibility', e.target.value)}\n                          className=\"flex-1 px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                          placeholder=\"e.g., International students only\"\n                        />\n                        {formData.eligibility.length > 1 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => removeArrayItem(index, 'eligibility')}\n                            className=\"p-3 text-red-500 hover:bg-red-50 rounded-lg transition-colors\"\n                          >\n                            &times;\n                          </button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Benefits & Options */}\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900 mb-6 flex items-center\">\n                <BookOpen className=\"h-5 w-5 mr-2 text-blue-600\" />\n                Benefits & Options\n              </h2>\n              \n              <div className=\"grid grid-cols-1 gap-6\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <label className=\"block text-sm font-medium text-slate-700\">\n                      Benefits\n                    </label>\n                    <button\n                      type=\"button\"\n                      onClick={() => addArrayItem('benefits')}\n                      className=\"text-sm text-[#05294E] hover:text-[#05294E]/80 font-medium\"\n                    >\n                      + Add Benefit\n                    </button>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    {formData.benefits.map((benefit, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"text\"\n                          value={benefit}\n                          onChange={(e) => handleArrayInputChange(index, 'benefits', e.target.value)}\n                          className=\"flex-1 px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                          placeholder=\"e.g., Full tuition coverage\"\n                        />\n                        {formData.benefits.length > 1 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => removeArrayItem(index, 'benefits')}\n                            className=\"p-3 text-red-500 hover:bg-red-50 rounded-lg transition-colors\"\n                          >\n                            &times;\n                          </button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"is_exclusive\"\n                    name=\"is_exclusive\"\n                    checked={formData.is_exclusive}\n                    onChange={handleCheckboxChange}\n                    className=\"h-5 w-5 rounded border-slate-300 text-[#D0151C] focus:ring-[#D0151C]\"\n                  />\n                  <div>\n                    <label htmlFor=\"is_exclusive\" className=\"font-medium text-slate-900\">\n                      Exclusive Scholarship\n                    </label>\n                    <p className=\"text-sm text-slate-500\">\n                      Mark this scholarship as exclusive to your university on our platform\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"is_active\"\n                    name=\"is_active\"\n                    checked={formData.is_active}\n                    onChange={handleCheckboxChange}\n                    className=\"h-5 w-5 rounded border-slate-300 text-green-600 focus:ring-green-600\"\n                  />\n                  <div>\n                    <label htmlFor=\"is_active\" className=\"font-medium text-slate-900\">\n                      Active Scholarship\n                    </label>\n                    <p className=\"text-sm text-slate-500\">\n                      Make this scholarship immediately visible to students\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Information Notice */}\n            <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-4\">\n              <div className=\"flex items-start\">\n                <Info className=\"h-5 w-5 text-blue-500 mr-3 mt-0.5 flex-shrink-0\" />\n                <div>\n                  <h4 className=\"font-medium text-blue-800 mb-1\">Important Information</h4>\n                  <p className=\"text-sm text-blue-700\">\n                    All scholarships are subject to review by our team. Please ensure all information is accurate and up-to-date. \n                    You can edit or deactivate this scholarship at any time after creation.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <div className=\"flex justify-end pt-6 border-t border-slate-200\">\n              <button\n                type=\"submit\"\n                disabled={loading || success}\n                className=\"bg-[#05294E] text-white px-8 py-3 rounded-xl hover:bg-[#05294E]/90 transition-colors font-bold flex items-center disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading ? (\n                  <>\n                    <Clock className=\"animate-spin h-5 w-5 mr-2\" />\n                    Creating...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-5 w-5 mr-2\" />\n                    Create Scholarship\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default NewScholarship;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\SchoolDashboard\\Overview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\SchoolDashboard\\ProfileManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":70,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2304,2307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2304,2307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":522,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[22999,23110],"text":"\n              Our team is ready to help you maximize your university&apos;s potential on our platform.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[22999,23110],"text":"\n              Our team is ready to help you maximize your university&lsquo;s potential on our platform.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[22999,23110],"text":"\n              Our team is ready to help you maximize your university&#39;s potential on our platform.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[22999,23110],"text":"\n              Our team is ready to help you maximize your university&rsquo;s potential on our platform.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  Building, \n  Edit, \n  Settings, \n  Phone, \n  Mail, \n  Globe, \n  MapPin,\n  Users,\n  Award,\n  CheckCircle,\n  AlertCircle,\n  Camera,\n  Save,\n  X,\n  Eye,\n  EyeOff,\n  ExternalLink\n} from 'lucide-react';\nimport { supabase } from '../../lib/supabase';\nimport type { University } from '../../types';\n\ninterface ProfileManagementProps {\n  university: University | null;\n}\n\nconst ProfileManagement: React.FC<ProfileManagementProps> = ({ university }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [showSensitiveInfo, setShowSensitiveInfo] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n  const [logoUrl, setLogoUrl] = useState<string | undefined>(university?.logo_url);\n\n  const profileCompleteness = university ? (\n    (university.name ? 20 : 0) +\n    (university.description ? 20 : 0) +\n    (university.location ? 15 : 0) +\n    (university.website ? 15 : 0) +\n    (university.contact?.email ? 10 : 0) +\n    (university.contact?.phone ? 10 : 0) +\n    (university.programs && university.programs.length > 0 ? 10 : 0)\n  ) : 0;\n\n  const handleProfilePicChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file || !university) return;\n    setUploading(true);\n    setUploadError(null);\n    try {\n      const fileExt = file.name.split('.').pop();\n      const fileName = `university_${university.id}_${Date.now()}.${fileExt}`;\n      const { error: uploadError } = await supabase.storage\n        .from('university-profile-pictures')\n        .upload(fileName, file, { upsert: true });\n      if (uploadError) throw uploadError;\n      const { data: publicUrlData } = supabase.storage\n        .from('university-profile-pictures')\n        .getPublicUrl(fileName);\n      const publicUrl = publicUrlData?.publicUrl;\n      if (!publicUrl) throw new Error('Could not get image URL');\n      // Update university record\n      const { error: updateError } = await supabase\n        .from('universities')\n        .update({ logo_url: publicUrl })\n        .eq('id', university.id);\n      if (updateError) throw updateError;\n      setLogoUrl(publicUrl);\n    } catch (err: any) {\n      setUploadError('Failed to upload image. Please try again.');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  if (!university) {\n    return (\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-16 text-center\">\n        <div className=\"w-24 h-24 bg-gradient-to-br from-blue-100 to-blue-200 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n          <Building className=\"h-12 w-12 text-blue-600\" />\n        </div>\n        <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">University profile not found</h3>\n        <p className=\"text-slate-500 mb-8 max-w-lg mx-auto\">\n          Create your university profile to showcase your institution to international students\n        </p>\n        <Link\n          to=\"/school/setup-profile\"\n          className=\"bg-gradient-to-r from-[#05294E] to-blue-700 text-white px-8 py-4 rounded-xl hover:from-[#05294E]/90 hover:to-blue-600 transition-all duration-300 font-bold shadow-lg hover:shadow-xl transform hover:scale-105\"\n        >\n          Create University Profile\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Profile Header */}\n      <div className=\"bg-gradient-to-r from-[#05294E] to-blue-700 rounded-2xl p-4 sm:p-8 text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n        <div className=\"relative\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4\">\n            <div className=\"flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-6 w-full\">\n              <div className=\"relative mb-4 sm:mb-0\">\n                <div className=\"w-20 h-20 sm:w-24 sm:h-24 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center overflow-hidden\">\n                  {logoUrl ? (\n                    <img src={logoUrl} alt=\"University Logo\" className=\"w-full h-full object-cover rounded-2xl\" />\n                  ) : (\n                    <Building className=\"h-12 w-12 text-white\" />\n                  )}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"absolute -bottom-2 -right-2 w-8 h-8 bg-white text-[#05294E] rounded-lg flex items-center justify-center shadow-lg opacity-50 cursor-not-allowed\"\n                  disabled\n                  title=\"Profile picture upload temporarily disabled\"\n                >\n                  <Camera className=\"h-4 w-4\" />\n                </button>\n                <input\n                  id=\"university-profile-pic-input\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={handleProfilePicChange}\n                  disabled={uploading}\n                />\n                {uploading && (\n                  <div className=\"absolute inset-0 bg-white/70 flex items-center justify-center rounded-2xl\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#05294E]\"></div>\n                  </div>\n                )}\n                {uploadError && (\n                  <div className=\"absolute left-0 right-0 -bottom-8 text-red-200 text-xs mt-2 text-center\">{uploadError}</div>\n                )}\n              </div>\n              <div className=\"flex-1 w-full\">\n                <h1 className=\"text-2xl sm:text-3xl font-bold mb-2 break-words\">{university.name}</h1>\n                <div className=\"flex flex-wrap items-center gap-2 text-blue-100 text-sm\">\n                  <div className=\"flex items-center\">\n                    <MapPin className=\"h-4 w-4 mr-1\" />\n                    {university.location}\n                  </div>\n                  {university.website && (\n                    <a \n                      href={university.website} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"flex items-center hover:text-white transition-colors\"\n                    >\n                      <Globe className=\"h-4 w-4 mr-1\" />\n                      Website\n                      <ExternalLink className=\"h-3 w-3 ml-1\" />\n                    </a>\n                  )}\n                </div>\n                <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs sm:text-sm font-medium ${\n                    university.is_approved \n                      ? 'bg-green-500/20 text-green-100 border border-green-400/30' \n                      : 'bg-yellow-500/20 text-yellow-100 border border-yellow-400/30'\n                  }`}>\n                    {university.is_approved ? (\n                      <>\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        University Approved\n                      </>\n                    ) : (\n                      <>\n                        <AlertCircle className=\"h-4 w-4 mr-2\" />\n                        Pending Approval\n                      </>\n                    )}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n              <button\n                onClick={() => setIsEditing(!isEditing)}\n                className=\"bg-white/20 backdrop-blur-sm border border-white/30 text-white px-4 py-2 sm:px-6 sm:py-3 rounded-xl hover:bg-white/30 transition-all duration-300 font-medium flex items-center shadow-lg justify-center\"\n              >\n                {isEditing ? (\n                  <>\n                    <X className=\"h-4 w-4 mr-2\" />\n                    Cancel\n                  </>\n                ) : (\n                  <>\n                    <Edit className=\"h-4 w-4 mr-2\" />\n                    Edit Profile\n                  </>\n                )}\n              </button>\n              {!university.profile_completed && (\n                <Link\n                  to=\"/school/setup-profile\"\n                  className=\"bg-white text-[#05294E] px-4 py-2 sm:px-6 sm:py-3 rounded-xl hover:bg-slate-100 transition-all duration-300 font-bold shadow-lg hover:shadow-xl transform hover:scale-105 text-center\"\n                >\n                  <Settings className=\"h-4 w-4 mr-2 inline\" />\n                  Complete Profile\n                </Link>\n              )}\n            </div>\n          </div>\n          {/* Profile Completeness */}\n          <div className=\"bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl p-3 sm:p-4 mt-4\">\n            <div className=\"flex flex-col sm:flex-row items-center justify-between mb-2 gap-2\">\n              <span className=\"font-medium\">Profile Completeness</span>\n              <span className=\"font-bold\">{profileCompleteness}%</span>\n            </div>\n            <div className=\"w-full bg-white/20 rounded-full h-2\">\n              <div \n                className=\"bg-white rounded-full h-2 transition-all duration-500\"\n                style={{ width: `${profileCompleteness}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Basic Information */}\n        <div className=\"lg:col-span-2 space-y-8\">\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-slate-900\">Basic Information</h3>\n              {!isEditing && (\n                <button\n                  onClick={() => setIsEditing(true)}\n                  className=\"text-[#05294E] hover:text-[#05294E]/80 font-medium text-sm flex items-center\"\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </button>\n              )}\n            </div>\n\n            {isEditing ? (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">University Name *</label>\n                  <input\n                    type=\"text\"\n                    defaultValue={university.name}\n                    className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">Description</label>\n                  <textarea\n                    rows={4}\n                    defaultValue={university.description || ''}\n                    className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                    placeholder=\"Describe your university...\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-2\">Website</label>\n                    <input\n                      type=\"url\"\n                      defaultValue={university.website || ''}\n                      className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                      placeholder=\"https://university.edu\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-2\">Location</label>\n                    <input\n                      type=\"text\"\n                      defaultValue={university.location || ''}\n                      className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                      placeholder=\"City, State\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-4 pt-4\">\n                  <button className=\"bg-[#05294E] text-white px-6 py-3 rounded-xl hover:bg-[#05294E]/90 transition-colors font-bold flex items-center\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Changes\n                  </button>\n                  <button\n                    onClick={() => setIsEditing(false)}\n                    className=\"bg-slate-100 text-slate-700 px-6 py-3 rounded-xl hover:bg-slate-200 transition-colors font-medium\"\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"text-sm font-medium text-slate-500\">University Name</label>\n                  <p className=\"text-lg font-semibold text-slate-900\">{university.name}</p>\n                </div>\n\n                {university.description && (\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Description</label>\n                    <p className=\"text-slate-700 leading-relaxed mt-1\">{university.description}</p>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Website</label>\n                    {university.website ? (\n                      <a \n                        href={university.website} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\" \n                        className=\"text-[#05294E] hover:underline flex items-center mt-1\"\n                      >\n                        {university.website}\n                        <ExternalLink className=\"h-4 w-4 ml-2\" />\n                      </a>\n                    ) : (\n                      <p className=\"text-slate-400 mt-1\">Not provided</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Location</label>\n                    <p className=\"text-slate-900 mt-1\">{university.location}</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-slate-900\">Contact Information</h3>\n              <button\n                onClick={() => setShowSensitiveInfo(!showSensitiveInfo)}\n                className=\"text-slate-500 hover:text-slate-700 flex items-center text-sm\"\n              >\n                {showSensitiveInfo ? (\n                  <>\n                    <EyeOff className=\"h-4 w-4 mr-2\" />\n                    Hide\n                  </>\n                ) : (\n                  <>\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    Show\n                  </>\n                )}\n              </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"text-sm font-medium text-slate-500 flex items-center\">\n                    <Phone className=\"h-4 w-4 mr-2\" />\n                    Phone\n                  </label>\n                  <p className=\"text-slate-900 mt-1\">\n                    {showSensitiveInfo \n                      ? university.contact?.phone || 'Not provided'\n                      : '•••••••••••'\n                    }\n                  </p>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-slate-500 flex items-center\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    General Email\n                  </label>\n                  <p className=\"text-slate-900 mt-1\">\n                    {showSensitiveInfo \n                      ? university.contact?.email || 'Not provided'\n                      : '•••••••••••@•••••••.com'\n                    }\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"text-sm font-medium text-slate-500 flex items-center\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Admissions Email\n                  </label>\n                  <p className=\"text-slate-900 mt-1\">\n                    {showSensitiveInfo \n                      ? university.contact?.admissionsEmail || 'Not provided'\n                      : '•••••••••••@•••••••.com'\n                    }\n                  </p>\n                </div>\n\n                {university.contact?.fax && (\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Fax</label>\n                    <p className=\"text-slate-900 mt-1\">\n                      {showSensitiveInfo \n                        ? university.contact.fax\n                        : '•••••••••••'\n                      }\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Academic Programs */}\n          {university.programs && university.programs.length > 0 && (\n            <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8\">\n              <h3 className=\"text-xl font-bold text-slate-900 mb-6\">Academic Programs</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                {university.programs.map((program: string, index: number) => (\n                  <div\n                    key={index}\n                    className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-4 py-3 rounded-xl text-sm font-medium text-slate-700 text-center hover:from-[#05294E]/5 hover:to-blue-50 hover:border-[#05294E]/20 transition-all duration-300\"\n                  >\n                    {program}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Quick Stats */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <h3 className=\"text-lg font-bold text-slate-900 mb-6\">Quick Stats</h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl\">\n                <div className=\"flex items-center\">\n                  <Award className=\"h-5 w-5 text-[#05294E] mr-3\" />\n                  <span className=\"font-medium text-slate-700\">Scholarships Created</span>\n                </div>\n                <span className=\"text-2xl font-bold text-slate-900\">0</span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl\">\n                <div className=\"flex items-center\">\n                  <Users className=\"h-5 w-5 text-blue-600 mr-3\" />\n                  <span className=\"font-medium text-slate-700\">Applicants</span>\n                </div>\n                <span className=\"text-2xl font-bold text-slate-900\">0</span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl\">\n                <div className=\"flex items-center\">\n                  <Eye className=\"h-5 w-5 text-green-600 mr-3\" />\n                  <span className=\"font-medium text-slate-700\">Profile Views</span>\n                </div>\n                <span className=\"text-2xl font-bold text-slate-900\">0</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Account Status */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <h3 className=\"text-lg font-bold text-slate-900 mb-6\">Account Status</h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Profile Created</span>\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Information Complete</span>\n                {university.profile_completed ? (\n                  <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                ) : (\n                  <AlertCircle className=\"h-5 w-5 text-orange-500\" />\n                )}\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Team Approval</span>\n                {university.is_approved ? (\n                  <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                ) : (\n                  <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\n                )}\n              </div>\n            </div>\n\n            {(!university.profile_completed || !university.is_approved) && (\n              <div className=\"mt-6 p-4 bg-gradient-to-r from-orange-50 to-orange-100 rounded-xl border border-orange-200\">\n                <p className=\"text-sm font-medium text-orange-800 mb-2\">\n                  {!university.profile_completed \n                    ? 'Complete your profile to unlock all features'\n                    : 'Your profile is being reviewed by our team'\n                  }\n                </p>\n                {!university.profile_completed && (\n                  <Link\n                    to=\"/school/setup-profile\"\n                    className=\"text-sm font-bold text-orange-700 hover:text-orange-800 transition-colors\"\n                  >\n                    Complete now →\n                  </Link>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Help & Support */}\n          <div className=\"bg-gradient-to-br from-[#05294E] to-blue-700 rounded-2xl p-6 text-white\">\n            <h3 className=\"text-lg font-bold mb-4\">Need Help?</h3>\n            <p className=\"text-blue-100 text-sm mb-4\">\n              Our team is ready to help you maximize your university's potential on our platform.\n            </p>\n            <button className=\"w-full bg-white/20 backdrop-blur-sm border border-white/30 text-white py-3 px-4 rounded-xl hover:bg-white/30 transition-all duration-300 font-medium\">\n              Contact Support\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileManagement;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\SchoolDashboard\\ScholarshipManagement.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":364,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17841,17902],"text":"\n                We couldn&apos;t find any scholarships matching \""},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17841,17902],"text":"\n                We couldn&lsquo;t find any scholarships matching \""},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17841,17902],"text":"\n                We couldn&#39;t find any scholarships matching \""},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17841,17902],"text":"\n                We couldn&rsquo;t find any scholarships matching \""},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":364,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17841,17902],"text":"\n                We couldn't find any scholarships matching &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17841,17902],"text":"\n                We couldn't find any scholarships matching &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17841,17902],"text":"\n                We couldn't find any scholarships matching &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17841,17902],"text":"\n                We couldn't find any scholarships matching &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":364,"column":73,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17914,17930],"text":"&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17914,17930],"text":"&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17914,17930],"text":"&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17914,17930],"text":"&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  CheckCircle, \n  Award, \n  Settings,\n  Search,\n  Filter,\n  DollarSign,\n  Eye,\n  MoreVertical,\n  Zap,\n  Clock,\n  Users,\n  Target,\n  AlertTriangle\n} from 'lucide-react';\nimport type { University, Scholarship } from '../../types';\n\ninterface ScholarshipManagementProps {\n  university: University | null;\n  scholarships: Scholarship[];\n  handleDeleteScholarship: (scholarshipId: string) => Promise<void>;\n  toggleScholarshipStatus: (scholarshipId: string, currentStatus: boolean) => Promise<void>;\n}\n\nconst ScholarshipManagement: React.FC<ScholarshipManagementProps> = ({\n  university,\n  scholarships,\n  handleDeleteScholarship,\n  toggleScholarshipStatus\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [showActions, setShowActions] = useState<string | null>(null);\n\n  const filteredScholarships = scholarships.filter(scholarship => {\n    const matchesSearch = scholarship.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || \n      (statusFilter === 'active' && scholarship.is_active) ||\n      (statusFilter === 'inactive' && !scholarship.is_active);\n    return matchesSearch && matchesStatus;\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(value);\n  };\n\n  const getDaysUntilDeadline = (deadline: string) => {\n    const today = new Date();\n    const deadlineDate = new Date(deadline);\n    const diffTime = deadlineDate.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getDeadlineStatus = (deadline: string) => {\n    const days = getDaysUntilDeadline(deadline);\n    if (days < 0) return { status: 'expired', color: 'text-red-600', bg: 'bg-red-50', border: 'border-red-200' };\n    if (days <= 7) return { status: 'urgent', color: 'text-orange-600', bg: 'bg-orange-50', border: 'border-orange-200' };\n    if (days <= 30) return { status: 'soon', color: 'text-yellow-600', bg: 'bg-yellow-50', border: 'border-yellow-200' };\n    return { status: 'normal', color: 'text-green-600', bg: 'bg-green-50', border: 'border-green-200' };\n  };\n\n  if (!university?.profile_completed) {\n    return (\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-12 text-center\">\n        <div className=\"w-20 h-20 bg-gradient-to-br from-orange-100 to-orange-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n          <Settings className=\"h-10 w-10 text-orange-600\" />\n        </div>\n        <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">Profile setup required</h3>\n        <p className=\"text-slate-500 mb-8 max-w-md mx-auto\">\n          Complete your university profile to start creating and managing scholarships\n        </p>\n        <Link\n          to=\"/school/setup-profile\"\n          className=\"bg-gradient-to-r from-[#05294E] to-blue-700 text-white px-8 py-4 rounded-xl hover:from-[#05294E]/90 hover:to-blue-600 transition-all duration-300 font-bold shadow-lg hover:shadow-xl transform hover:scale-105\"\n        >\n          Complete University Profile\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header with Actions */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-900 mb-2\">Manage Scholarships</h2>\n          <p className=\"text-slate-600\">\n            {scholarships.length > 0 \n              ? `${scholarships.length} scholarship${scholarships.length > 1 ? 's' : ''} created, ${scholarships.filter(s => s.is_active).length} active`\n              : 'No scholarships created yet'\n            }\n          </p>\n        </div>\n        \n        <Link\n          to=\"/school/scholarship/new\"\n          className=\"bg-gradient-to-r from-[#D0151C] to-red-600 text-white px-6 py-3 rounded-xl hover:from-[#B01218] hover:to-red-700 transition-all duration-300 font-bold flex items-center shadow-lg hover:shadow-xl transform hover:scale-105\"\n        >\n          <Plus className=\"h-5 w-5 mr-2\" />\n          New Scholarship\n        </Link>\n      </div>\n\n      {scholarships.length === 0 ? (\n        <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-16 text-center\">\n          <div className=\"w-24 h-24 bg-gradient-to-br from-blue-100 to-blue-200 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n            <Award className=\"h-12 w-12 text-blue-600\" />\n          </div>\n          <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">No scholarships created yet</h3>\n          <p className=\"text-slate-500 mb-8 max-w-lg mx-auto\">\n            Start attracting international students by creating exclusive and attractive scholarship opportunities\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8 max-w-4xl mx-auto\">\n            <div className=\"p-6 bg-slate-50 rounded-2xl\">\n              <Target className=\"h-8 w-8 text-[#05294E] mx-auto mb-3\" />\n              <h4 className=\"font-bold text-slate-900 mb-2\">Define Criteria</h4>\n              <p className=\"text-sm text-slate-600\">Establish clear requirements for ideal candidates</p>\n            </div>\n            <div className=\"p-6 bg-slate-50 rounded-2xl\">\n              <DollarSign className=\"h-8 w-8 text-green-600 mx-auto mb-3\" />\n              <h4 className=\"font-bold text-slate-900 mb-2\">Attractive Amount</h4>\n              <p className=\"text-sm text-slate-600\">Offer competitive amounts to attract talent</p>\n            </div>\n            <div className=\"p-6 bg-slate-50 rounded-2xl\">\n              <Users className=\"h-8 w-8 text-blue-600 mx-auto mb-3\" />\n              <h4 className=\"font-bold text-slate-900 mb-2\">Global Reach</h4>\n              <p className=\"text-sm text-slate-600\">Connect with students from around the world</p>\n            </div>\n          </div>\n          \n          <Link\n            to=\"/school/scholarship/new\"\n            className=\"bg-gradient-to-r from-[#D0151C] to-red-600 text-white px-8 py-4 rounded-xl hover:from-[#B01218] hover:to-red-700 transition-all duration-300 font-bold shadow-lg hover:shadow-xl transform hover:scale-105\"\n          >\n            Create First Scholarship\n          </Link>\n        </div>\n      ) : (\n        <>\n          {/* Filters and Search */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-slate-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search scholarships...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-full pl-12 pr-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex gap-4\">\n                <select\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value)}\n                  className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"active\">Active</option>\n                  <option value=\"inactive\">Inactive</option>\n                </select>\n                \n                <button className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl hover:bg-slate-100 transition-colors flex items-center\">\n                  <Filter className=\"h-5 w-5 text-slate-500\" />\n                </button>\n              </div>\n            </div>\n\n            <div className=\"mt-4 flex items-center text-sm text-slate-600\">\n              <span className=\"font-medium\">{filteredScholarships.length}</span>\n              <span className=\"ml-1\">\n                scholarship{filteredScholarships.length !== 1 ? 's' : ''} found\n              </span>\n            </div>\n          </div>\n\n          {/* Scholarships Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            {filteredScholarships.map((scholarship) => {\n              const deadlineInfo = getDeadlineStatus(scholarship.deadline);\n              const daysLeft = getDaysUntilDeadline(scholarship.deadline);\n              \n              return (\n                <div key={scholarship.id} className=\"bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden hover:shadow-lg transition-all duration-300 group\">\n                  {/* Header */}\n                  <div className=\"p-6 pb-4\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-bold text-slate-900 mb-2 line-clamp-2 group-hover:text-[#05294E] transition-colors\">\n                          {scholarship.title}\n                        </h3>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${\n                            scholarship.is_active \n                              ? 'bg-green-100 text-green-700' \n                              : 'bg-slate-100 text-slate-600'\n                          }`}>\n                            {scholarship.is_active ? (\n                              <>\n                                <Zap className=\"h-3 w-3 mr-1\" />\n                                Active\n                              </>\n                            ) : (\n                              <>\n                                <Clock className=\"h-3 w-3 mr-1\" />\n                                Inactive\n                              </>\n                            )}\n                          </span>\n                          \n                          {scholarship.is_exclusive && (\n                            <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-[#D0151C]/10 text-[#D0151C]\">\n                              <Award className=\"h-3 w-3 mr-1\" />\n                              Exclusive\n                            </span>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"relative\">\n                        <button\n                          onClick={() => setShowActions(showActions === scholarship.id ? null : scholarship.id)}\n                          className=\"p-2 text-slate-400 hover:text-slate-600 hover:bg-slate-100 rounded-lg transition-colors\"\n                        >\n                          <MoreVertical className=\"h-5 w-5\" />\n                        </button>\n\n                        {showActions === scholarship.id && (\n                          <div className=\"absolute right-0 top-10 w-48 bg-white rounded-xl shadow-xl border border-slate-200 py-2 z-50\">\n                            <button className=\"flex items-center w-full px-4 py-2 text-sm text-slate-700 hover:bg-slate-50 transition-colors\">\n                              <Eye className=\"h-4 w-4 mr-3\" />\n                              View Details\n                            </button>\n                            <button className=\"flex items-center w-full px-4 py-2 text-sm text-slate-700 hover:bg-slate-50 transition-colors\">\n                              <Edit className=\"h-4 w-4 mr-3\" />\n                              Edit\n                            </button>\n                            <button\n                              onClick={() => {\n                                toggleScholarshipStatus(scholarship.id, scholarship.is_active);\n                                setShowActions(null);\n                              }}\n                              className=\"flex items-center w-full px-4 py-2 text-sm text-slate-700 hover:bg-slate-50 transition-colors\"\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-3\" />\n                              {scholarship.is_active ? 'Deactivate' : 'Activate'}\n                            </button>\n                            <div className=\"border-t border-slate-200 my-2\"></div>\n                            <button\n                              onClick={() => {\n                                handleDeleteScholarship(scholarship.id);\n                                setShowActions(null);\n                              }}\n                              className=\"flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors\"\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-3\" />\n                              Delete\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Amount */}\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-slate-500 mb-1\">Scholarship Amount</p>\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          {formatCurrency(Number(scholarship.amount))}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium text-slate-500 mb-1\">Level</p>\n                        <p className=\"text-sm font-bold text-slate-900 capitalize\">\n                          {scholarship.level}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Deadline */}\n                    <div className={`p-3 rounded-xl border ${deadlineInfo.bg} ${deadlineInfo.border}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-slate-700\">Application Deadline</p>\n                          <p className=\"font-bold text-slate-900\">\n                            {new Date(scholarship.deadline).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          {daysLeft > 0 ? (\n                            <>\n                              <p className={`text-2xl font-bold ${deadlineInfo.color}`}>\n                                {daysLeft}\n                              </p>\n                              <p className={`text-xs font-medium ${deadlineInfo.color}`}>\n                                day{daysLeft !== 1 ? 's' : ''} left\n                              </p>\n                            </>\n                          ) : (\n                            <div className=\"flex items-center\">\n                              <AlertTriangle className=\"h-5 w-5 text-red-600 mr-1\" />\n                              <span className=\"text-sm font-bold text-red-600\">Expired</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Quick Stats */}\n                  <div className=\"px-6 pb-6\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"bg-slate-50 p-3 rounded-xl text-center\">\n                        <Users className=\"h-5 w-5 mx-auto mb-2 text-slate-500\" />\n                        <p className=\"text-lg font-bold text-slate-900\">0</p>\n                        <p className=\"text-xs text-slate-500\">Applicants</p>\n                      </div>\n                      <div className=\"bg-slate-50 p-3 rounded-xl text-center\">\n                        <Eye className=\"h-5 w-5 mx-auto mb-2 text-slate-500\" />\n                        <p className=\"text-lg font-bold text-slate-900\">0</p>\n                        <p className=\"text-xs text-slate-500\">Views</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"px-6 pb-6\">\n                    <div className=\"flex space-x-2\">\n                      <button className=\"flex-1 bg-slate-100 text-slate-700 py-2.5 px-4 rounded-xl hover:bg-slate-200 transition-colors font-medium text-sm\">\n                        View Applicants\n                      </button>\n                      <button className=\"bg-[#05294E] text-white py-2.5 px-4 rounded-xl hover:bg-[#05294E]/90 transition-colors\">\n                        <Edit className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {filteredScholarships.length === 0 && searchTerm && (\n            <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-12 text-center\">\n              <Search className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-slate-900 mb-2\">No scholarships found</h3>\n              <p className=\"text-slate-500\">\n                We couldn't find any scholarships matching \"{searchTerm}\"\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ScholarshipManagement;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\SchoolDashboard\\SchoolDashboardLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[535,538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[535,538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":224,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8913,8931],"text":"We&apos;re here to help"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8913,8931],"text":"We&lsquo;re here to help"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8913,8931],"text":"We&#39;re here to help"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8913,8931],"text":"We&rsquo;re here to help"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, Outlet, useLocation, useNavigate } from 'react-router-dom';\nimport { \n  Building, \n  Award, \n  Edit, \n  CheckCircle, \n  Clock, \n  AlertCircle, \n  Settings, \n  Plus,\n  Home,\n  Users,\n  BarChart3,\n  Bell,\n  Search,\n  Menu,\n  X,\n  LogOut,\n  User,\n  ChevronDown,\n  Shield\n} from 'lucide-react';\nimport { University } from '../../lib/supabase';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface SchoolDashboardLayoutProps {\n  university: University | null;\n  user: any;\n  loading: boolean;\n}\n\nconst SchoolDashboardLayout: React.FC<SchoolDashboardLayoutProps> = ({\n  university,\n  user,\n  loading\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { logout } = useAuth();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [userMenuOpen, setUserMenuOpen] = useState(false);\n  \n  // Fechamento automático do userMenu ao abrir o sidebar\n  useEffect(() => {\n    if (sidebarOpen) {\n      setUserMenuOpen(false);\n    }\n  }, [sidebarOpen]);\n\n  const getActiveTab = () => {\n    const path = location.pathname;\n    if (path.includes('/scholarships')) return 'scholarships';\n    if (path.includes('/profile')) return 'profile';\n    if (path.includes('/analytics')) return 'analytics';\n    if (path.includes('/students')) return 'students';\n    return 'overview';\n  };\n\n  const activeTab = getActiveTab();\n\n  const handleLogout = () => {\n    logout();\n    navigate('/');\n    setSidebarOpen(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#05294E]\"></div>\n          <p className=\"text-slate-600 font-medium\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const sidebarItems = [\n    { id: 'overview', label: 'Overview', icon: Home, path: '/school/dashboard', badge: null },\n    { id: 'scholarships', label: 'Scholarships', icon: Award, path: '/school/dashboard/scholarships', badge: university?.profile_completed ? null : 'Setup' },\n    { id: 'students', label: 'Students', icon: Users, path: '/school/dashboard/students', badge: 'Coming Soon' },\n    { id: 'analytics', label: 'Analytics', icon: BarChart3, path: '/school/dashboard/analytics', badge: 'Coming Soon' },\n    { id: 'profile', label: 'University Profile', icon: Building, path: '/school/dashboard/profile', badge: null }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex\">\n      {/* Sidebar */}\n      <div className={`fixed inset-y-0 left-0 z-50 w-72 bg-white shadow-xl transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0 ${\n        sidebarOpen ? 'translate-x-0' : '-translate-x-full'\n      }`}>\n        <div className=\"flex flex-col h-full\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-between h-20 px-6 border-b border-slate-200\">\n            <Link to=\"/\" className=\"flex items-center justify-center w-full\">\n              <img \n                src=\"/logo.png.png\" \n                alt=\"Matrícula USA\" \n                className=\"h-12 w-auto\"\n              />\n            </Link>\n            <button\n              onClick={() => {\n                setSidebarOpen(false);\n                setUserMenuOpen(false);\n              }}\n              className=\"lg:hidden absolute right-4 p-2 rounded-lg text-slate-400 hover:text-slate-600 hover:bg-slate-100\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n          </div>\n\n          {/* University Status */}\n          {university && (\n            <div className=\"px-6 py-4 border-b border-slate-200\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <Building className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h3 className=\"font-semibold text-slate-900 truncate\">{university.name}</h3>\n                  <p className=\"text-sm text-slate-500 truncate\">{university.location}</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between mt-3\">\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                  university.is_approved \n                    ? 'bg-green-100 text-green-700' \n                    : 'bg-yellow-100 text-yellow-700'\n                }`}>\n                  {university.is_approved ? (\n                    <>\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\n                      Approved\n                    </>\n                  ) : (\n                    <>\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      Pending\n                    </>\n                  )}\n                </span>\n                \n                {!university.profile_completed && (\n                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-700\">\n                    <AlertCircle className=\"h-3 w-3 mr-1\" />\n                    Profile Incomplete\n                  </span>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Navigation */}\n          <nav className=\"flex-1 px-4 py-6 space-y-2\">\n            {sidebarItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = activeTab === item.id;\n              const isDisabled = item.badge === 'Coming Soon';\n              \n              return (\n                <Link\n                  key={item.id}\n                  to={isDisabled ? '#' : item.path}\n                  className={`group flex items-center justify-between px-4 py-3 rounded-xl font-medium transition-all duration-200 ${\n                    isActive\n                      ? 'bg-[#05294E] text-white shadow-lg'\n                      : isDisabled\n                      ? 'text-slate-400 cursor-not-allowed'\n                      : 'text-slate-600 hover:text-slate-900 hover:bg-slate-100'\n                  }`}\n                  onClick={(e) => isDisabled && e.preventDefault()}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Icon className={`h-5 w-5 ${isActive ? 'text-white' : isDisabled ? 'text-slate-400' : 'text-slate-500'}`} />\n                    <span className=\"text-sm\">{item.label}</span>\n                  </div>\n                  {item.badge && (\n                    <span className={`px-2 py-1 text-xs font-medium rounded-lg ${\n                      item.badge === 'Coming Soon' \n                        ? 'bg-slate-100 text-slate-500'\n                        : 'bg-orange-100 text-orange-700'\n                    }`}>\n                      {item.badge}\n                    </span>\n                  )}\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* Quick Actions */}\n          <div className=\"px-4 py-4 border-t border-slate-200\">\n            {university?.profile_completed ? (\n              <Link\n                to=\"/school/scholarship/new\" \n                className=\"w-full bg-gradient-to-r from-[#D0151C] to-red-600 text-white py-3 px-4 rounded-xl hover:from-[#B01218] hover:to-red-700 transition-all duration-300 font-bold text-sm flex items-center justify-center shadow-lg hover:shadow-xl transform hover:scale-105\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Scholarship\n              </Link>\n            ) : (\n              <Link\n                to=\"/school/setup-profile\"\n                className=\"w-full bg-gradient-to-r from-[#05294E] to-blue-700 text-white py-3 px-4 rounded-xl hover:from-[#05294E]/90 hover:to-blue-600 transition-all duration-300 font-bold text-sm flex items-center justify-center shadow-lg hover:shadow-xl transform hover:scale-105\"\n              >\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Complete Profile\n              </Link>\n            )}\n          </div>\n\n          {/* Support */}\n          <div className=\"px-4 py-4 border-t border-slate-200\">\n            <div className=\"bg-gradient-to-r from-slate-50 to-blue-50 rounded-xl p-4 border border-slate-200\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"h-4 w-4 text-blue-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-slate-900 text-sm\">24/7 Support</h4>\n                  <p className=\"text-xs text-slate-500\">We're here to help</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Overlay for mobile */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={() => {\n            setSidebarOpen(false);\n            setUserMenuOpen(false);\n          }}\n        />\n      )}\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Top Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200\">\n          <div className=\"flex items-center justify-between px-6 py-4\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => {\n                  setSidebarOpen(true);\n                  setUserMenuOpen(false);\n                }}\n                className=\"lg:hidden p-2 rounded-lg text-slate-400 hover:text-slate-600 hover:bg-slate-100\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </button>\n              \n              <div className=\"hidden md:block\">\n                <h1 className=\"text-2xl font-bold text-slate-900\">\n                  {activeTab === 'overview' && 'Overview'}\n                  {activeTab === 'scholarships' && 'Manage Scholarships'}\n                  {activeTab === 'profile' && 'University Profile'}\n                  {activeTab === 'students' && 'Students'}\n                  {activeTab === 'analytics' && 'Analytics & Reports'}\n                </h1>\n                <p className=\"text-slate-600\">\n                  {activeTab === 'overview' && 'Monitor your university performance'}\n                  {activeTab === 'scholarships' && 'Create and manage scholarship opportunities'}\n                  {activeTab === 'profile' && 'Keep your university information up to date'}\n                  {activeTab === 'students' && 'Manage applicants and students'}\n                  {activeTab === 'analytics' && 'Detailed performance analysis and metrics'}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Search */}\n              <div className=\"hidden lg:block\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search...\"\n                    className=\"w-80 pl-10 pr-4 py-2.5 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-200\"\n                  />\n                </div>\n              </div>\n\n              {/* Notifications */}\n              <button className=\"relative p-2.5 text-slate-400 hover:text-slate-600 hover:bg-slate-100 rounded-xl transition-colors\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full\"></span>\n              </button>\n\n              {/* User Menu */}\n              <div className=\"relative\">\n                <button\n                  onClick={() => {\n                    setUserMenuOpen(!userMenuOpen);\n                    if (!userMenuOpen) setSidebarOpen(false);\n                  }}\n                  className=\"flex items-center space-x-3 p-2 rounded-xl hover:bg-slate-100 transition-colors\"\n                >\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-[#05294E] to-blue-700 rounded-lg flex items-center justify-center\">\n                    <User className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div className=\"hidden md:block text-left\">\n                    <p className=\"font-semibold text-slate-900 text-sm\">{user?.name}</p>\n                    <p className=\"text-xs text-slate-500\">Administrator</p>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4 text-slate-400\" />\n                </button>\n\n                {userMenuOpen && (\n                  <div className=\"absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-xl border border-slate-200 py-2 z-50\">\n                    <div className=\"px-4 py-3 border-b border-slate-200\">\n                      <p className=\"font-semibold text-slate-900\">{user?.name}</p>\n                      <p className=\"text-sm text-slate-500\">{user?.email}</p>\n                    </div>\n                    \n                    <Link\n                      to=\"/school/dashboard/profile\"\n                      className=\"flex items-center px-4 py-3 text-sm text-slate-700 hover:bg-slate-50 transition-colors\"\n                      onClick={() => {\n                        setUserMenuOpen(false);\n                        setSidebarOpen(false);\n                      }}\n                    >\n                      <Edit className=\"h-4 w-4 mr-3 text-slate-400\" />\n                      Edit Profile\n                    </Link>\n                    \n                    <Link\n                      to=\"/settings\"\n                      className=\"flex items-center px-4 py-3 text-sm text-slate-700 hover:bg-slate-50 transition-colors\"\n                      onClick={() => {\n                        setUserMenuOpen(false);\n                        setSidebarOpen(false);\n                      }}\n                    >\n                      <Settings className=\"h-4 w-4 mr-3 text-slate-400\" />\n                      Settings\n                    </Link>\n                    \n                    <div className=\"border-t border-slate-200 my-2\"></div>\n                    \n                    <button\n                      onClick={handleLogout}\n                      className=\"flex items-center w-full px-4 py-3 text-sm text-red-600 hover:bg-red-50 transition-colors\"\n                    >\n                      <LogOut className=\"h-4 w-4 mr-3\" />\n                      Sign Out\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 p-6\">\n          {/* Welcome Message for Incomplete Profiles */}\n          {(!university || !university.profile_completed) && (\n            <div className=\"bg-gradient-to-r from-[#05294E] to-blue-700 rounded-2xl p-8 mb-8 text-white relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-black/10\"></div>\n              <div className=\"relative\">\n                <div className=\"flex items-center space-x-4 mb-6\">\n                  <div className=\"w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center\">\n                    <Building className=\"h-8 w-8 text-white\" />\n                  </div>\n                  <div>\n                    <h2 className=\"text-3xl font-bold mb-2\">\n                      {!university ? 'Welcome to Matrícula USA!' : 'Complete Your Profile'}\n                    </h2>\n                    <p className=\"text-blue-100 text-lg\">\n                      {!university \n                        ? 'Set up your university and start attracting international students'\n                        : 'Finish your profile to unlock all features'\n                      }\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                  <div className=\"bg-white/10 backdrop-blur-sm p-6 rounded-xl border border-white/20\">\n                    <Edit className=\"h-8 w-8 text-white mb-4\" />\n                    <h3 className=\"font-bold text-white mb-2\">1. Complete Profile</h3>\n                    <p className=\"text-blue-100 text-sm\">Add university information and documentation</p>\n                  </div>\n                  <div className=\"bg-white/10 backdrop-blur-sm p-6 rounded-xl border border-white/20\">\n                    <Award className=\"h-8 w-8 text-yellow-400 mb-4\" />\n                    <h3 className=\"font-bold text-white mb-2\">2. Create Scholarships</h3>\n                    <p className=\"text-blue-100 text-sm\">Offer exclusive opportunities to students</p>\n                  </div>\n                  <div className=\"bg-white/10 backdrop-blur-sm p-6 rounded-xl border border-white/20\">\n                    <Users className=\"h-8 w-8 text-green-400 mb-4\" />\n                    <h3 className=\"font-bold text-white mb-2\">3. Connect Students</h3>\n                    <p className=\"text-blue-100 text-sm\">Receive applications from qualified students</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Link\n                    to=\"/school/setup-profile\"\n                    className=\"bg-white text-[#05294E] px-8 py-3 rounded-xl hover:bg-slate-100 transition-all duration-300 font-bold text-center flex items-center justify-center shadow-lg hover:shadow-xl transform hover:scale-105\"\n                  >\n                    <Settings className=\"h-5 w-5 mr-2\" />\n                    {!university ? 'Set Up University Profile' : 'Complete Profile'}\n                  </Link>\n                  {!university && (\n                    <Link\n                      to=\"/school/termsandconditions\"\n                      className=\"bg-white/20 backdrop-blur-sm border border-white/30 text-white px-8 py-3 rounded-xl hover:bg-white/30 transition-all duration-300 font-bold text-center flex items-center justify-center\"\n                    >\n                      <Shield className=\"h-5 w-5 mr-2\" />\n                      Review Terms & Conditions\n                    </Link>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          <Outlet />\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default SchoolDashboardLayout;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\SchoolDashboard\\index.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboardData, user]","fix":{"range":[1013,1019],"text":"[loadDashboardData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, Suspense } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { supabase } from '../../lib/supabase';\nimport type { University, Scholarship } from '../../types';\nimport { useAuth } from '../../hooks/useAuth';\nimport SchoolDashboardLayout from './SchoolDashboardLayout';\n// Lazy load das páginas\nconst Overview = React.lazy(() => import('./Overview'));\nconst ScholarshipManagement = React.lazy(() => import('./ScholarshipManagement'));\nconst ProfileManagement = React.lazy(() => import('./ProfileManagement'));\n\nconst SkeletonLoader = () => <div className=\"animate-pulse h-40 bg-slate-100 rounded-xl w-full my-8\" />;\n\nconst SchoolDashboard: React.FC = () => {\n  const [university, setUniversity] = useState<University | null>(null);\n  const [scholarships, setScholarships] = useState<Scholarship[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      loadDashboardData();\n    }\n  }, [user]);\n\n  const loadDashboardData = async () => {\n    if (!user) return;\n\n    try {\n      // Load university data\n      const { data: universityData, error: universityError } = await supabase\n        .from('universities')\n        .select('*')\n        .eq('user_id', user.id)\n        .maybeSingle();\n\n      if (universityError) throw universityError;\n      setUniversity(universityData);\n\n      // Load scholarships only if university exists\n      if (universityData) {\n        const { data: scholarshipsData, error: scholarshipsError } = await supabase\n          .from('scholarships')\n          .select('*')\n          .eq('university_id', universityData.id)\n          .order('created_at', { ascending: false });\n\n        if (scholarshipsError) throw scholarshipsError;\n        setScholarships(scholarshipsData || []);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar dados do painel:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteScholarship = async (scholarshipId: string) => {\n    if (!confirm('Tem certeza de que deseja excluir esta bolsa?')) return;\n\n    try {\n      const { error } = await supabase\n        .from('scholarships')\n        .delete()\n        .eq('id', scholarshipId);\n\n      if (error) throw error;\n      \n      setScholarships(prev => prev.filter(s => s.id !== scholarshipId));\n    } catch (error) {\n      console.error('Erro ao excluir bolsa:', error);\n      alert('Erro ao excluir bolsa. Tente novamente.');\n    }\n  };\n\n  const toggleScholarshipStatus = async (scholarshipId: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from('scholarships')\n        .update({ is_active: !currentStatus })\n        .eq('id', scholarshipId);\n\n      if (error) throw error;\n      \n      setScholarships(prev => prev.map(s => \n        s.id === scholarshipId ? { ...s, is_active: !currentStatus } : s\n      ));\n    } catch (error) {\n      console.error('Erro ao atualizar status da bolsa:', error);\n      alert('Erro ao atualizar bolsa. Tente novamente.');\n    }\n  };\n\n  // Calculate stats\n  const stats = {\n    totalScholarships: scholarships.length,\n    activeScholarships: scholarships.filter(s => s.is_active).length,\n    totalFunding: scholarships.reduce((sum, s) => sum + Number(s.amount), 0),\n    avgAmount: scholarships.length > 0 ? scholarships.reduce((sum, s) => sum + Number(s.amount), 0) / scholarships.length : 0\n  };\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<SchoolDashboardLayout university={university} user={user} loading={loading} />}>\n        <Route \n          index \n          element={\n            <Suspense fallback={<SkeletonLoader />}>\n              <Overview \n                university={university} \n                scholarships={scholarships} \n                stats={stats} \n              />\n            </Suspense>\n          } \n        />\n        <Route \n          path=\"scholarships\" \n          element={\n            <Suspense fallback={<SkeletonLoader />}>\n              <ScholarshipManagement \n                university={university} \n                scholarships={scholarships} \n                handleDeleteScholarship={handleDeleteScholarship}\n                toggleScholarshipStatus={toggleScholarshipStatus}\n              />\n            </Suspense>\n          } \n        />\n        <Route \n          path=\"profile\" \n          element={\n            <Suspense fallback={<SkeletonLoader />}>\n              <ProfileManagement university={university} />\n            </Suspense>\n          } \n        />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default SchoolDashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\SchoolProfileSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":3,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":3,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":3,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":79},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkExistingProfile'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [checkExistingProfile, user]","fix":{"range":[1225,1231],"text":"[checkExistingProfile, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1904,1907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1904,1907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Building, MapPin, Phone, Mail, Globe, Users, CheckCircle, AlertCircle, Plus, X } from 'lucide-react';\nimport { supabase } from '../lib/supabase';\nimport { useAuth } from '../hooks/useAuth';\n\nconst SchoolProfileSetup: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [currentStep, setCurrentStep] = useState(1);\n  const { user } = useAuth();\n  const navigate = useNavigate();\n\n  const [formData, setFormData] = useState({\n    // Basic Information\n    name: '',\n    description: '',\n    website: '',\n    \n    // Location\n    location: '',\n    address: {\n      street: '',\n      city: '',\n      state: '',\n      zipCode: '',\n      country: 'United States'\n    },\n    \n    // Contact Information\n    contact: {\n      phone: '',\n      email: '',\n      admissionsEmail: '',\n      fax: ''\n    },\n    \n    // Academic Information\n    programs: [] as string[]\n  });\n\n  const [newProgram, setNewProgram] = useState('');\n\n  useEffect(() => {\n    // Check if user has already completed profile setup\n    checkExistingProfile();\n  }, [user]);\n\n  const checkExistingProfile = async () => {\n    if (!user) return;\n\n    try {\n      const { data: university, error } = await supabase\n        .from('universities')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        throw error;\n      }\n\n      if (university && university.profile_completed) {\n        navigate('/school/dashboard');\n      } else if (university && !university.terms_accepted) {\n        navigate('/school/termsandconditions');\n      }\n    } catch (error) {\n      console.error('Error checking profile:', error);\n    }\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    if (field.includes('.')) {\n      const [parent, child] = field.split('.');\n      setFormData(prev => ({\n        ...prev,\n        [parent]: {\n          ...((prev[parent as keyof typeof prev] ?? {}) as object),\n          [child]: value\n        }\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [field]: value\n      }));\n    }\n    \n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const addProgram = () => {\n    if (newProgram.trim() && !formData.programs.includes(newProgram.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        programs: [...prev.programs, newProgram.trim()]\n      }));\n      setNewProgram('');\n    }\n  };\n\n  const removeProgram = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      programs: prev.programs.filter((_, i) => i !== index)\n    }));\n  };\n\n  const validateStep = (step: number) => {\n    const newErrors: Record<string, string> = {};\n\n    switch (step) {\n      case 1:\n        if (!formData.name.trim()) newErrors.name = 'University name is required';\n        if (!formData.description.trim()) newErrors.description = 'Description is required';\n        if (!formData.website.trim()) newErrors.website = 'Website is required';\n        break;\n      case 2:\n        if (!formData.location.trim()) newErrors.location = 'Location is required';\n        if (!formData.address.street.trim()) newErrors['address.street'] = 'Street address is required';\n        if (!formData.address.city.trim()) newErrors['address.city'] = 'City is required';\n        if (!formData.address.state.trim()) newErrors['address.state'] = 'State is required';\n        if (!formData.address.zipCode.trim()) newErrors['address.zipCode'] = 'ZIP code is required';\n        break;\n      case 3:\n        if (!formData.contact.phone.trim()) newErrors['contact.phone'] = 'Phone is required';\n        if (!formData.contact.email.trim()) newErrors['contact.email'] = 'Email is required';\n        if (!formData.contact.admissionsEmail.trim()) newErrors['contact.admissionsEmail'] = 'Admissions email is required';\n        break;\n      case 4:\n        if (formData.programs.length === 0) newErrors.programs = 'At least one program is required';\n        break;\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const nextStep = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep(prev => Math.min(prev + 1, 4));\n    }\n  };\n\n  const prevStep = () => {\n    setCurrentStep(prev => Math.max(prev - 1, 1));\n  };\n\n  const handleSubmit = async () => {\n    if (!validateStep(4) || !user) return;\n\n    setLoading(true);\n    try {\n      const universityData = {\n        name: formData.name,\n        description: formData.description,\n        location: formData.location,\n        website: formData.website,\n        programs: formData.programs,\n        address: formData.address,\n        contact: formData.contact,\n        profile_completed: true\n      };\n\n      const { error } = await supabase\n        .from('universities')\n        .update(universityData)\n        .eq('user_id', user.id);\n\n      if (error) throw error;\n\n      navigate('/school/dashboard');\n    } catch (error) {\n      console.error('Error saving profile:', error);\n      alert('Error saving profile. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const steps = [\n    { number: 1, title: 'Basic Information', icon: Building },\n    { number: 2, title: 'Location', icon: MapPin },\n    { number: 3, title: 'Contact', icon: Phone },\n    { number: 4, title: 'Academic Info', icon: Users }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Complete Your University Profile</h1>\n          <p className=\"text-gray-600\">Set up your university profile to start attracting international students</p>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step) => {\n              const Icon = step.icon;\n              const isActive = currentStep === step.number;\n              const isCompleted = currentStep > step.number;\n              \n              return (\n                <div key={step.number} className=\"flex flex-col items-center\">\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center border-2 transition-colors ${\n                    isCompleted ? 'bg-green-600 border-green-600 text-white' :\n                    isActive ? 'bg-[#05294E] border-[#05294E] text-white' :\n                    'bg-white border-gray-300 text-gray-400'\n                  }`}>\n                    {isCompleted ? <CheckCircle className=\"h-5 w-5\" /> : <Icon className=\"h-5 w-5\" />}\n                  </div>\n                  <span className={`text-xs mt-2 ${isActive ? 'text-[#05294E] font-medium' : 'text-gray-500'}`}>\n                    {step.title}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Form */}\n        <div className=\"bg-white rounded-xl shadow-lg border border-gray-200 p-8\">\n          {/* Step 1: Basic Information */}\n          {currentStep === 1 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center mb-6\">\n                <Building className=\"h-12 w-12 text-[#05294E] mx-auto mb-3\" />\n                <h2 className=\"text-xl font-bold text-gray-900\">Basic Information</h2>\n                <p className=\"text-gray-600\">Tell us about your university</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">University Name *</label>\n                  <input\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors.name ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Enter university name\"\n                  />\n                  {errors.name && <p className=\"text-red-600 text-xs mt-1\">{errors.name}</p>}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Description *</label>\n                  <textarea\n                    value={formData.description}\n                    onChange={(e) => handleInputChange('description', e.target.value)}\n                    rows={4}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors.description ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Describe your university\"\n                  />\n                  {errors.description && <p className=\"text-red-600 text-xs mt-1\">{errors.description}</p>}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Website *</label>\n                  <input\n                    type=\"url\"\n                    value={formData.website}\n                    onChange={(e) => handleInputChange('website', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors.website ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"https://university.edu\"\n                  />\n                  {errors.website && <p className=\"text-red-600 text-xs mt-1\">{errors.website}</p>}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Location */}\n          {currentStep === 2 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center mb-6\">\n                <MapPin className=\"h-12 w-12 text-[#05294E] mx-auto mb-3\" />\n                <h2 className=\"text-xl font-bold text-gray-900\">Location Information</h2>\n                <p className=\"text-gray-600\">Where is your university located?</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Location (City, State) *</label>\n                  <input\n                    type=\"text\"\n                    value={formData.location}\n                    onChange={(e) => handleInputChange('location', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors.location ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Boston, Massachusetts\"\n                  />\n                  {errors.location && <p className=\"text-red-600 text-xs mt-1\">{errors.location}</p>}\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Street Address *</label>\n                  <input\n                    type=\"text\"\n                    value={formData.address.street}\n                    onChange={(e) => handleInputChange('address.street', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors['address.street'] ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"123 University Avenue\"\n                  />\n                  {errors['address.street'] && <p className=\"text-red-600 text-xs mt-1\">{errors['address.street']}</p>}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">City *</label>\n                  <input\n                    type=\"text\"\n                    value={formData.address.city}\n                    onChange={(e) => handleInputChange('address.city', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors['address.city'] ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Boston\"\n                  />\n                  {errors['address.city'] && <p className=\"text-red-600 text-xs mt-1\">{errors['address.city']}</p>}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">State *</label>\n                  <input\n                    type=\"text\"\n                    value={formData.address.state}\n                    onChange={(e) => handleInputChange('address.state', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors['address.state'] ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Massachusetts\"\n                  />\n                  {errors['address.state'] && <p className=\"text-red-600 text-xs mt-1\">{errors['address.state']}</p>}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">ZIP Code *</label>\n                  <input\n                    type=\"text\"\n                    value={formData.address.zipCode}\n                    onChange={(e) => handleInputChange('address.zipCode', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors['address.zipCode'] ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"02139\"\n                  />\n                  {errors['address.zipCode'] && <p className=\"text-red-600 text-xs mt-1\">{errors['address.zipCode']}</p>}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Country</label>\n                  <input\n                    type=\"text\"\n                    value={formData.address.country}\n                    onChange={(e) => handleInputChange('address.country', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                    placeholder=\"United States\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Contact Information */}\n          {currentStep === 3 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center mb-6\">\n                <Phone className=\"h-12 w-12 text-[#05294E] mx-auto mb-3\" />\n                <h2 className=\"text-xl font-bold text-gray-900\">Contact Information</h2>\n                <p className=\"text-gray-600\">How can students reach your university?</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phone Number *</label>\n                  <input\n                    type=\"tel\"\n                    value={formData.contact.phone}\n                    onChange={(e) => handleInputChange('contact.phone', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors['contact.phone'] ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"+1 (555) 123-4567\"\n                  />\n                  {errors['contact.phone'] && <p className=\"text-red-600 text-xs mt-1\">{errors['contact.phone']}</p>}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fax Number</label>\n                  <input\n                    type=\"tel\"\n                    value={formData.contact.fax}\n                    onChange={(e) => handleInputChange('contact.fax', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                    placeholder=\"+1 (555) 123-4568\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">General Email *</label>\n                  <input\n                    type=\"email\"\n                    value={formData.contact.email}\n                    onChange={(e) => handleInputChange('contact.email', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors['contact.email'] ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"info@university.edu\"\n                  />\n                  {errors['contact.email'] && <p className=\"text-red-600 text-xs mt-1\">{errors['contact.email']}</p>}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Admissions Email *</label>\n                  <input\n                    type=\"email\"\n                    value={formData.contact.admissionsEmail}\n                    onChange={(e) => handleInputChange('contact.admissionsEmail', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] ${\n                      errors['contact.admissionsEmail'] ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"admissions@university.edu\"\n                  />\n                  {errors['contact.admissionsEmail'] && <p className=\"text-red-600 text-xs mt-1\">{errors['contact.admissionsEmail']}</p>}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 4: Academic Information */}\n          {currentStep === 4 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center mb-6\">\n                <Users className=\"h-12 w-12 text-[#05294E] mx-auto mb-3\" />\n                <h2 className=\"text-xl font-bold text-gray-900\">Academic Information</h2>\n                <p className=\"text-gray-600\">Tell us about your academic programs</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Academic Programs *</label>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex gap-2\">\n                      <input\n                        type=\"text\"\n                        value={newProgram}\n                        onChange={(e) => setNewProgram(e.target.value)}\n                        className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                        placeholder=\"Enter program name\"\n                        onKeyPress={(e) => e.key === 'Enter' && addProgram()}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={addProgram}\n                        className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors\"\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                    \n                    {formData.programs.length > 0 && (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {formData.programs.map((program, index) => (\n                          <span\n                            key={index}\n                            className=\"inline-flex items-center bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm\"\n                          >\n                            {program}\n                            <button\n                              type=\"button\"\n                              onClick={() => removeProgram(index)}\n                              className=\"ml-2 text-gray-500 hover:text-red-600\"\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </button>\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                    \n                    {errors.programs && <p className=\"text-red-600 text-xs\">{errors.programs}</p>}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between items-center mt-8 pt-6 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={prevStep}\n              disabled={currentStep === 1}\n              className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n                currentStep === 1\n                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              Previous\n            </button>\n\n            <div className=\"text-sm text-gray-500\">\n              Step {currentStep} of 4\n            </div>\n\n            {currentStep < 4 ? (\n              <button\n                type=\"button\"\n                onClick={nextStep}\n                className=\"bg-[#05294E] text-white px-6 py-2 rounded-lg font-medium hover:bg-[#05294E]/90 transition-colors\"\n              >\n                Next\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                onClick={handleSubmit}\n                disabled={loading}\n                className=\"bg-[#05294E] text-white px-6 py-2 rounded-lg font-medium hover:bg-[#05294E]/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n              >\n                {loading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Complete Setup\n                  </>\n                )}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SchoolProfileSetup;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArrowRight' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sparkles' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heart' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Scholarship' is defined but never used.","line":28,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'scholarshipsError' is assigned a value but never used.","line":34,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":96},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboardData, user]","fix":{"range":[1541,1547],"text":"[loadDashboardData, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9054,9057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9054,9057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  User, \n  Award, \n  BookOpen, \n  Settings, \n  Search, \n  Filter, \n  Calendar, \n  DollarSign, \n  CheckCircle, \n  Clock, \n  AlertCircle,\n  Edit,\n  FileText,\n  Plus,\n  ArrowRight,\n  Sparkles,\n  Target,\n  Heart,\n  Building,\n  MapPin,\n  Star,\n  Zap\n} from 'lucide-react';\nimport { supabase } from '../lib/supabase';\nimport type { Scholarship, Application, StudentProfile } from '../types';\nimport { useAuth } from '../hooks/useAuth';\nimport { useScholarships } from '../hooks/useScholarships';\n\nconst StudentDashboard: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<'overview' | 'scholarships' | 'applications' | 'profile'>('overview');\n  const { scholarships: allScholarships, loading: scholarshipsLoading, error: scholarshipsError } = useScholarships();\n  const [applications, setApplications] = useState<Application[]>([]);\n  const [profile, setProfile] = useState<StudentProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedLevel, setSelectedLevel] = useState('all');\n  const [showProfileEdit, setShowProfileEdit] = useState(false);\n  const { user } = useAuth();\n\n  const [profileForm, setProfileForm] = useState({\n    name: '',\n    phone: '',\n    country: '',\n    field_of_interest: '',\n    academic_level: '',\n    gpa: '',\n    english_proficiency: ''\n  });\n\n  useEffect(() => {\n    if (user) {\n      loadDashboardData();\n    }\n  }, [user]);\n\n  const loadDashboardData = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      \n      const { data: profileData, error: profileError } = await supabase\n        .from('user_profiles')\n        .select(`\n          id,\n          full_name,\n          phone,\n          country,\n          field_of_interest,\n          academic_level,\n          gpa,\n          english_proficiency,\n          created_at,\n          updated_at\n        `)\n        .eq('user_id', user.id)\n        .single();\n      \n      if(profileError && profileError.code !== 'PGRST116') throw profileError;\n      \n      const studentProfile: StudentProfile = {\n        id: profileData?.id || user.id,\n        name: profileData?.full_name || user.name || user.email?.split('@')[0] || '',\n        email: user.email,\n        phone: profileData?.phone,\n        country: profileData?.country,\n        field_of_interest: profileData?.field_of_interest,\n        academic_level: profileData?.academic_level,\n        gpa: profileData?.gpa,\n        english_proficiency: profileData?.english_proficiency,\n        created_at: profileData?.created_at || new Date().toISOString(),\n        updated_at: profileData?.updated_at || new Date().toISOString()\n      };\n      \n      setProfile(studentProfile);\n      setProfileForm({\n        name: studentProfile.name,\n        phone: studentProfile.phone || '',\n        country: studentProfile.country || '',\n        field_of_interest: studentProfile.field_of_interest || '',\n        academic_level: studentProfile.academic_level || '',\n        gpa: studentProfile.gpa?.toString() || '',\n        english_proficiency: studentProfile.english_proficiency || ''\n      });\n\n      const { data: applicationsData, error: applicationsError } = await supabase\n        .from('scholarship_applications')\n        .select(`\n          *,\n          scholarships (\n            *\n          )\n        `)\n        .eq('student_id', user.id);\n\n      if (applicationsError) throw applicationsError;\n\n      setApplications(applicationsData || []);\n      \n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApplyScholarship = async (scholarshipId: string) => {\n    if (!user) return;\n\n    // Check if already applied\n    const alreadyApplied = applications.some(app => app.scholarship_id === scholarshipId);\n    if (alreadyApplied) {\n      alert('You have already applied for this scholarship');\n      return;\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('scholarship_applications')\n        .insert({\n          scholarship_id: scholarshipId,\n          student_id: user.id,\n          status: 'pending',\n        })\n        .select( `\n          *,\n          scholarships (\n            *\n          )\n        `)\n        .single();\n\n      if (error) throw error;\n      \n      setApplications(prev => [...prev, data as Application]);\n      alert('Application submitted successfully!');\n    } catch (error) {\n      console.error('Error applying for scholarship:', error);\n      alert('Error submitting application. Please try again.');\n    }\n  };\n\n  const handleProfileUpdate = async () => {\n    if (!user || !profile) return;\n\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .update({\n          full_name: profileForm.name,\n          phone: profileForm.phone,\n          country: profileForm.country,\n          field_of_interest: profileForm.field_of_interest,\n          academic_level: profileForm.academic_level,\n          gpa: parseFloat(profileForm.gpa) || null,\n          english_proficiency: profileForm.english_proficiency,\n          updated_at: new Date().toISOString()\n        })\n        .eq('user_id', user.id)\n        .select()\n        .single();\n\n      if(error) throw error;\n\n      setProfile(prev => ({...prev, ...data} as StudentProfile));\n      setShowProfileEdit(false);\n      alert('Profile updated successfully!');\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      alert('Error updating profile. Please try again.');\n    }\n  };\n\n  const filteredScholarships = allScholarships.filter(scholarship => {\n    const matchesSearch = (scholarship.title?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||\n                         (scholarship.description?.toLowerCase() || '').includes(searchTerm.toLowerCase());\n    const matchesLevel = selectedLevel === 'all' || (scholarship.level && scholarship.level === selectedLevel);\n    return matchesSearch && matchesLevel;\n  });\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'under_review': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return CheckCircle;\n      case 'rejected': return AlertCircle;\n      case 'under_review': return Clock;\n      default: return Clock;\n    }\n  };\n\n  if (loading || scholarshipsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#05294E]\"></div>\n      </div>\n    );\n  }\n\n  const stats = {\n    totalApplications: applications.length,\n    approvedApplications: applications.filter(app => app.status === 'approved').length,\n    pendingApplications: applications.filter(app => app.status === 'pending' || app.status === 'under_review').length,\n    availableScholarships: allScholarships.length\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                Welcome back, {profile?.name || user?.name}!\n              </h1>\n              <p className=\"text-gray-600\">Track your scholarship applications and discover new opportunities</p>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-[#05294E]/10 px-4 py-2 rounded-xl\">\n                <span className=\"text-sm font-medium text-[#05294E]\">Student Dashboard</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation Tabs */}\n        <div className=\"border-b border-gray-200 mb-8\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {[\n              { id: 'overview', label: 'Overview', icon: BookOpen },\n              { id: 'scholarships', label: 'Find Scholarships', icon: Award },\n              { id: 'applications', label: 'My Applications', icon: FileText },\n              { id: 'profile', label: 'Profile', icon: User }\n            ].map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as any)}\n                  className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center transition-colors ${\n                    activeTab === tab.id\n                      ? 'border-[#05294E] text-[#05294E]'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <Icon className=\"h-4 w-4 mr-2\" />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Overview Tab */}\n        {activeTab === 'overview' && (\n          <div className=\"space-y-8\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-[#05294E]/10 p-3 rounded-lg\">\n                    <Award className=\"h-6 w-6 text-[#05294E]\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Available Scholarships</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.availableScholarships}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-blue-100 p-3 rounded-lg\">\n                    <FileText className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Applications</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.totalApplications}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-green-100 p-3 rounded-lg\">\n                    <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Approved</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.approvedApplications}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-yellow-100 p-3 rounded-lg\">\n                    <Clock className=\"h-6 w-6 text-yellow-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Pending</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.pendingApplications}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Quick Actions</h3>\n                </div>\n                <div className=\"space-y-3\">\n                  <button\n                    onClick={() => setActiveTab('scholarships')}\n                    className=\"w-full bg-[#05294E] text-white py-3 px-4 rounded-lg hover:bg-[#05294E]/90 transition-colors flex items-center justify-center\"\n                  >\n                    <Search className=\"h-4 w-4 mr-2\" />\n                    Find New Scholarships\n                  </button>\n                  <button\n                    onClick={() => setActiveTab('applications')}\n                    className=\"w-full bg-gray-100 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center\"\n                  >\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    View My Applications\n                  </button>\n                  <button\n                    onClick={() => setActiveTab('profile')}\n                    className=\"w-full bg-gray-100 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center\"\n                  >\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Update Profile\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Activity</h3>\n                {applications.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Award className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">No applications yet</p>\n                    <p className=\"text-sm text-gray-400\">Start applying for scholarships to see your activity here</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {applications.slice(0, 3).map((application) => {\n                      const StatusIcon = getStatusIcon(application.status);\n                      return (\n                        <div key={application.id} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                          <StatusIcon className=\"h-5 w-5 text-gray-600\" />\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium text-gray-900\">{application.scholarships?.title}</p>\n                            <p className=\"text-sm text-gray-500\">Applied {new Date(application.applied_at).toLocaleDateString()}</p>\n                          </div>\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(application.status)}`}>\n                            {application.status}\n                          </span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Scholarships Tab */}\n        {activeTab === 'scholarships' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Find Scholarships</h2>\n            </div>\n\n            {/* Search and Filters */}\n            <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search scholarships...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                  />\n                </div>\n\n                <select\n                  value={selectedLevel}\n                  onChange={(e) => setSelectedLevel(e.target.value)}\n                  className=\"px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                >\n                  <option value=\"all\">All Levels</option>\n                  <option value=\"undergraduate\">Undergraduate</option>\n                  <option value=\"graduate\">Graduate</option>\n                  <option value=\"doctorate\">Doctorate</option>\n                </select>\n\n                <div className=\"flex items-center justify-center bg-gray-50 rounded-lg px-3 py-3\">\n                  <span className=\"text-sm text-gray-600\">\n                    <span className=\"font-semibold text-[#05294E]\">{filteredScholarships.length}</span> scholarships found\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Scholarships Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredScholarships.map((scholarship) => {\n                const alreadyApplied = applications.some(app => app.scholarship_id === scholarship.id);\n                \n                return (\n                  <div key={scholarship.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-shadow\">\n                    <div className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <h3 className=\"font-semibold text-gray-900 line-clamp-2\">{scholarship.title}</h3>\n                        {scholarship.is_exclusive && (\n                          <span className=\"bg-[#D0151C] text-white px-2 py-1 rounded-full text-xs font-bold\">\n                            Exclusive\n                          </span>\n                        )}\n                      </div>\n                      \n                      <div className=\"space-y-3 mb-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-500\">Amount</span>\n                          <span className=\"font-semibold text-green-600\">{formatAmount(scholarship.amount)}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-500\">Deadline</span>\n                          <span className=\"text-sm text-gray-900\">\n                            {new Date(scholarship.deadline).toLocaleDateString()}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-500\">Level</span>\n                          <span className=\"text-sm text-gray-900 capitalize\">{scholarship.level}</span>\n                        </div>\n\n                        <div className=\"flex items-center text-sm text-gray-600\">\n                          <Building className=\"h-4 w-4 mr-2\" />\n                          {scholarship.university_id || 'N/A'}\n                        </div>\n                      </div>\n\n                      <button\n                        onClick={() => handleApplyScholarship(scholarship.id)}\n                        disabled={alreadyApplied}\n                        className={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${\n                          alreadyApplied\n                            ? 'bg-gray-100 text-gray-500 cursor-not-allowed'\n                            : 'bg-[#05294E] text-white hover:bg-[#05294E]/90'\n                        }`}\n                      >\n                        {alreadyApplied ? 'Already Applied' : 'Apply Now'}\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {filteredScholarships.length === 0 && (\n              <div className=\"text-center py-12\">\n                <Award className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No scholarships found</h3>\n                <p className=\"text-gray-500\">Try adjusting your search criteria</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Applications Tab */}\n        {activeTab === 'applications' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">My Applications</h2>\n            </div>\n\n            {applications.length === 0 ? (\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n                <FileText className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-medium text-gray-900 mb-2\">No applications yet</h3>\n                <p className=\"text-gray-500 mb-6\">Start applying for scholarships to track your progress here</p>\n                <button\n                  onClick={() => setActiveTab('scholarships')}\n                  className=\"bg-[#05294E] text-white px-6 py-3 rounded-lg hover:bg-[#05294E]/90 transition-colors\"\n                >\n                  Find Scholarships\n                </button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {applications.map((application) => {\n                  const StatusIcon = getStatusIcon(application.status);\n                  \n                  return (\n                    <div key={application.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                            {application.scholarships?.title}\n                          </h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600\">\n                            <div>\n                              <span className=\"font-medium\">Amount:</span> {formatAmount(application.scholarships?.amount || 0)}\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Applied:</span> {new Date(application.applied_at).toLocaleDateString()}\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">University:</span> {application.scholarships?.university_id || 'N/A'}\n                            </div>\n                          </div>\n                          {application.notes && (\n                            <div className=\"mt-3 p-3 bg-gray-50 rounded-lg\">\n                              <p className=\"text-sm text-gray-700\">{application.notes}</p>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"ml-6 flex flex-col items-end space-y-2\">\n                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(application.status)}`}>\n                            <StatusIcon className=\"h-3 w-3 mr-1\" />\n                            {application.status.replace('_', ' ').toUpperCase()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Profile Tab */}\n        {activeTab === 'profile' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">My Profile</h2>\n              {!showProfileEdit && (\n                <button\n                  onClick={() => setShowProfileEdit(true)}\n                  className=\"bg-[#05294E] text-white px-4 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors flex items-center\"\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Profile\n                </button>\n              )}\n            </div>\n\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n              {showProfileEdit ? (\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Edit Profile</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Full Name</label>\n                      <input\n                        type=\"text\"\n                        value={profileForm.name}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, name: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phone</label>\n                      <input\n                        type=\"tel\"\n                        value={profileForm.phone}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, phone: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Country</label>\n                      <input\n                        type=\"text\"\n                        value={profileForm.country}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, country: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Field of Interest</label>\n                      <select\n                        value={profileForm.field_of_interest}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, field_of_interest: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                      >\n                        <option value=\"\">Select field</option>\n                        <option value=\"engineering\">Engineering</option>\n                        <option value=\"business\">Business</option>\n                        <option value=\"computer-science\">Computer Science</option>\n                        <option value=\"medicine\">Medicine</option>\n                        <option value=\"law\">Law</option>\n                        <option value=\"arts\">Arts & Humanities</option>\n                        <option value=\"sciences\">Natural Sciences</option>\n                        <option value=\"other\">Other</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Academic Level</label>\n                      <select\n                        value={profileForm.academic_level}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, academic_level: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                      >\n                        <option value=\"\">Select level</option>\n                        <option value=\"high-school\">High School</option>\n                        <option value=\"undergraduate\">Undergraduate</option>\n                        <option value=\"graduate\">Graduate</option>\n                        <option value=\"doctorate\">Doctorate</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">GPA</label>\n                      <input\n                        type=\"number\"\n                        step=\"0.1\"\n                        min=\"0\"\n                        max=\"4\"\n                        value={profileForm.gpa}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, gpa: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">English Proficiency</label>\n                      <select\n                        value={profileForm.english_proficiency}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, english_proficiency: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E]\"\n                      >\n                        <option value=\"\">Select proficiency</option>\n                        <option value=\"beginner\">Beginner</option>\n                        <option value=\"intermediate\">Intermediate</option>\n                        <option value=\"advanced\">Advanced</option>\n                        <option value=\"native\">Native</option>\n                        <option value=\"toefl\">TOEFL Certified</option>\n                        <option value=\"ielts\">IELTS Certified</option>\n                      </select>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-3 pt-4\">\n                    <button\n                      onClick={handleProfileUpdate}\n                      className=\"bg-[#05294E] text-white px-6 py-2 rounded-lg hover:bg-[#05294E]/90 transition-colors\"\n                    >\n                      Save Changes\n                    </button>\n                    <button\n                      onClick={() => setShowProfileEdit(false)}\n                      className=\"bg-gray-200 text-gray-700 px-6 py-2 rounded-lg hover:bg-gray-300 transition-colors\"\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Personal Information</h3>\n                      <div className=\"space-y-3\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Name</label>\n                          <p className=\"text-gray-900\">{profile?.name || 'Not provided'}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Email</label>\n                          <p className=\"text-gray-900\">{profile?.email}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Phone</label>\n                          <p className=\"text-gray-900\">{profile?.phone || 'Not provided'}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Country</label>\n                          <p className=\"text-gray-900\">{profile?.country || 'Not provided'}</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Academic Information</h3>\n                      <div className=\"space-y-3\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Field of Interest</label>\n                          <p className=\"text-gray-900\">{profile?.field_of_interest || 'Not provided'}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Academic Level</label>\n                          <p className=\"text-gray-900\">{profile?.academic_level || 'Not provided'}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">GPA</label>\n                          <p className=\"text-gray-900\">{profile?.gpa || 'Not provided'}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">English Proficiency</label>\n                          <p className=\"text-gray-900\">{profile?.english_proficiency || 'Not provided'}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StudentDashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard\\CartPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DocumentUpload' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'STRIPE_CHECKOUT_URL' is assigned a value but never used.","line":10,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleProceedToPayment' is assigned a value but never used.","line":48,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":31}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useCartStore } from '../../stores/applicationStore';\nimport { useNavigate } from 'react-router-dom';\nimport { ShoppingCart, Trash2, CheckCircle, Loader2 } from 'lucide-react';\nimport { StripeCheckout } from '../../components/StripeCheckout';\nimport { useAuth } from '../../hooks/useAuth';\nimport { DocumentUpload } from '../../components/DocumentUpload';\nimport DocumentUploadModal from '../../components/DocumentUploadModal';\n\nconst STRIPE_CHECKOUT_URL = 'https://checkout.stripe.com/pay/cs_test_YOUR_CHECKOUT_LINK'; // Substitua pelo link real do produto Stripe\nconst SCHOLARSHIP_PRICE = 550;\n\nconst CartPage: React.FC = () => {\n  const { cart, removeFromCart, clearCart, fetchCart, isLoading } = useCartStore();\n  const navigate = useNavigate();\n  const { user, userProfile, updateUserProfile } = useAuth();\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [selectedScholarship, setSelectedScholarship] = useState<string | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      fetchCart(user.id);\n    }\n  }, [user, fetchCart]);\n\n  const total = SCHOLARSHIP_PRICE;\n\n  const handleNextStep = () => {\n    setShowUploadModal(true);\n  };\n\n  const handleUploadSuccess = async () => {\n    setIsProcessing(true);\n    try {\n      if (userProfile) {\n        await updateUserProfile({ documents_status: 'approved' });\n      }\n      setShowUploadModal(false);\n    } catch (error) {\n      console.error('Failed to update user profile:', error);\n      // Optionally, show an error message to the user\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleProceedToPayment = () => {\n    if (selectedScholarship) {\n      // Logic to proceed to payment with the selected scholarship\n      console.log('Proceeding to payment for:', selectedScholarship);\n      // For now, let's navigate to a generic checkout page\n      // In a real scenario, you would pass scholarship details to the checkout\n      navigate('/student/dashboard/checkout');\n    }\n  };\n\n  const handleRemoveFromCart = (scholarshipId: string) => {\n    if (user) {\n      removeFromCart(scholarshipId, user.id);\n    }\n  };\n\n  const handleClearCart = () => {\n    if (user) {\n      clearCart(user.id);\n    }\n  };\n\n  const renderCartContents = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex justify-center items-center h-48\">\n          <Loader2 className=\"animate-spin h-8 w-8 text-blue-600\" />\n        </div>\n      );\n    }\n    \n    if (userProfile?.documents_status === 'approved') {\n      return (\n        <div>\n          <h2 className=\"text-xl font-bold mb-4 text-green-600 flex items-center gap-2\">\n            <CheckCircle /> Documents Approved! Please select one scholarship to proceed.\n          </h2>\n          <ul className=\"divide-y divide-slate-200 mb-8\">\n            {cart.map((scholarship) => (\n              <li key={scholarship.id} className=\"flex items-center justify-between py-4\">\n                <label className=\"flex items-center gap-4 cursor-pointer w-full\">\n                  <input\n                    type=\"radio\"\n                    name=\"scholarship\"\n                    value={scholarship.id}\n                    checked={selectedScholarship === scholarship.id}\n                    onChange={() => setSelectedScholarship(scholarship.id)}\n                    className=\"h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300 rounded-full\"\n                  />\n                  <div>\n                    <div className=\"font-bold text-slate-900\">{scholarship.title}</div>\n                    <div className=\"text-slate-600 text-sm\">{scholarship.universities?.name || 'Unknown University'}</div>\n                  </div>\n                </label>\n                <span className=\"font-bold text-green-700 text-lg\">${SCHOLARSHIP_PRICE}</span>\n              </li>\n            ))}\n          </ul>\n          <div className=\"mt-6\">\n            <StripeCheckout\n                productId=\"APPLICATION_FEE\"\n                paymentType=\"application_fee\"\n                feeType=\"application_fee\"\n                scholarshipsIds={selectedScholarship ? [selectedScholarship] : []}\n                successUrl={`${window.location.origin}/application-fee/success?session_id={CHECKOUT_SESSION_ID}`}\n                cancelUrl={`${window.location.origin}/application-fee/cancel`}\n                buttonText=\"Proceed to Payment\"\n                className=\"w-full bg-green-600 hover:bg-green-700 disabled:bg-slate-300 disabled:cursor-not-allowed\"\n                disabled={!selectedScholarship || isProcessing}\n                metadata={{ selected_scholarship_id: selectedScholarship }}\n             />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <ul className=\"divide-y divide-slate-200 mb-8\">\n          {cart.map((scholarship) => (\n            <li key={scholarship.id} className=\"flex items-center justify-between py-4\">\n              <div>\n                <div className=\"font-bold text-slate-900\">{scholarship.title}</div>\n                <div className=\"text-slate-600 text-sm\">{scholarship.universities?.name || 'Unknown University'}</div>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <span className=\"font-bold text-green-700 text-lg\">${total}</span>\n                <button\n                  onClick={() => handleRemoveFromCart(scholarship.id)}\n                  className=\"text-red-600 hover:text-red-800\"\n                >\n                  <Trash2 className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n        <div className=\"flex items-center justify-between mb-6\">\n          <span className=\"font-bold text-slate-700 text-lg\">Total</span>\n          <span className=\"font-bold text-blue-700 text-2xl\">${total * cart.length}</span>\n        </div>\n        <button\n          onClick={handleNextStep}\n          disabled={isProcessing}\n          className=\"w-full bg-blue-600 text-white py-3 rounded-xl font-bold hover:bg-blue-700 transition-all duration-300 mb-4 disabled:bg-slate-300\"\n        >\n          {isProcessing ? 'Processing...' : 'Next Step'}\n        </button>\n        <button\n          onClick={handleClearCart}\n          className=\"w-full bg-slate-100 text-slate-700 py-3 px-6 rounded-2xl font-medium text-sm hover:bg-slate-200 transition-all duration-300\"\n        >\n          Clear Cart\n        </button>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto py-12 px-4\">\n      <h1 className=\"text-3xl font-bold mb-8 flex items-center gap-2\">\n        <ShoppingCart className=\"h-7 w-7 text-[#05294E]\" /> Cart\n      </h1>\n      {cart.length === 0 ? (\n        <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-12 text-center\">\n          <h2 className=\"text-xl font-bold text-slate-700 mb-4\">Your cart is empty</h2>\n          <button\n            onClick={() => navigate('/student/dashboard/scholarships')}\n            className=\"bg-[#05294E] text-white px-6 py-3 rounded-xl font-bold hover:bg-[#05294E]/90 transition-all\"\n          >\n            Browse Scholarships\n          </button>\n        </div>\n      ) : (\n        <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8\">\n          {renderCartContents()}\n        </div>\n      )}\n      {showUploadModal && userProfile && (\n        <DocumentUploadModal\n          userId={userProfile.user_id}\n          onSuccess={handleUploadSuccess}\n          onClose={() => setShowUploadModal(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CartPage; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard\\CollegeEnrollmentCheckout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard\\DocumentsAndScholarshipChoice.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clearCart' is assigned a value but never used.","line":9,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport { useCartStore } from '../../stores/applicationStore';\r\nimport { DocumentUpload } from '../../components/DocumentUpload';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst DocumentsAndScholarshipChoice: React.FC = () => {\r\n  const { userProfile } = useAuth();\r\n  const { cart, clearCart } = useCartStore();\r\n  const [documentsApproved, setDocumentsApproved] = useState(userProfile?.documents_status === 'approved');\r\n  const [selectedScholarshipId, setSelectedScholarshipId] = useState<string | null>(null);\r\n  const navigate = useNavigate();\r\n\r\n  const handleContinue = () => {\r\n    if (selectedScholarshipId) {\r\n      window.localStorage.setItem('selectedScholarshipId', selectedScholarshipId);\r\n      navigate('/student/dashboard/college-enrollment-checkout');\r\n    }\r\n  };\r\n\r\n  if (!userProfile) return null;\r\n\r\n  return (\r\n    <div className=\"max-w-2xl mx-auto py-12 px-4\">\r\n      <h1 className=\"text-3xl font-extrabold mb-8 text-center text-slate-800\">Required Documents & Scholarship Choice</h1>\r\n      {!documentsApproved ? (\r\n        <>\r\n          <p className=\"text-slate-600 text-center mb-6 text-lg\">To proceed, please upload all required documents below. All files must be clear and legible.</p>\r\n          <DocumentUpload userId={userProfile.user_id} onComplete={() => setDocumentsApproved(true)} />\r\n        </>\r\n      ) : (\r\n        <div className=\"bg-white rounded-2xl shadow-md border border-slate-200 p-8 animate-fade-in\">\r\n          <h2 className=\"text-2xl font-bold mb-6 text-slate-800 text-center\">Select Your Scholarship</h2>\r\n          <p className=\"text-slate-600 text-center mb-4\">Choose one scholarship to continue your application process.</p>\r\n          <ul className=\"mb-6 space-y-4\">\r\n            {cart.map((scholarship) => (\r\n              <li key={scholarship.id} className={`flex items-center justify-between p-4 rounded-xl border transition-all duration-200 ${selectedScholarshipId === scholarship.id ? 'border-blue-600 bg-blue-50 shadow-lg' : 'border-slate-200 bg-slate-50'}`}>\r\n                <div>\r\n                  <div className=\"font-bold text-slate-900 text-lg\">{scholarship.title}</div>\r\n                  <div className=\"text-slate-600 text-sm\">{scholarship.universities?.name || 'Unknown University'}</div>\r\n                </div>\r\n                <button\r\n                  onClick={() => setSelectedScholarshipId(scholarship.id)}\r\n                  className={`px-5 py-2 rounded-xl font-bold transition-all duration-200 ${selectedScholarshipId === scholarship.id ? 'bg-blue-600 text-white shadow' : 'bg-slate-200 text-slate-700 hover:bg-blue-100'}`}\r\n                >\r\n                  {selectedScholarshipId === scholarship.id ? 'Selected' : 'Select'}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button\r\n            onClick={handleContinue}\r\n            disabled={!selectedScholarshipId}\r\n            className=\"w-full bg-blue-600 text-white py-4 rounded-xl font-extrabold text-lg hover:bg-blue-700 transition-all duration-300 disabled:opacity-50 shadow-lg\"\r\n          >\r\n            Continue to College Enrollment Payment\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocumentsAndScholarshipChoice; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard\\MyApplications.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1590,1593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1590,1593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":199,"column":76,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7585,7737],"text":"\n            Start applying for scholarships to track your progress here. We&apos;ll help you find the best opportunities that match your profile.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7585,7737],"text":"\n            Start applying for scholarships to track your progress here. We&lsquo;ll help you find the best opportunities that match your profile.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7585,7737],"text":"\n            Start applying for scholarships to track your progress here. We&#39;ll help you find the best opportunities that match your profile.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7585,7737],"text":"\n            Start applying for scholarships to track your progress here. We&rsquo;ll help you find the best opportunities that match your profile.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  FileText, \n  CheckCircle, \n  Clock, \n  XCircle, \n  AlertCircle, \n  Calendar, \n  DollarSign, \n  Building, \n  Eye, \n  Search,\n  Award,\n  ArrowRight\n} from 'lucide-react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\nimport { supabase } from '../../lib/supabase';\nimport { Application, Scholarship } from '../../types';\nimport { StripeCheckout } from '../../components/StripeCheckout';\n\n// Combine os tipos para incluir os detalhes da bolsa na aplicação\ntype ApplicationWithScholarship = Application & {\n  scholarships: Scholarship | null;\n};\n\nconst MyApplications: React.FC = () => {\n  const { user } = useAuth();\n  const [applications, setApplications] = useState<ApplicationWithScholarship[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  useEffect(() => {\n    const fetchApplications = async () => {\n      if (!user) return;\n      setLoading(true);\n      setError(null);\n      try {\n        console.log(`Fetching applications for user: ${user.id}`);\n        const { data, error } = await supabase\n          .from('scholarship_applications')\n          .select('*, scholarships(*)')\n          .eq('student_id', user.id);\n\n        console.log('Fetched data:', data);\n        if (error) {\n          throw error;\n        }\n\n        setApplications(data as ApplicationWithScholarship[]);\n      } catch (err: any) {\n        setError(err.message || 'Failed to fetch applications.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchApplications();\n  }, [user]);\n\n\n  const filteredApplications = applications.filter(application => {\n    const scholarshipTitle = application.scholarships?.title || '';\n    const universityName = application.scholarships?.universities?.name || '';\n    \n    const matchesSearch = scholarshipTitle.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         universityName.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || application.status === statusFilter;\n\n    return matchesSearch && matchesStatus;\n  });\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800 border-green-200';\n      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';\n      case 'under_review': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'pending_scholarship_fee': return 'bg-blue-100 text-blue-800 border-blue-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return CheckCircle;\n      case 'rejected': return XCircle;\n      case 'under_review': return AlertCircle;\n      case 'pending_scholarship_fee': return DollarSign;\n      default: return Clock;\n    }\n  };\n\n  const getStatusMessage = (status: string) => {\n    switch (status) {\n      case 'approved': return 'Congratulations! Your application has been approved.';\n      case 'rejected': return 'Unfortunately, your application was not selected.';\n      case 'under_review': return 'Your application is currently being reviewed.';\n      case 'pending_scholarship_fee': return 'Pending scholarship fee payment.';\n      default: return 'Your application is pending review.';\n    }\n  };\n\n  const stats = {\n    total: applications.length,\n    pending: applications.filter(app => app.status === 'pending').length,\n    approved: applications.filter(app => app.status === 'approved').length,\n    rejected: applications.filter(app => app.status === 'rejected').length,\n    under_review: applications.filter(app => app.status === 'under_review').length,\n    pending_scholarship_fee: applications.filter(app => app.status === 'pending_scholarship_fee').length,\n  };\n\n  if (loading) {\n    return <div>Loading applications...</div>;\n  }\n\n  if (error) {\n    return <div className=\"text-red-500\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-900\">My Applications</h2>\n          <p className=\"text-slate-600\">Track the status of your scholarship applications</p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Total Applications</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.total}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n              <FileText className=\"h-6 w-6 text-blue-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Approved</p>\n              <p className=\"text-3xl font-bold text-green-600\">{stats.approved}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Under Review</p>\n              <p className=\"text-3xl font-bold text-yellow-600\">{stats.under_review}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-yellow-100 rounded-xl flex items-center justify-center\">\n              <AlertCircle className=\"h-6 w-6 text-yellow-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Pending</p>\n              <p className=\"text-3xl font-bold text-gray-600\">{stats.pending}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-gray-100 rounded-xl flex items-center justify-center\">\n              <Clock className=\"h-6 w-6 text-gray-600\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {applications.length === 0 ? (\n        <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-16 text-center\">\n          <div className=\"w-24 h-24 bg-gradient-to-br from-blue-100 to-blue-200 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n            <FileText className=\"h-12 w-12 text-blue-600\" />\n          </div>\n          <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">No applications yet</h3>\n          <p className=\"text-slate-500 mb-8 max-w-lg mx-auto\">\n            Start applying for scholarships to track your progress here. We'll help you find the best opportunities that match your profile.\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8 max-w-4xl mx-auto\">\n            <div className=\"p-6 bg-slate-50 rounded-2xl\">\n              <Award className=\"h-8 w-8 text-blue-600 mx-auto mb-3\" />\n              <h4 className=\"font-bold text-slate-900 mb-2\">Find Scholarships</h4>\n              <p className=\"text-sm text-slate-600\">Browse through hundreds of opportunities</p>\n            </div>\n            <div className=\"p-6 bg-slate-50 rounded-2xl\">\n              <FileText className=\"h-8 w-8 text-green-600 mx-auto mb-3\" />\n              <h4 className=\"font-bold text-slate-900 mb-2\">Apply Easily</h4>\n              <p className=\"text-sm text-slate-600\">Simple application process with guidance</p>\n            </div>\n            <div className=\"p-6 bg-slate-50 rounded-2xl\">\n              <CheckCircle className=\"h-8 w-8 text-purple-600 mx-auto mb-3\" />\n              <h4 className=\"font-bold text-slate-900 mb-2\">Track Progress</h4>\n              <p className=\"text-sm text-slate-600\">Monitor your applications in real-time</p>\n            </div>\n          </div>\n          \n          <Link\n            to=\"/student/dashboard/scholarships\"\n            className=\"bg-blue-600 text-white px-8 py-4 rounded-xl hover:bg-blue-700 transition-all duration-300 font-bold shadow-lg hover:shadow-xl transform hover:scale-105 inline-flex items-center\"\n          >\n            Find Scholarships\n            <ArrowRight className=\"ml-2 h-5 w-5\" />\n          </Link>\n        </div>\n      ) : (\n        <>\n          {/* Filters */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-slate-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search applications...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-full pl-12 pr-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex gap-4\">\n                <select\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value)}\n                  className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"under_review\">Under Review</option>\n                  <option value=\"approved\">Approved</option>\n                  <option value=\"rejected\">Rejected</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"mt-4 flex items-center text-sm text-slate-600\">\n              <span className=\"font-medium\">{filteredApplications.length}</span>\n              <span className=\"ml-1\">\n                application{filteredApplications.length !== 1 ? 's' : ''} found\n              </span>\n            </div>\n          </div>\n\n          {/* Applications List */}\n          <div className=\"space-y-4\">\n            {filteredApplications.map((application) => {\n              const Icon = getStatusIcon(application.status);\n              const scholarship = application.scholarships;\n\n              if (!scholarship) return null; // Skip rendering if scholarship data is missing\n\n              return (\n                <div key={application.id} className=\"bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden hover:shadow-lg transition-all duration-300\">\n                  <div className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                            <Award className=\"h-6 w-6 text-white\" />\n                          </div>\n                          <div>\n                            <h3 className=\"text-xl font-bold text-slate-900 mb-1\">\n                              {scholarship.title}\n                            </h3>\n                            <div className=\"flex items-center text-slate-600\">\n                              <Building className=\"h-4 w-4 mr-2\" />\n                              {scholarship.universities?.name}\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                          <div className=\"flex items-center\">\n                            <DollarSign className=\"h-4 w-4 mr-2 text-green-600\" />\n                            <span className=\"font-semibold text-green-600\">\n                              {formatAmount(scholarship.amount || 0)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"h-4 w-4 mr-2 text-slate-500\" />\n                            <span className=\"text-slate-600\">Applied on {new Date(application.applied_at).toLocaleDateString()}</span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <span className=\"text-slate-600 capitalize\">\n                              Level: {scholarship.level}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"ml-6 flex flex-col items-end space-y-3\">\n                        <span className={`inline-flex items-center px-4 py-2 rounded-xl text-sm font-medium border ${getStatusColor(application.status)}`}>\n                          <Icon className=\"h-4 w-4 mr-2\" />\n                          {application.status.replace('_', ' ').toUpperCase()}\n                        </span>\n                        \n                        <button className=\"text-blue-600 hover:text-blue-700 font-medium text-sm flex items-center\">\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View Details\n                        </button>\n                      </div>\n                    </div>\n\n                    {/* Status Message */}\n                    <div className={`p-4 rounded-xl border ${\n                      application.status === 'approved' ? 'bg-green-50 border-green-200' :\n                      application.status === 'rejected' ? 'bg-red-50 border-red-200' :\n                      application.status === 'under_review' ? 'bg-yellow-50 border-yellow-200' :\n                      'bg-gray-50 border-gray-200'\n                    }`}>\n                      <p className={`text-sm font-medium ${\n                        application.status === 'approved' ? 'text-green-800' :\n                        application.status === 'rejected' ? 'text-red-800' :\n                        application.status === 'under_review' ? 'text-yellow-800' :\n                        'text-gray-800'\n                      }`}>\n                        {getStatusMessage(application.status)}\n                      </p>\n                      \n                      {application.notes && (\n                        <p className=\"text-sm text-slate-600 mt-2\">\n                          <strong>Note:</strong> {application.notes}\n                        </p>\n                      )}\n                    </div>\n\n                    {application.status === 'pending_scholarship_fee' && (\n                      <div className=\"p-4 bg-blue-50 border-t border-blue-200\">\n                        <p className=\"text-blue-800 font-semibold mb-2 text-center\">\n                          Action Required: Please pay the scholarship fee to proceed.\n                        </p>\n                        <StripeCheckout\n                          productId=\"SCHOLARSHIPS_FEE\"\n                          paymentType=\"scholarship_fee\"\n                          feeType=\"enrollment_fee\"\n                          successUrl={`${window.location.origin}/scholarship-fee-success`}\n                          cancelUrl={window.location.href} // volta para a mesma página\n                          buttonText=\"Pay Scholarship Fee ($550)\"\n                          className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                          metadata={{ application_id: application.id }}\n                        />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {filteredApplications.length === 0 && (\n            <div className=\"text-center py-12\">\n              <FileText className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No applications found</h3>\n              <p className=\"text-slate-500\">\n                {searchTerm ? `No applications match \"${searchTerm}\"` : 'No applications with the selected status'}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MyApplications;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard\\Overview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[484,487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[484,487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[505,508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[505,508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[528,531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[528,531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'profile' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":10}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  Award, \n  FileText, \n  CheckCircle, \n  Clock, \n  TrendingUp, \n  Search, \n  Target, \n  BookOpen,\n  ArrowUpRight,\n  Calendar,\n  Building,\n  Star,\n  Eye,\n  CreditCard\n} from 'lucide-react';\nimport { StripeCheckout } from '../../components/StripeCheckout';\nimport { useAuth } from '../../hooks/useAuth';\nimport { DocumentUpload } from '../../components/DocumentUpload';\n\ninterface OverviewProps {\n  profile: any;\n  scholarships: any[];\n  applications: any[];\n  stats: {\n    totalApplications: number;\n    approvedApplications: number;\n    pendingApplications: number;\n    availableScholarships: number;\n  };\n  onApplyScholarship: (scholarshipId: string) => void;\n}\n\nconst Overview: React.FC<OverviewProps> = ({ \n  profile, \n  scholarships, \n  applications, \n  stats, \n  onApplyScholarship\n}) => {\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'under_review': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return CheckCircle;\n      case 'rejected': return Clock;\n      case 'under_review': return Clock;\n      default: return Clock;\n    }\n  };\n\n  const quickActions = [\n    {\n      title: 'Find Scholarships',\n      description: 'Discover new scholarship opportunities',\n      icon: Search,\n      color: 'bg-gradient-to-r from-blue-500 to-blue-600',\n      link: '/student/dashboard/scholarships',\n      count: stats.availableScholarships\n    },\n    {\n      title: 'My Applications',\n      description: 'Track your application status',\n      icon: FileText,\n      color: 'bg-gradient-to-r from-green-500 to-green-600',\n      link: '/student/dashboard/applications',\n      count: stats.totalApplications\n    },\n    {\n      title: 'Update Profile',\n      description: 'Keep your profile current',\n      icon: Target,\n      color: 'bg-gradient-to-r from-purple-500 to-purple-600',\n      link: '/student/dashboard/profile',\n      count: null\n    }\n  ];\n\n  const { user, userProfile } = useAuth();\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Welcome Message */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 rounded-2xl p-8 text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n        <div className=\"relative z-10\">\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <div className=\"w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center\">\n              <Award className=\"h-8 w-8 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-3xl font-bold mb-2\">\n                Welcome back, {userProfile?.full_name || user?.email || 'Student'}!\n              </h2>\n              <p className=\"text-blue-100 text-lg\">\n                Continue your journey to academic excellence\n              </p>\n            </div>\n          </div>\n\n          {userProfile && !userProfile.has_paid_selection_process_fee && (\n            <div className=\"bg-white/10 backdrop-blur-sm border border-white/30 rounded-xl p-6 mb-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center\">\n                  <CreditCard className=\"h-6 w-6 text-white mr-3\" />\n                  <div>\n                    <h3 className=\"text-xl font-bold text-white\">Selection Process</h3>\n                    <p className=\"text-blue-100\">Complete your application process</p>\n                  </div>\n                </div>\n                <div className=\"text-2xl font-bold text-white\">$350</div>\n              </div>\n              <p className=\"text-blue-100 mb-4\">\n                Start your journey to American education by completing our comprehensive selection process.\n              </p>\n              <StripeCheckout \n                productId=\"SELECTION_PROCESS\"\n                feeType=\"application_fee\"\n                buttonText=\"Start Selection Process\"\n              />\n            </div>\n          )}\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-white/10 backdrop-blur-sm p-6 rounded-xl border border-white/20\">\n              <Award className=\"h-8 w-8 text-white mb-4\" />\n              <h3 className=\"font-bold text-white mb-2\">Discover Scholarships</h3>\n              <p className=\"text-blue-100 text-sm\">Find opportunities that match your profile</p>\n            </div>\n            <div className=\"bg-white/10 backdrop-blur-sm p-6 rounded-xl border border-white/20\">\n              <FileText className=\"h-8 w-8 text-yellow-400 mb-4\" />\n              <h3 className=\"font-bold text-white mb-2\">Apply with Confidence</h3>\n              <p className=\"text-blue-100 text-sm\">Get guidance throughout the process</p>\n            </div>\n            <div className=\"bg-white/10 backdrop-blur-sm p-6 rounded-xl border border-white/20\">\n              <CheckCircle className=\"h-8 w-8 text-green-400 mb-4\" />\n              <h3 className=\"font-bold text-white mb-2\">Track Your Progress</h3>\n              <p className=\"text-blue-100 text-sm\">Monitor applications in real-time</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Available Scholarships</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.availableScholarships}</p>\n              <div className=\"flex items-center mt-2\">\n                <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-sm font-medium text-green-600\">New opportunities</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <Award className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">My Applications</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.totalApplications}</p>\n              <div className=\"flex items-center mt-2\">\n                <FileText className=\"h-4 w-4 text-blue-500 mr-1\" />\n                <span className=\"text-sm font-medium text-blue-600\">Total submitted</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <FileText className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Approved</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.approvedApplications}</p>\n              <div className=\"flex items-center mt-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-sm font-medium text-green-600\">Successful</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <CheckCircle className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 group\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-500 mb-1\">Pending</p>\n              <p className=\"text-3xl font-bold text-slate-900\">{stats.pendingApplications}</p>\n              <div className=\"flex items-center mt-2\">\n                <Clock className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                <span className=\"text-sm font-medium text-yellow-600\">Under review</span>\n              </div>\n            </div>\n            <div className=\"w-14 h-14 bg-gradient-to-br from-yellow-500 to-yellow-600 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n              <Clock className=\"h-7 w-7 text-white\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {quickActions.map((action, index) => {\n          const Icon = action.icon;\n          return (\n            <Link\n              key={index}\n              to={action.link}\n              className=\"group block p-6 bg-white rounded-2xl shadow-sm border border-slate-200 hover:shadow-lg transition-all duration-300 hover:-translate-y-1\"\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-12 h-12 ${action.color} rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>\n                  <Icon className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"flex items-center\">\n                  {action.count !== null && (\n                    <span className=\"text-2xl font-bold text-slate-900 mr-2\">{action.count}</span>\n                  )}\n                  <ArrowUpRight className=\"h-5 w-5 text-slate-400 group-hover:text-slate-600 transition-colors\" />\n                </div>\n              </div>\n              <h3 className=\"font-bold text-slate-900 mb-2\">{action.title}</h3>\n              <p className=\"text-slate-600 text-sm\">{action.description}</p>\n            </Link>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Recent Applications */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200\">\n            <div className=\"p-6 border-b border-slate-200\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-900\">Recent Applications</h3>\n                  <p className=\"text-slate-500 text-sm\">Track your scholarship applications</p>\n                </div>\n                <Link\n                  to=\"/student/dashboard/applications\"\n                  className=\"text-blue-600 hover:text-blue-700 font-medium text-sm flex items-center\"\n                >\n                  View All\n                  <ArrowUpRight className=\"h-4 w-4 ml-1\" />\n                </Link>\n              </div>\n            </div>\n            \n            <div className=\"p-6\">\n              {applications.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-20 h-20 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                    <FileText className=\"h-10 w-10 text-blue-600\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-slate-900 mb-3\">No applications yet</h3>\n                  <p className=\"text-slate-500 mb-6\">Start applying for scholarships to see your progress here</p>\n                  <Link\n                    to=\"/student/dashboard/scholarships\"\n                    className=\"bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition-colors font-bold shadow-lg hover:shadow-xl transform hover:scale-105\"\n                  >\n                    Find Scholarships\n                  </Link>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {applications.slice(0, 5).map((application) => {\n                    const StatusIcon = getStatusIcon(application.status);\n                    return (\n                      <div key={application.id} className=\"group flex items-center justify-between p-4 bg-slate-50 hover:bg-slate-100 rounded-2xl transition-colors\">\n                        <div className=\"flex items-center space-x-4 flex-1\">\n                          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                            <Award className=\"h-6 w-6 text-white\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className=\"font-bold text-slate-900 mb-1 truncate group-hover:text-blue-600 transition-colors\">\n                              {application.scholarship?.title}\n                            </h4>\n                            <div className=\"flex items-center space-x-4 text-sm text-slate-500\">\n                              <div className=\"flex items-center\">\n                                <Building className=\"h-4 w-4 mr-1\" />\n                                {application.scholarship?.schoolName}\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Calendar className=\"h-4 w-4 mr-1\" />\n                                {new Date(application.applied_at).toLocaleDateString()}\n                              </div>\n                              <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(application.status)}`}>\n                                <StatusIcon className=\"h-3 w-3 mr-1\" />\n                                {application.status.replace('_', ' ').toUpperCase()}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                          <button className=\"p-2 text-slate-400 hover:text-slate-600 hover:bg-white rounded-lg transition-colors\">\n                            <Eye className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Recommended Scholarships & Profile Status */}\n        <div className=\"space-y-6\">\n          {/* Profile Completion */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <h3 className=\"text-lg font-bold text-slate-900 mb-4 flex items-center\">\n              <Target className=\"h-5 w-5 mr-2 text-blue-500\" />\n              Profile Status\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Basic information</span>\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Academic details</span>\n                <Clock className=\"h-5 w-5 text-yellow-500\" />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-700\">Documents uploaded</span>\n                <Clock className=\"h-5 w-5 text-yellow-500\" />\n              </div>\n            </div>\n\n            <div className=\"mt-6 p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-xl border border-blue-200\">\n              <p className=\"text-sm font-medium text-blue-800 mb-2\">\n                Complete your profile to unlock more opportunities\n              </p>\n              <Link\n                to=\"/student/dashboard/profile\"\n                className=\"text-sm font-bold text-blue-700 hover:text-blue-800 transition-colors\"\n              >\n                Complete now →\n              </Link>\n            </div>\n          </div>\n\n          {/* Recommended Scholarships */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n            <h3 className=\"text-lg font-bold text-slate-900 mb-4 flex items-center\">\n              <Star className=\"h-5 w-5 mr-2 text-yellow-500\" />\n              Recommended for You\n            </h3>\n            \n            <div className=\"space-y-4\">\n              {scholarships.slice(0, 3).map((scholarship) => (\n                <div key={scholarship.id} className=\"p-4 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors group\">\n                  <h4 className=\"font-bold text-slate-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors\">\n                    {scholarship.title}\n                  </h4>\n                  <div className=\"flex items-center justify-between text-sm text-slate-600 mb-3\">\n                    <span className=\"font-semibold text-green-600\">\n                      {formatAmount(scholarship.amount)}\n                    </span>\n                    <span>{scholarship.schoolName}</span>\n                  </div>\n                  <button\n                    onClick={() => onApplyScholarship(scholarship.id)}\n                    className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium\"\n                  >\n                    Apply Now\n                  </button>\n                </div>\n              ))}\n              \n              {scholarships.length === 0 && (\n                <p className=\"text-slate-500 text-sm text-center py-4\">No recommendations yet</p>\n              )}\n            </div>\n          </div>\n\n          {/* Study Tips */}\n          <div className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl shadow-lg text-white p-6\">\n            <h3 className=\"text-lg font-bold mb-4 flex items-center\">\n              <BookOpen className=\"h-5 w-5 mr-2\" />\n              💡 Success Tips\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-blue-100\">\n                  Apply early to increase your chances of success\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-blue-100\">\n                  Tailor your applications to each scholarship\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-sm text-blue-100\">\n                  Keep your profile updated with latest achievements\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {userProfile && userProfile.documents_status !== 'approved' && (\n        <DocumentUpload userId={userProfile.user_id} />\n      )}\n    </div>\n  );\n};\n\nexport default Overview;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard\\ProfileManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[300,303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[300,303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[331,334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[331,334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  User, \n  Edit, \n  Save, \n  X, \n  Phone, \n  Mail, \n  Globe, \n  MapPin,\n  BookOpen,\n  GraduationCap,\n  Star,\n  Award,\n  CheckCircle,\n  AlertCircle,\n  Camera,\n  Calendar,\n  Target\n} from 'lucide-react';\n\ninterface ProfileManagementProps {\n  profile: any;\n  onUpdateProfile: (data: any) => void;\n}\n\nconst ProfileManagement: React.FC<ProfileManagementProps> = ({\n  profile,\n  onUpdateProfile\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: profile?.name || '',\n    phone: profile?.phone || '',\n    country: profile?.country || '',\n    field_of_interest: profile?.field_of_interest || '',\n    academic_level: profile?.academic_level || '',\n    gpa: profile?.gpa?.toString() || '',\n    english_proficiency: profile?.english_proficiency || ''\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSave = () => {\n    const updatedData = {\n      ...formData,\n      gpa: parseFloat(formData.gpa) || 0\n    };\n    onUpdateProfile(updatedData);\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      name: profile?.name || '',\n      phone: profile?.phone || '',\n      country: profile?.country || '',\n      field_of_interest: profile?.field_of_interest || '',\n      academic_level: profile?.academic_level || '',\n      gpa: profile?.gpa?.toString() || '',\n      english_proficiency: profile?.english_proficiency || ''\n    });\n    setIsEditing(false);\n  };\n\n  const getProfileCompleteness = () => {\n    const fields = [\n      profile?.name,\n      profile?.phone,\n      profile?.country,\n      profile?.field_of_interest,\n      profile?.academic_level,\n      profile?.gpa,\n      profile?.english_proficiency\n    ];\n    const completedFields = fields.filter(field => field && field !== '').length;\n    return Math.round((completedFields / fields.length) * 100);\n  };\n\n  const completeness = getProfileCompleteness();\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-900\">Student Profile</h2>\n          <p className=\"text-slate-600\">Manage your academic profile and preferences</p>\n        </div>\n        \n        {!isEditing && (\n          <button\n            onClick={() => setIsEditing(true)}\n            className=\"bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition-colors font-medium flex items-center shadow-lg hover:shadow-xl transform hover:scale-105\"\n          >\n            <Edit className=\"h-4 w-4 mr-2\" />\n            Edit Profile\n          </button>\n        )}\n      </div>\n\n      {/* Profile Completeness */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 rounded-2xl p-8 text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n        <div className=\"relative\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h3 className=\"text-2xl font-bold mb-2\">Profile Completeness</h3>\n              <p className=\"text-blue-100\">Complete your profile to unlock more scholarship opportunities</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-4xl font-bold mb-2\">{completeness}%</div>\n              <div className=\"text-blue-100 text-sm\">Complete</div>\n            </div>\n          </div>\n          \n          <div className=\"w-full bg-white/20 rounded-full h-3 mb-4\">\n            <div \n              className=\"bg-white rounded-full h-3 transition-all duration-500\"\n              style={{ width: `${completeness}%` }}\n            ></div>\n          </div>\n          \n          {completeness < 100 && (\n            <div className=\"flex items-center text-blue-100\">\n              <AlertCircle className=\"h-4 w-4 mr-2\" />\n              <span className=\"text-sm\">Complete your profile to improve scholarship matching</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Profile Form */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 overflow-hidden\">\n        {isEditing ? (\n          <div className=\"p-8\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h3 className=\"text-xl font-bold text-slate-900\">Edit Profile</h3>\n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={handleSave}\n                  className=\"bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition-colors font-medium flex items-center\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Save Changes\n                </button>\n                <button\n                  onClick={handleCancel}\n                  className=\"bg-slate-100 text-slate-700 px-6 py-3 rounded-xl hover:bg-slate-200 transition-colors font-medium flex items-center\"\n                >\n                  <X className=\"h-4 w-4 mr-2\" />\n                  Cancel\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Full Name *</label>\n                <input\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  placeholder=\"Enter your full name\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Phone Number</label>\n                <input\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange('phone', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  placeholder=\"Your phone number\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Country *</label>\n                <input\n                  type=\"text\"\n                  value={formData.country}\n                  onChange={(e) => handleInputChange('country', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  placeholder=\"Your country\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Field of Interest</label>\n                <select\n                  value={formData.field_of_interest}\n                  onChange={(e) => handleInputChange('field_of_interest', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                >\n                  <option value=\"\">Select your field</option>\n                  <option value=\"engineering\">Engineering</option>\n                  <option value=\"business\">Business</option>\n                  <option value=\"computer-science\">Computer Science</option>\n                  <option value=\"medicine\">Medicine</option>\n                  <option value=\"law\">Law</option>\n                  <option value=\"arts\">Arts & Humanities</option>\n                  <option value=\"sciences\">Natural Sciences</option>\n                  <option value=\"other\">Other</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Academic Level</label>\n                <select\n                  value={formData.academic_level}\n                  onChange={(e) => handleInputChange('academic_level', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                >\n                  <option value=\"\">Select level</option>\n                  <option value=\"high-school\">High School</option>\n                  <option value=\"undergraduate\">Undergraduate</option>\n                  <option value=\"graduate\">Graduate</option>\n                  <option value=\"doctorate\">Doctorate</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">GPA</label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  max=\"4\"\n                  value={formData.gpa}\n                  onChange={(e) => handleInputChange('gpa', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  placeholder=\"0.0\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">English Proficiency</label>\n                <select\n                  value={formData.english_proficiency}\n                  onChange={(e) => handleInputChange('english_proficiency', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                >\n                  <option value=\"\">Select proficiency</option>\n                  <option value=\"beginner\">Beginner</option>\n                  <option value=\"intermediate\">Intermediate</option>\n                  <option value=\"advanced\">Advanced</option>\n                  <option value=\"native\">Native</option>\n                  <option value=\"toefl\">TOEFL Certified</option>\n                  <option value=\"ielts\">IELTS Certified</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"p-8\">\n            {/* Profile Header */}\n            <div className=\"flex items-center space-x-6 mb-8\">\n              <div className=\"relative\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg\">\n                  <User className=\"h-12 w-12 text-white\" />\n                </div>\n                <button className=\"absolute -bottom-2 -right-2 w-8 h-8 bg-white text-blue-600 rounded-lg flex items-center justify-center shadow-lg hover:scale-110 transition-transform duration-300 border border-slate-200\">\n                  <Camera className=\"h-4 w-4\" />\n                </button>\n              </div>\n              \n              <div>\n                <h3 className=\"text-2xl font-bold text-slate-900 mb-2\">{profile?.name || 'Student Name'}</h3>\n                <p className=\"text-slate-600 mb-3\">{profile?.email}</p>\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800\">\n                    <Star className=\"h-3 w-3 mr-1\" />\n                    Active Student\n                  </span>\n                  <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800\">\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                    Verified\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Profile Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <div>\n                <h4 className=\"text-lg font-bold text-slate-900 mb-6\">Personal Information</h4>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center\">\n                    <User className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Full Name</label>\n                      <p className=\"text-slate-900\">{profile?.name || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <Mail className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Email</label>\n                      <p className=\"text-slate-900\">{profile?.email}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <Phone className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Phone</label>\n                      <p className=\"text-slate-900\">{profile?.phone || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <MapPin className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Country</label>\n                      <p className=\"text-slate-900\">{profile?.country || 'Not provided'}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"text-lg font-bold text-slate-900 mb-6\">Academic Information</h4>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center\">\n                    <BookOpen className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Field of Interest</label>\n                      <p className=\"text-slate-900\">{profile?.field_of_interest || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <GraduationCap className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">Academic Level</label>\n                      <p className=\"text-slate-900\">{profile?.academic_level || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <Award className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">GPA</label>\n                      <p className=\"text-slate-900\">{profile?.gpa || 'Not provided'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <Globe className=\"h-5 w-5 text-slate-400 mr-3\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-slate-500\">English Proficiency</label>\n                      <p className=\"text-slate-900\">{profile?.english_proficiency || 'Not provided'}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Account Information */}\n            <div className=\"mt-8 pt-8 border-t border-slate-200\">\n              <h4 className=\"text-lg font-bold text-slate-900 mb-6\">Account Information</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 text-slate-400 mr-3\" />\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Member Since</label>\n                    <p className=\"text-slate-900\">\n                      {profile?.created_at ? new Date(profile.created_at).toLocaleDateString() : 'Unknown'}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <Target className=\"h-5 w-5 text-slate-400 mr-3\" />\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-500\">Profile Completeness</label>\n                    <p className=\"text-slate-900\">{completeness}%</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Profile Tips */}\n      {completeness < 100 && (\n        <div className=\"bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-2xl p-6\">\n          <div className=\"flex items-start\">\n            <AlertCircle className=\"h-5 w-5 text-yellow-600 mr-3 mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium text-yellow-800 mb-2\">Complete Your Profile</h4>\n              <p className=\"text-sm text-yellow-700 mb-4\">\n                A complete profile helps us match you with the most relevant scholarship opportunities. \n                Consider adding the missing information to improve your chances of finding the perfect scholarships.\n              </p>\n              <div className=\"flex flex-wrap gap-2\">\n                {!profile?.phone && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add phone number\n                  </span>\n                )}\n                {!profile?.country && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add country\n                  </span>\n                )}\n                {!profile?.field_of_interest && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add field of interest\n                  </span>\n                )}\n                {!profile?.academic_level && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add academic level\n                  </span>\n                )}\n                {!profile?.gpa && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add GPA\n                  </span>\n                )}\n                {!profile?.english_proficiency && (\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-lg text-xs font-medium\">\n                    Add English proficiency\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileManagement;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard\\ScholarshipBrowser.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heart' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[545,548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[545,548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[568,571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[568,571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onApplyScholarship' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasApplied' is assigned a value but never used.","line":116,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3972,3975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3972,3975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'deadlineStatus' is assigned a value but never used.","line":214,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'daysLeft' is assigned a value but never used.","line":215,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":25}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Search, \n  Filter, \n  Award, \n  Building, \n  Calendar, \n  DollarSign, \n  Clock, \n  Target, \n  CheckCircle,\n  ArrowRight,\n  Star,\n  Zap,\n  Eye,\n  Heart,\n  GraduationCap,\n  Users,\n  ShoppingCart\n} from 'lucide-react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useNavigate } from 'react-router-dom';\nimport { StripeCheckout } from '../../components/StripeCheckout';\nimport { useCartStore } from '../../stores/applicationStore';\n\ninterface ScholarshipBrowserProps {\n  scholarships: any[];\n  applications: any[];\n  onApplyScholarship: (scholarshipId: string) => void;\n}\n\nconst ScholarshipBrowser: React.FC<ScholarshipBrowserProps> = ({\n  scholarships,\n  applications,\n  onApplyScholarship\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedLevel, setSelectedLevel] = useState('all');\n  const [selectedField, setSelectedField] = useState('all');\n  const [sortBy, setSortBy] = useState('deadline');\n  const { isAuthenticated, userProfile, user } = useAuth();\n  const navigate = useNavigate();\n  const isLocked = !userProfile?.has_paid_selection_process_fee;\n  const { cart, addToCart, removeFromCart } = useCartStore();\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getFieldBadgeColor = (field: string | undefined) => {\n    switch (field?.toLowerCase()) {\n      case 'stem':\n        return 'bg-blue-600';\n      case 'business':\n        return 'bg-green-600';\n      case 'engineering':\n        return 'bg-purple-600';\n      default:\n        return 'bg-slate-600';\n    }\n  };\n\n  const getLevelIcon = (level: string) => {\n    switch (level) {\n      case 'undergraduate':\n        return <GraduationCap className=\"h-4 w-4\" />;\n      case 'graduate':\n        return <Users className=\"h-4 w-4\" />;\n      case 'doctorate':\n        return <Award className=\"h-4 w-4\" />;\n      default:\n        return <GraduationCap className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getDaysUntilDeadline = (deadline: string) => {\n    const today = new Date();\n    const deadlineDate = new Date(deadline);\n    const diffTime = deadlineDate.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getDeadlineStatus = (deadline: string) => {\n    const days = getDaysUntilDeadline(deadline);\n    if (days < 0) return { status: 'expired', color: 'text-red-600', bg: 'bg-red-50' };\n    if (days <= 7) return { status: 'urgent', color: 'text-orange-600', bg: 'bg-orange-50' };\n    if (days <= 30) return { status: 'soon', color: 'text-yellow-600', bg: 'bg-yellow-50' };\n    return { status: 'normal', color: 'text-green-600', bg: 'bg-green-50' };\n  };\n\n  const filteredScholarships = scholarships.filter(scholarship => {\n    const matchesSearch = scholarship.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      scholarship.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (scholarship.universities?.name || '').toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesLevel = selectedLevel === 'all' || (scholarship.level && scholarship.level === selectedLevel);\n    const matchesField = selectedField === 'all' || (scholarship.field_of_study || '').toLowerCase().includes(selectedField.toLowerCase());\n    return matchesSearch && matchesLevel && matchesField;\n  }).sort((a, b) => {\n    switch (sortBy) {\n      case 'amount':\n        return b.amount - a.amount;\n      case 'deadline':\n        return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();\n      case 'name':\n        return a.title.localeCompare(b.title);\n      default:\n        return 0;\n    }\n  });\n\n  const hasApplied = (scholarshipId: string) => {\n    return applications.some(app => app.scholarship_id === scholarshipId);\n  };\n\n  const handleAddToCart = (scholarship: any) => {\n    if (user) {\n      addToCart(scholarship, user.id);\n    } else {\n      console.error(\"User not authenticated to add items to cart\");\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-900\">Find Scholarships</h2>\n          <p className=\"text-slate-600\">Discover opportunities tailored to your academic profile</p>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-4\">\n          {/* Search */}\n          <div className=\"md:col-span-2 relative\">\n            <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-slate-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search scholarships...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-12 pr-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n            />\n          </div>\n\n          {/* Level Filter */}\n          <select\n            value={selectedLevel}\n            onChange={(e) => setSelectedLevel(e.target.value)}\n            className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n          >\n            <option value=\"all\">All Levels</option>\n            <option value=\"undergraduate\">Undergraduate</option>\n            <option value=\"graduate\">Graduate</option>\n            <option value=\"doctorate\">Doctorate</option>\n          </select>\n\n          {/* Field Filter */}\n          <select\n            value={selectedField}\n            onChange={(e) => setSelectedField(e.target.value)}\n            className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n          >\n            <option value=\"all\">All Fields</option>\n            <option value=\"stem\">STEM</option>\n            <option value=\"business\">Business</option>\n            <option value=\"engineering\">Engineering</option>\n            <option value=\"any\">Any Field</option>\n          </select>\n\n          {/* Sort */}\n          <select\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value)}\n            className=\"px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n          >\n            <option value=\"deadline\">Sort by Deadline</option>\n            <option value=\"amount\">Sort by Amount</option>\n            <option value=\"name\">Sort by Name</option>\n          </select>\n        </div>\n\n        <div className=\"flex items-center justify-between text-sm text-slate-600\">\n          <span>\n            <span className=\"font-medium text-blue-600\">{filteredScholarships.length}</span> scholarships found\n          </span>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n              <span className=\"text-xs\">Urgent</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-yellow-500 rounded-full mr-2\"></div>\n              <span className=\"text-xs\">Soon</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\n              <span className=\"text-xs\">Normal</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Scholarships Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n        {filteredScholarships.map((scholarship) => {\n          const deadlineStatus = getDeadlineStatus(scholarship.deadline);\n          const daysLeft = getDaysUntilDeadline(scholarship.deadline);\n          const alreadyApplied = applications.some(app => app.scholarship_id === scholarship.id);\n          const inCart = cart.some((s) => s.id === scholarship.id);\n          return (\n            <div key={scholarship.id} className=\"group relative bg-white rounded-3xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-slate-200 hover:-translate-y-2\">\n              {/* Card Content */}\n              <div className=\"p-6\">\n                {/* Title and Badges */}\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-xl font-bold text-slate-900 mb-3 leading-tight line-clamp-2 group-hover:text-[#05294E] transition-colors\">\n                      {scholarship.title}\n                    </h3>\n                    {/* University */}\n                    <div className=\"flex items-center text-slate-600 mb-4\">\n                      <Building className=\"h-4 w-4 mr-2 text-[#05294E]\" />\n                      <span className=\"text-xs font-semibold mr-1\">University:</span>\n                      <span className=\"text-sm select-none\">{scholarship.universities?.name || 'Unknown University'}</span>\n                    </div>\n                  </div>\n                  {/* Exclusive Badge */}\n                  {scholarship.is_exclusive && (\n                    <span className=\"bg-[#D0151C] text-white px-3 py-1 rounded-xl text-xs font-bold shadow-lg\">\n                      Exclusive\n                    </span>\n                  )}\n                </div>\n                {/* Financial Values Section */}\n                <div className=\"mb-4\">\n                  <div className=\"bg-slate-50 rounded-xl p-3 border border-slate-200 flex flex-col gap-1\">\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"font-semibold text-slate-700\">Original Annual Value</span>\n                      <span className=\"font-bold text-blue-700\">{formatAmount(scholarship.original_annual_value ?? 0)}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"font-semibold text-slate-700\">Value Per Credit</span>\n                      <span className=\"font-bold text-blue-700\">{formatAmount(scholarship.original_value_per_credit ?? 0)}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"font-semibold text-slate-700\">Annual Value With Scholarship</span>\n                      <span className=\"font-bold text-green-700\">{formatAmount(scholarship.annual_value_with_scholarship ?? 0)}</span>\n                    </div>\n                  </div>\n                </div>\n                {/* Details */}\n                <div className=\"space-y-2 mb-6\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-slate-500\">Level</span>\n                    <div className=\"flex items-center\">\n                      {getLevelIcon(scholarship.level || 'undergraduate')}\n                      <span className=\"ml-1 capitalize text-slate-700\">{scholarship.level}</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-slate-500\">Field</span>\n                    <span className={`px-2 py-1 rounded-lg text-xs font-medium text-white ${getFieldBadgeColor(scholarship.field_of_study)}`}>\n                      {scholarship.field_of_study || 'Any Field'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-slate-500\">Deadline</span>\n                    <div className=\"flex items-center\">\n                      <Clock className={`h-3 w-3 mr-1 ${getDeadlineStatus(scholarship.deadline).color}`} />\n                      <span className=\"text-slate-700\">{getDaysUntilDeadline(scholarship.deadline)} days left</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/* Action Button */}\n              <div className=\"px-6 pb-6\">\n                <button\n                  className={`w-full py-2 px-4 rounded-md transition-all duration-200 font-semibold ${\n                    inCart ? 'bg-red-100 text-red-700 hover:bg-red-200' : 'bg-blue-600 text-white hover:bg-blue-700'\n                  } ${alreadyApplied ? 'bg-slate-300 text-slate-500 cursor-not-allowed' : ''} ${isLocked ? 'bg-slate-200 text-slate-400 cursor-not-allowed' : ''}`}\n                  onClick={() => {\n                    if (isLocked) return;\n                    if (inCart) {\n                      if (user) removeFromCart(scholarship.id, user.id);\n                    } else {\n                      handleAddToCart(scholarship);\n                    }\n                  }}\n                  disabled={alreadyApplied || isLocked}\n                >\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  {alreadyApplied ? 'Already Applied' : isLocked ? 'Unlock full details by paying the selection process fee.' : inCart ? 'Remove from Cart' : 'Add to Cart'}\n                  {!alreadyApplied && !isLocked && <ArrowRight className=\"h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform\" />}\n                </button>\n              </div>\n              {/* Overlay for locked cards */}\n              {isLocked && (\n                <div className=\"absolute inset-0 bg-white/70 flex flex-col items-center justify-center z-10\">\n                  <span className=\"text-[#05294E] font-bold text-lg mb-2\">Unlock full details</span>\n                  <span className=\"text-slate-600 text-sm text-center mb-4\">Pay the selection process fee to view all scholarship information and apply.</span>\n                  {/* Botão de pagamento */}\n                  {!isAuthenticated ? (\n                    <button\n                      className=\"bg-[#D0151C] text-white px-6 py-3 rounded-xl hover:bg-[#B01218] transition-all duration-300 font-bold mt-2\"\n                      onClick={() => navigate('/login')}\n                    >\n                      Sign in to pay selection fee\n                    </button>\n                  ) : (\n                    <StripeCheckout\n                      productId=\"SELECTION_PROCESS\"\n                      feeType=\"application_fee\"\n                      buttonText=\"Pay Selection Fee to Unlock\"\n                      className=\"mt-2\"\n                      onSuccess={() => {}}\n                      onError={(err) => alert(err)}\n                    />\n                  )}\n                </div>\n              )}\n              {/* Hover Effect Overlay */}\n              <div className=\"absolute inset-0 bg-gradient-to-t from-[#05294E]/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\"></div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* No Results */}\n      {filteredScholarships.length === 0 && (\n        <div className=\"text-center py-20\">\n          <div className=\"bg-gradient-to-br from-slate-100 to-slate-200 w-32 h-32 rounded-full flex items-center justify-center mx-auto mb-8 shadow-lg\">\n            <Award className=\"h-16 w-16 text-slate-400\" />\n          </div>\n          <h3 className=\"text-3xl font-bold text-slate-600 mb-4\">No scholarships found</h3>\n          <p className=\"text-slate-500 text-lg mb-8\">Try adjusting your search criteria to discover more opportunities</p>\n          <button \n            onClick={() => {\n              setSearchTerm('');\n              setSelectedLevel('all');\n              setSelectedField('all');\n            }}\n            className=\"bg-blue-600 text-white px-8 py-3 rounded-2xl hover:bg-blue-700 transition-all duration-300 font-bold\"\n          >\n            Clear Filters\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScholarshipBrowser;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard\\StudentDashboardLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[466,469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[466,469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[482,485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[482,485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":179,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7207,7225],"text":"We&apos;re here to help"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7207,7225],"text":"We&lsquo;re here to help"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7207,7225],"text":"We&#39;re here to help"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7207,7225],"text":"We&rsquo;re here to help"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { \n  GraduationCap, \n  Award, \n  FileText, \n  User, \n  Settings, \n  BarChart3,\n  Bell,\n  Search,\n  Menu,\n  X,\n  LogOut,\n  ChevronDown,\n  Shield,\n  Star,\n  CreditCard\n} from 'lucide-react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { StripeCheckout } from '../../components/StripeCheckout';\n\ninterface StudentDashboardLayoutProps {\n  user: any;\n  profile: any;\n  loading: boolean;\n  children: React.ReactNode;\n}\n\nconst StudentDashboardLayout: React.FC<StudentDashboardLayoutProps> = ({\n  user,\n  profile,\n  loading,\n  children\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { logout } = useAuth();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [userMenuOpen, setUserMenuOpen] = useState(false);\n  \n  const getActiveTab = () => {\n    const path = location.pathname;\n    if (path.includes('/scholarships')) return 'scholarships';\n    if (path.includes('/applications')) return 'applications';\n    if (path.includes('/profile')) return 'profile';\n    return 'overview';\n  };\n\n  const activeTab = getActiveTab();\n\n  const handleLogout = () => {\n    logout();\n    navigate('/');\n    setSidebarOpen(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n          <p className=\"text-slate-600 font-medium\">Loading student dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const sidebarItems = [\n    { id: 'overview', label: 'Overview', icon: BarChart3, path: '/student/dashboard', badge: null },\n    { id: 'scholarships', label: 'Find Scholarships', icon: Award, path: '/student/dashboard/scholarships', badge: null },\n    { id: 'applications', label: 'My Applications', icon: FileText, path: '/student/dashboard/applications', badge: null },\n    { id: 'profile', label: 'Profile', icon: User, path: '/student/dashboard/profile', badge: null }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex\">\n      {/* Sidebar */}\n      <div className={`fixed inset-y-0 left-0 z-50 w-72 bg-white shadow-xl transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0 ${\n        sidebarOpen ? 'translate-x-0' : '-translate-x-full'\n      }`}>\n        <div className=\"flex flex-col h-full\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-between h-20 px-6 border-b border-slate-200\">\n            <Link to=\"/\" className=\"flex items-center justify-center w-full\">\n              <img \n                src=\"/logo.png.png\" \n                alt=\"Matrícula USA\" \n                className=\"h-12 w-auto\"\n              />\n            </Link>\n            <button\n              onClick={() => { setSidebarOpen(false); setUserMenuOpen(false); }}\n              className=\"lg:hidden absolute right-4 p-2 rounded-lg text-slate-400 hover:text-slate-600 hover:bg-slate-100\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n          </div>\n\n          {/* Student Status */}\n          <div className=\"px-6 py-4 border-b border-slate-200\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                <GraduationCap className=\"h-6 w-6 text-white\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-semibold text-slate-900 truncate\">{profile?.name || user?.name}</h3>\n                <p className=\"text-sm text-slate-500 truncate\">Student</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-center mt-3\">\n              <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700\">\n                <Star className=\"h-3 w-3 mr-1\" />\n                Active Student\n              </span>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 px-4 py-6 space-y-2\">\n            {sidebarItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = activeTab === item.id;\n              \n              return (\n                <Link\n                  key={item.id}\n                  to={item.path}\n                  className={`group flex items-center justify-between px-4 py-3 rounded-xl font-medium transition-all duration-200 ${\n                    isActive\n                      ? 'bg-blue-600 text-white shadow-lg'\n                      : 'text-slate-600 hover:text-slate-900 hover:bg-slate-100'\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Icon className={`h-5 w-5 ${isActive ? 'text-white' : 'text-slate-500'}`} />\n                    <span className=\"text-sm\">{item.label}</span>\n                  </div>\n                  {item.badge && (\n                    <span className=\"px-2 py-1 text-xs font-medium rounded-lg bg-slate-100 text-slate-500\">\n                      {item.badge}\n                    </span>\n                  )}\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* Quick Actions */}\n          <div className=\"px-4 py-4 border-t border-slate-200\">\n            {user?.hasPaidProcess ? (\n              <Link\n                to=\"/student/dashboard/scholarships\"\n                className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-4 rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-300 font-bold text-sm flex items-center justify-center shadow-lg hover:shadow-xl transform hover:scale-105\"\n              >\n                <Award className=\"h-4 w-4 mr-2\" />\n                Find Scholarships\n              </Link>\n            ) : (\n              <StripeCheckout\n                productId=\"SELECTION_PROCESS\"\n                feeType=\"application_fee\"\n                buttonText=\"Start Selection Process\"\n                className=\"w-full bg-gradient-to-r from-[#D0151C] to-red-600 text-white py-3 px-4 rounded-xl hover:from-[#B01218] hover:to-red-700 transition-all duration-300 font-bold text-sm flex items-center justify-center shadow-lg hover:shadow-xl transform hover:scale-105\"\n              />\n            )}\n          </div>\n\n          {/* Support */}\n          <div className=\"px-4 py-4 border-t border-slate-200\">\n            <div className=\"bg-gradient-to-r from-slate-50 to-blue-50 rounded-xl p-4 border border-slate-200\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"h-4 w-4 text-blue-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-slate-900 text-sm\">Student Support</h4>\n                  <p className=\"text-xs text-slate-500\">We're here to help</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Overlay for mobile */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={() => { setSidebarOpen(false); setUserMenuOpen(false); }}\n        />\n      )}\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Top Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200\">\n          <div className=\"flex items-center justify-between px-6 py-4\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => { setSidebarOpen(true); setUserMenuOpen(false); }}\n                className=\"lg:hidden p-2 rounded-lg text-slate-400 hover:text-slate-600 hover:bg-slate-100\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </button>\n              \n              <div className=\"hidden md:block\">\n                <h1 className=\"text-2xl font-bold text-slate-900\">\n                  {activeTab === 'overview' && 'Student Overview'}\n                  {activeTab === 'scholarships' && 'Find Scholarships'}\n                  {activeTab === 'applications' && 'My Applications'}\n                  {activeTab === 'profile' && 'Student Profile'}\n                </h1>\n                <p className=\"text-slate-600\">\n                  {activeTab === 'overview' && 'Track your progress and discover new opportunities'}\n                  {activeTab === 'scholarships' && 'Discover scholarship opportunities tailored for you'}\n                  {activeTab === 'applications' && 'Track your scholarship applications and status'}\n                  {activeTab === 'profile' && 'Manage your academic profile and preferences'}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Search */}\n              <div className=\"hidden lg:block\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search scholarships...\"\n                    className=\"w-80 pl-10 pr-4 py-2.5 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 transition-all duration-200\"\n                  />\n                </div>\n              </div>\n\n              {/* Notifications */}\n              <button className=\"relative p-2.5 text-slate-400 hover:text-slate-600 hover:bg-slate-100 rounded-xl transition-colors\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full\"></span>\n              </button>\n\n              {/* User Menu */}\n              <div className=\"relative\">\n                <button\n                  onClick={() => { setUserMenuOpen(!userMenuOpen); setSidebarOpen(false); }}\n                  className=\"flex items-center space-x-3 p-2 rounded-xl hover:bg-slate-100 transition-colors\"\n                >\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center\">\n                    <User className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div className=\"hidden md:block text-left\">\n                    <p className=\"font-semibold text-slate-900 text-sm\">{profile?.name || user?.name}</p>\n                    <p className=\"text-xs text-slate-500\">Student</p>\n                    {user?.hasPaidProcess && (\n                      <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800\">\n                        <CreditCard className=\"h-3 w-3 mr-1\" />\n                        Selection Process Active\n                      </span>\n                    )}\n                  </div>\n                  <ChevronDown className=\"h-4 w-4 text-slate-400\" />\n                </button>\n\n                {userMenuOpen && (\n                  <div className=\"absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-xl border border-slate-200 py-2 z-50\">\n                    <div className=\"px-4 py-3 border-b border-slate-200\">\n                      <p className=\"font-semibold text-slate-900\">{profile?.name || user?.name}</p>\n                      <p className=\"text-sm text-slate-500\">{user?.email}</p>\n                    </div>\n                    \n                    <Link\n                      to=\"/student/dashboard/profile\"\n                      className=\"flex items-center px-4 py-3 text-sm text-slate-700 hover:bg-slate-50 transition-colors\"\n                      onClick={() => {\n                        setUserMenuOpen(false);\n                        setSidebarOpen(false);\n                      }}\n                    >\n                      <User className=\"h-4 w-4 mr-3 text-slate-400\" />\n                      Edit Profile\n                    </Link>\n                    \n                    <Link\n                      to=\"/settings\"\n                      className=\"flex items-center px-4 py-3 text-sm text-slate-700 hover:bg-slate-50 transition-colors\"\n                      onClick={() => {\n                        setUserMenuOpen(false);\n                        setSidebarOpen(false);\n                      }}\n                    >\n                      <Settings className=\"h-4 w-4 mr-3 text-slate-400\" />\n                      Settings\n                    </Link>\n                    \n                    <div className=\"border-t border-slate-200 my-2\"></div>\n                    \n                    <button\n                      onClick={handleLogout}\n                      className=\"flex items-center w-full px-4 py-3 text-sm text-red-600 hover:bg-red-50 transition-colors\"\n                    >\n                      <LogOut className=\"h-4 w-4 mr-3\" />\n                      Sign Out\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 p-6\">\n          {children}\n        </main>\n\n        <div className=\"mt-auto p-6\">\n          <StripeCheckout\n            productId=\"MEMBERSHIP\"\n            feeType=\"application_fee\"\n            buttonText=\"Upgrade to Pro\"\n            className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StudentDashboardLayout;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\StudentDashboard\\index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockScholarships' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userProfile' is assigned a value but never used.","line":46,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":28},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [user, loading, loadDashboardData]","fix":{"range":[1811,1826],"text":"[user, loading, loadDashboardData]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Routes, Route, useNavigate } from 'react-router-dom';\nimport { supabase, Scholarship } from '../../lib/supabase';\nimport { useAuth } from '../../hooks/useAuth';\nimport StudentDashboardLayout from './StudentDashboardLayout';\nimport Overview from './Overview';\nimport ScholarshipBrowser from './ScholarshipBrowser';\nimport MyApplications from './MyApplications';\nimport ProfileManagement from './ProfileManagement';\nimport { mockScholarships } from '../../data/mockData';\nimport { Link } from 'react-router-dom';\nimport { ShoppingCart } from 'lucide-react';\nimport { useCartStore } from '../../stores/applicationStore';\nimport DocumentsAndScholarshipChoice from './DocumentsAndScholarshipChoice';\nimport CollegeEnrollmentCheckout from './CollegeEnrollmentCheckout';\nimport CartPage from './CartPage';\n\ninterface StudentProfile {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  country?: string;\n  field_of_interest?: string;\n  academic_level?: string;\n  gpa?: number;\n  english_proficiency?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface Application {\n  id: string;\n  scholarship_id: string;\n  student_id: string;\n  status: 'pending' | 'approved' | 'rejected' | 'under_review';\n  applied_at: string;\n  notes?: string;\n  scholarship?: Scholarship;\n}\n\nconst StudentDashboard: React.FC = () => {\n  const [scholarships, setScholarships] = useState<Scholarship[]>([]);\n  const [applications, setApplications] = useState<Application[]>([]);\n  const [profile, setProfile] = useState<StudentProfile | null>(null);\n  const { user, userProfile, loading } = useAuth();\n  const { cart } = useCartStore();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!loading && user) {\n      loadDashboardData();\n    }\n  }, [user, loading]);\n\n  const loadDashboardData = async () => {\n    if (!user) return;\n\n    try {\n      // Buscar bolsas reais do Supabase\n      const { data: realScholarships, error: scholarshipsError } = await supabase\n        .from('scholarships')\n        .select('*')\n        .eq('is_active', true);\n      if (scholarshipsError) {\n        setScholarships([]);\n      } else {\n        setScholarships(realScholarships || []);\n      }\n\n      // Buscar applications reais do Supabase\n      const { data: applicationsData, error: applicationsError } = await supabase\n        .from('scholarship_applications')\n        .select('*, scholarship:scholarships(*)')\n        .eq('student_id', user.id);\n\n      if (applicationsError) {\n        setApplications([]);\n      } else {\n        setApplications(applicationsData as Application[]);\n      }\n\n      // Buscar perfil real do Supabase\n      const { data: profileData, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error) {\n        setProfile(null);\n      } else if (profileData) {\n        setProfile({\n          id: profileData.id,\n          name: profileData.full_name || user.name || user.email?.split('@')[0] || '',\n          email: user.email,\n          phone: profileData.phone || '',\n          country: profileData.country || '',\n          field_of_interest: profileData.field_of_interest || '',\n          academic_level: profileData.academic_level || '',\n          gpa: profileData.gpa || 0,\n          english_proficiency: profileData.english_proficiency || '',\n          created_at: profileData.created_at,\n          updated_at: profileData.updated_at\n        });\n      }\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    }\n  };\n\n  const handleApplyScholarship = async (scholarshipId: string) => {\n    if (!user) return;\n\n    // Check if already applied\n    const alreadyApplied = applications.some(app => app.scholarship_id === scholarshipId);\n    if (alreadyApplied) {\n      alert('You have already applied for this scholarship');\n      return;\n    }\n\n    try {\n      // Mock application creation\n      const newApplication: Application = {\n        id: Date.now().toString(),\n        scholarship_id: scholarshipId,\n        student_id: user.id,\n        status: 'pending',\n        applied_at: new Date().toISOString(),\n        scholarship: scholarships.find(s => s.id === scholarshipId)\n      };\n\n      setApplications(prev => [...prev, newApplication]);\n      alert('Application submitted successfully!');\n    } catch (error) {\n      console.error('Error applying for scholarship:', error);\n      alert('Error submitting application. Please try again.');\n    }\n  };\n\n  const handleProfileUpdate = async (updatedData: Partial<StudentProfile>) => {\n    if (!user || !profile) return;\n\n    try {\n      // Atualiza no Supabase\n      const { error } = await supabase\n        .from('user_profiles')\n        .update({\n          full_name: updatedData.name,\n          phone: updatedData.phone,\n          country: updatedData.country,\n          field_of_interest: updatedData.field_of_interest,\n          academic_level: updatedData.academic_level,\n          gpa: updatedData.gpa,\n          english_proficiency: updatedData.english_proficiency,\n          updated_at: new Date().toISOString()\n        })\n        .eq('user_id', user.id);\n\n      if (error) throw error;\n\n      // Atualiza localmente\n      const updatedProfile = {\n        ...profile,\n        ...updatedData,\n        updated_at: new Date().toISOString()\n      };\n      setProfile(updatedProfile);\n      alert('Profile updated successfully!');\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      alert('Error updating profile. Please try again.');\n    }\n  };\n\n  // Calculate stats\n  const stats = {\n    totalApplications: applications.length,\n    approvedApplications: applications.filter(app => app.status === 'approved').length,\n    pendingApplications: applications.filter(app => app.status === 'pending').length,\n    availableScholarships: scholarships.length\n  };\n\n  return (\n    <StudentDashboardLayout user={user} profile={profile} loading={loading}>\n      {/* Cart Icon Button */}\n      <button\n        onClick={() => navigate('/student/dashboard/cart')}\n        className=\"fixed bottom-8 right-8 z-50 bg-[#05294E] text-white rounded-full shadow-lg p-4 flex items-center hover:bg-[#05294E]/90 transition-all\"\n      >\n        <ShoppingCart className=\"h-6 w-6\" />\n        {cart.length > 0 && (\n          <span className=\"ml-2 bg-red-600 text-white rounded-full px-2 py-0.5 text-xs font-bold\">{cart.length}</span>\n        )}\n      </button>\n      <Routes>\n        <Route \n          index \n          element={\n            <Overview \n              profile={profile}\n              scholarships={scholarships}\n              applications={applications}\n              stats={stats}\n              onApplyScholarship={handleApplyScholarship}\n            />\n          } \n        />\n        <Route path=\"cart\" element={<CartPage />} />\n        <Route \n          path=\"scholarships\" \n          element={\n            <ScholarshipBrowser \n              scholarships={scholarships}\n              applications={applications}\n              onApplyScholarship={handleApplyScholarship}\n            />\n          } \n        />\n        <Route \n          path=\"applications\" \n          element={\n            <MyApplications />\n          } \n        />\n        <Route \n          path=\"profile\" \n          element={\n            <ProfileManagement \n              profile={profile}\n              onUpdateProfile={handleProfileUpdate}\n            />\n          } \n        />\n        <Route path=\"documents-and-scholarship-choice\" element={<DocumentsAndScholarshipChoice />} />\n        <Route path=\"college-enrollment-checkout\" element={<CollegeEnrollmentCheckout />} />\n      </Routes>\n    </StudentDashboardLayout>\n  );\n};\n\nexport default StudentDashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\SuccessPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":60,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3208,3211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3208,3211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst messages = {\r\n  pt: {\r\n    title: 'Pagamento Realizado com Sucesso!',\r\n    processed: 'Seu pedido foi processado. Agradecemos sua compra.',\r\n    sessionId: 'ID da Sessão:',\r\n    confirmation: 'Você receberá um e-mail de confirmação em breve.',\r\n    goHome: 'Voltar para o Início',\r\n    verifying: 'Verificando seu pagamento...',\r\n    pleaseWait: 'Por favor, aguarde.',\r\n    errorTitle: 'Erro no Processamento do Pagamento',\r\n    errorTryAgain: 'Por favor, tente novamente ou entre em contato com o suporte.'\r\n  },\r\n  en: {\r\n    title: 'Payment Successful!',\r\n    processed: 'Your order has been processed. Thank you for your purchase.',\r\n    sessionId: 'Session ID:',\r\n    confirmation: 'You will receive a confirmation email shortly.',\r\n    goHome: 'Return Home',\r\n    verifying: 'Verifying your payment...',\r\n    pleaseWait: 'Please wait.',\r\n    errorTitle: 'Payment Processing Error',\r\n    errorTryAgain: 'Please try again or contact support.'\r\n  }\r\n};\r\n\r\nconst SuccessPage: React.FC = () => {\r\n  const [sessionId, setSessionId] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Troque 'pt' por 'en' para exibir em inglês\r\n  const currentLang = 'en';\r\n\r\n  useEffect(() => {\r\n    const getSessionIdFromUrl = () => {\r\n      const queryParams = new URLSearchParams(window.location.search);\r\n      return queryParams.get('session_id');\r\n    };\r\n\r\n    const id = getSessionIdFromUrl();\r\n    if (id) {\r\n      setSessionId(id);\r\n      const verifySession = async (sId: string) => {\r\n        try {\r\n          const SUPABASE_PROJECT_URL = 'https://fitpynguasqqutuhzifx.supabase.co';\r\n          const EDGE_FUNCTION_ENDPOINT = `${SUPABASE_PROJECT_URL}/functions/v1/verify-stripe-session`;\r\n\r\n          // Recupera o token JWT do usuário autenticado do localStorage\r\n          let token = null;\r\n          try {\r\n            const raw = localStorage.getItem('sb-fitpynguasqqutuhzifx-auth-token');\r\n            if (raw) {\r\n              const tokenObj = JSON.parse(raw);\r\n              token = tokenObj?.access_token || null;\r\n            }\r\n          } catch (e) {\r\n            token = null;\r\n          }\r\n\r\n          const response = await fetch(EDGE_FUNCTION_ENDPOINT, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...(token && { 'Authorization': `Bearer ${token}` }),\r\n            },\r\n            body: JSON.stringify({ sessionId: sId }),\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) {\r\n            throw new Error(data.error || 'Falha na verificação da sessão no backend.');\r\n          }\r\n          if (data.status === 'complete') {\r\n            console.log('Sessão Stripe verificada e completa no backend:', data);\r\n            // Aqui você pode adicionar lógica para exibir detalhes do pedido\r\n          } else {\r\n            setError(data.message || 'Sessão Stripe não está completa ou inválida.');\r\n          }\r\n        } catch (err: any) {\r\n          console.error('Erro ao chamar Edge Function de verificação:', err);\r\n          setError('Erro ao se comunicar com o servidor de verificação: ' + err.message);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      verifySession(id);\r\n    } else {\r\n      setError('ID da sessão não encontrado na URL.');\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const handleGoScholarships = () => {\r\n    navigate('/scholarships');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div style={styles.container}>\r\n        <h2 style={styles.heading}>{messages[currentLang].verifying}</h2>\r\n        <p style={styles.text}>{messages[currentLang].pleaseWait}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div style={styles.container}>\r\n        <h2 style={styles.heading}>{messages[currentLang].errorTitle}</h2>\r\n        <p style={styles.errorText}>{error}</p>\r\n        <p style={styles.text}>{messages[currentLang].errorTryAgain}</p>\r\n        <button onClick={handleGoScholarships} style={styles.button}>Go to Scholarships</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <h1 style={styles.heading}>{messages[currentLang].title}</h1>\r\n      <p style={styles.text}>{messages[currentLang].processed}</p>\r\n      {sessionId && (\r\n        <p style={styles.sessionId}>\r\n          {messages[currentLang].sessionId} <code>{sessionId}</code>\r\n        </p>\r\n      )}\r\n      <p style={styles.text}>{messages[currentLang].confirmation}</p>\r\n      <button onClick={handleGoScholarships} style={styles.button}>Go to Scholarships</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles: { [key: string]: React.CSSProperties } = {\r\n  container: {\r\n    fontFamily: 'Arial, sans-serif',\r\n    textAlign: 'center',\r\n    padding: '40px',\r\n    maxWidth: '600px',\r\n    margin: '50px auto',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n    borderRadius: '8px',\r\n    backgroundColor: '#fff',\r\n    color: '#333',\r\n  },\r\n  heading: {\r\n    color: '#28a745',\r\n    fontSize: '2em',\r\n    marginBottom: '20px',\r\n  },\r\n  text: {\r\n    fontSize: '1.1em',\r\n    lineHeight: '1.6',\r\n    marginBottom: '15px',\r\n  },\r\n  errorText: {\r\n    color: '#dc3545',\r\n    fontSize: '1.1em',\r\n    lineHeight: '1.6',\r\n    marginBottom: '15px',\r\n  },\r\n  sessionId: {\r\n    backgroundColor: '#f0f0f0',\r\n    padding: '10px',\r\n    borderRadius: '4px',\r\n    display: 'inline-block',\r\n    margin: '10px 0',\r\n    fontSize: '0.9em',\r\n    color: '#555',\r\n  },\r\n  button: {\r\n    display: 'inline-block',\r\n    marginTop: '20px',\r\n    padding: '10px 20px',\r\n    backgroundColor: '#007bff',\r\n    color: 'white',\r\n    textDecoration: 'none',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    fontSize: '1em',\r\n    cursor: 'pointer',\r\n    transition: 'background-color 0.3s ease',\r\n  },\r\n};\r\n\r\nexport default SuccessPage; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\TermsAndConditions.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkExistingTermsAcceptance'. Either include it or remove the dependency array.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [user, authLoading, navigate, checkExistingTermsAcceptance]","fix":{"range":[885,914],"text":"[user, authLoading, navigate, checkExistingTermsAcceptance]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3440,3443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3440,3443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { CheckCircle, FileText, Shield, Users, AlertCircle } from 'lucide-react';\nimport { supabase } from '../lib/supabase';\nimport { useAuth } from '../hooks/useAuth';\n\nconst TermsAndConditions: React.FC = () => {\n  const [accepted, setAccepted] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const { user, loading: authLoading } = useAuth();\n\n  useEffect(() => {\n    // Check if user is authenticated and has the right role\n    if (!user && !authLoading) {\n      navigate('/login');\n      return;\n    }\n\n    if (user && user.role !== 'school') {\n      navigate('/');\n      return;\n    }\n\n    // Check if user already accepted terms\n    if (user) checkExistingTermsAcceptance();\n  }, [user, authLoading, navigate]);\n\n  const checkExistingTermsAcceptance = async () => {\n    if (!user) return;\n\n    try {\n      const { data: university, error } = await supabase\n        .from('universities')\n        .select('terms_accepted, profile_completed')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        console.error('Error checking terms:', error);\n        return;\n      }\n\n      if (university && university.terms_accepted) {\n        // User already accepted terms, redirect to appropriate page\n        if (university.profile_completed) {\n          navigate('/school/termsandconditions');\n        } else {\n          navigate('/school/setup-profile');\n        }\n      }\n    } catch (error) {\n      console.error('Error checking terms acceptance:', error);\n    }\n  };\n\n  const handleAccept = async () => {\n    if (!user || !accepted) return;\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // Check if university record exists\n      const { data: existingUniversity, error: checkError } = await supabase\n        .from('universities')\n        .select('id, terms_accepted, profile_completed')\n        .eq('user_id', user.id)\n        .single();\n\n      if (checkError && checkError.code !== 'PGRST116') {\n        throw checkError;\n      }\n\n      if (existingUniversity) {\n        // Update existing record to accept terms\n        const { error: updateError } = await supabase\n          .from('universities')\n          .update({ \n            terms_accepted: true,\n            updated_at: new Date().toISOString()\n          })\n          .eq('user_id', user.id);\n\n        if (updateError) throw updateError;\n\n        // Redirect based on profile completion status\n        if (existingUniversity.profile_completed) {\n          navigate('/school/termsandconditions');\n        } else {\n          navigate('/school/setup-profile');\n        }\n      } else {\n        // Create new university record if it doesn't exist\n        const { error: insertError } = await supabase\n          .from('universities')\n          .insert({\n            name: user.name || 'New University', // Temporary name\n            user_id: user.id,\n            terms_accepted: true,\n            profile_completed: false,\n            is_approved: false,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          });\n\n        if (insertError) throw insertError;\n\n        // Redirect to profile setup\n        navigate('/school/setup-profile');\n      }\n    } catch (error: any) {\n      console.error('Error accepting terms:', error);\n      setError(`Error accepting terms: ${error.message}. Please try again.`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Show loading while checking authentication\n  if (authLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#05294E]\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"inline-flex items-center bg-[#05294E] rounded-full px-6 py-2 mb-6\">\n            <FileText className=\"h-5 w-5 mr-2 text-white\" />\n            <span className=\"text-sm font-medium text-white\">Partnership Agreement</span>\n          </div>\n          \n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Terms and Conditions\n          </h1>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            Please review and accept our terms to become a partner university on Matrícula USA platform.\n          </p>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"mb-8 bg-red-50 border border-red-200 rounded-xl p-4\">\n            <div className=\"flex items-center\">\n              <AlertCircle className=\"h-5 w-5 text-red-600 mr-2\" />\n              <p className=\"text-red-800\">{error}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Terms Content */}\n        <div className=\"bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden\">\n          <div className=\"p-8 max-h-96 overflow-y-auto\">\n            <div className=\"prose prose-gray max-w-none\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center\">\n                <Shield className=\"h-5 w-5 mr-2 text-[#05294E]\" />\n                University Partnership Agreement\n              </h2>\n              \n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">1. Platform Partnership</h3>\n              <p className=\"text-gray-600 mb-4\">\n                By joining Matrícula USA, your institution agrees to participate in our international student recruitment platform. We provide technology infrastructure to connect qualified international students with your academic programs.\n              </p>\n\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">2. Scholarship Management</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Universities can create and manage scholarship opportunities through our platform. All scholarship information must be accurate and current. Universities are responsible for honoring published scholarship commitments.\n              </p>\n\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">3. Student Data Protection</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Student information shared through our platform is confidential. Universities must comply with applicable privacy laws and use student data solely for admissions and scholarship evaluation purposes.\n              </p>\n\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">4. Quality Standards</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Partner universities must maintain accreditation and meet our quality standards. We reserve the right to review and approve university profiles before they become publicly visible.\n              </p>\n\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">5. Platform Fees</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Universities may be subject to platform fees based on successful student placements. Fee structures will be communicated separately and agreed upon in writing.\n              </p>\n\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">6. Intellectual Property</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Universities retain ownership of their institutional information and logos. Matrícula USA retains ownership of platform technology and student matching algorithms.\n              </p>\n\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">7. Termination</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Either party may terminate this agreement with 30 days written notice. Upon termination, universities will no longer appear on the platform, but existing student commitments must be honored.\n              </p>\n            </div>\n          </div>\n\n          {/* Acceptance Section */}\n          <div className=\"bg-gray-50 p-6 border-t border-gray-200\">\n            <div className=\"flex items-start space-x-3 mb-6\">\n              <div className=\"flex-shrink-0 mt-1\">\n                <input\n                  type=\"checkbox\"\n                  id=\"terms-acceptance\"\n                  checked={accepted}\n                  onChange={(e) => setAccepted(e.target.checked)}\n                  className=\"h-4 w-4 text-[#05294E] border-gray-300 rounded focus:ring-[#05294E]\"\n                />\n              </div>\n              <label htmlFor=\"terms-acceptance\" className=\"text-sm text-gray-700 leading-relaxed\">\n                I have read and agree to the Terms and Conditions. I confirm that I am authorized to bind my institution to this agreement and that all information provided will be accurate and up-to-date.\n              </label>\n            </div>\n\n            {/* Benefits Highlight */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <Users className=\"h-4 w-4 mr-2 text-green-600\" />\n                Access to qualified international students\n              </div>\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <Shield className=\"h-4 w-4 mr-2 text-blue-600\" />\n                Secure platform and data protection\n              </div>\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <CheckCircle className=\"h-4 w-4 mr-2 text-[#05294E]\" />\n                AI-powered student matching\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <button\n                onClick={handleAccept}\n                disabled={!accepted || loading}\n                className={`flex-1 flex items-center justify-center py-3 px-6 rounded-lg font-medium transition-all duration-300 ${\n                  accepted && !loading\n                    ? 'bg-[#05294E] text-white hover:bg-[#05294E]/90 shadow-lg'\n                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                }`}\n              >\n                {loading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Accept and Continue\n                  </>\n                )}\n              </button>\n              \n              <button\n                onClick={() => navigate('/')}\n                disabled={loading}\n                className=\"flex-1 bg-gray-200 text-gray-700 py-3 px-6 rounded-lg font-medium hover:bg-gray-300 transition-colors disabled:opacity-50\"\n              >\n                Cancel\n              </button>\n            </div>\n\n            {!accepted && (\n              <div className=\"mt-4 flex items-center text-xs text-amber-600\">\n                <AlertCircle className=\"h-4 w-4 mr-1\" />\n                Please read and accept the terms to continue with your university registration.\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TermsAndConditions;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\Universities.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":3,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Building' is defined but never used.","line":3,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronRight' is defined but never used.","line":3,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":3,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":88},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[560,563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[560,563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleAccept' is assigned a value but never used.","line":56,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":21}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Search, Filter, MapPin, Sparkles, Building, GraduationCap, ChevronRight, Globe, ArrowRight } from 'lucide-react';\nimport { supabase } from '../lib/supabase';\n\nconst PAGE_SIZE = 20;\n\nconst Universities: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedType, setSelectedType] = useState('all');\n  const [selectedLocation, setSelectedLocation] = useState('all');\n  const [realUniversities, setRealUniversities] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n\n  useEffect(() => {\n    const fetchUniversities = async () => {\n      setLoading(true);\n      const from = page * PAGE_SIZE;\n      const to = from + PAGE_SIZE - 1;\n      const { data, error, count } = await supabase\n        .from('universities')\n        .select('id, name, location, logo_url, programs, description, website', { count: 'exact' })\n        .eq('is_approved', true)\n        .range(from, to);\n      if (!error && data) {\n        setRealUniversities(data);\n        setTotalCount(count || 0);\n      } else {\n        setRealUniversities([]);\n        setTotalCount(0);\n      }\n      setLoading(false);\n    };\n    fetchUniversities();\n  }, [page]);\n\n  // Get unique locations for filter\n  const locations = Array.from(new Set(realUniversities.map(school => school.location?.split(', ')[1]))).filter(Boolean).sort();\n\n  const filteredSchools = realUniversities.filter(school => {\n    const matchesSearch = school.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (school.location || '').toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = selectedType === 'all' || school.type === selectedType;\n    const matchesLocation = selectedLocation === 'all' || (school.location || '').includes(selectedLocation);\n    return matchesSearch && matchesType && matchesLocation;\n  });\n\n  // Paginação só para dados reais\n  const totalPages = Math.ceil(totalCount / PAGE_SIZE);\n\n  // Skeleton loader\n  const skeletonArray = Array.from({ length: PAGE_SIZE });\n\n  const handleAccept = async () => {\n    // ... update terms_accepted to true ...\n    window.location.href = '/school/dashboard';\n  };\n\n  return (\n    <div className=\"bg-white min-h-screen\">\n      {/* Header */}\n      <section className=\"bg-[#05294E] text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center bg-white/10 backdrop-blur-sm border border-white/20 rounded-full px-4 py-1 mb-6\">\n              <Sparkles className=\"h-3 w-3 mr-2 text-white\" />\n              <span className=\"text-xs font-medium text-white\">Partner Universities</span>\n            </div>\n            \n            <h1 className=\"text-4xl md:text-5xl font-black mb-4 leading-tight\">\n              <span className=\"text-white\">American</span>\n              <br />\n              <span className=\"text-[#D0151C]\">Universities</span>\n            </h1>\n            \n            <p className=\"text-lg text-slate-200 max-w-2xl mx-auto\">\n              Discover world-class institutions offering exceptional education and scholarship opportunities.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Search and Filters */}\n        <div className=\"bg-slate-50 p-6 rounded-2xl mb-8 border border-slate-200\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search universities...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-3 py-3 bg-white border border-slate-300 rounded-xl focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300 text-sm\"\n              />\n            </div>\n\n            {/* Type Filter */}\n            <select\n              value={selectedType}\n              onChange={(e) => setSelectedType(e.target.value)}\n              className=\"px-3 py-3 bg-white border border-slate-300 rounded-xl focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300 text-sm\"\n            >\n              <option value=\"all\">All Types</option>\n              <option value=\"Private\">Private</option>\n              <option value=\"Public\">Public</option>\n            </select>\n\n            {/* Location Filter */}\n            <select\n              value={selectedLocation}\n              onChange={(e) => setSelectedLocation(e.target.value)}\n              className=\"px-3 py-3 bg-white border border-slate-300 rounded-xl focus:ring-2 focus:ring-[#05294E] focus:border-[#05294E] transition-all duration-300 text-sm\"\n            >\n              <option value=\"all\">All States</option>\n              {locations.map((location: string) => (\n                <option key={location} value={location}>{location}</option>\n              ))}\n            </select>\n\n            {/* Results Count */}\n            <div className=\"flex items-center justify-center bg-white border border-slate-300 rounded-xl px-3 py-3\">\n              <span className=\"text-sm text-slate-600\">\n                <span className=\"font-semibold text-[#05294E]\">{filteredSchools.length}</span> universities\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Universities Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {loading ? (\n            skeletonArray.map((_, idx) => (\n              <div key={idx} className=\"bg-slate-100 animate-pulse rounded-3xl h-80\" />\n            ))\n          ) : filteredSchools.map((school) => (\n            <div key={school.id} className=\"group bg-white rounded-3xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-slate-200 hover:-translate-y-2\">\n              {/* University Image */}\n              <div className=\"relative h-48 overflow-hidden\">\n                <img\n                  src={school.image || school.logo_url || '/university-placeholder.png'}\n                  alt={`${school.name} campus`}\n                  className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                />\n                \n                {/* Type Badge */}\n                <div className=\"absolute top-4 left-4\">\n                  <span className={`px-3 py-1 rounded-xl text-xs font-bold text-white shadow-lg ${\n                    school.type === 'Private' ? 'bg-[#05294E]' : 'bg-green-600'\n                  }`}>\n                    {school.type || (school.is_public ? 'Public' : 'Private')}\n                  </span>\n                </div>\n                \n                {/* Ranking Badge */}\n                {school.ranking && (\n                  <div className=\"absolute top-4 right-4\">\n                    <span className=\"bg-yellow-500 text-black px-3 py-1 rounded-xl text-xs font-bold shadow-lg\">\n                      #{school.ranking}\n                    </span>\n                  </div>\n                )}\n              </div>\n\n              {/* University Info */}\n              <div className=\"p-6\">\n                <h3 className=\"text-xl font-bold text-slate-900 mb-3 leading-tight line-clamp-2 group-hover:text-[#05294E] transition-colors\">\n                  {school.name}\n                </h3>\n                \n                {/* Location */}\n                <div className=\"flex items-center text-slate-600 mb-4\">\n                  <MapPin className=\"h-4 w-4 mr-2 text-[#05294E]\" />\n                  <span className=\"text-sm\">{school.location}</span>\n                </div>\n\n                {/* Programs Preview */}\n                <div className=\"mb-6\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {school.programs.slice(0, 3).map((program: string, index: number) => (\n                      <span key={index} className=\"bg-slate-100 text-slate-700 px-2 py-1 rounded-lg text-xs font-medium\">\n                        {program}\n                      </span>\n                    ))}\n                    {school.programs.length > 3 && (\n                      <span className=\"bg-[#05294E]/10 text-[#05294E] px-2 py-1 rounded-lg text-xs font-medium\">\n                        +{school.programs.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n\n                {/* Learn More Button */}\n                <Link\n                  to={`/schools/${school.id}`}\n                  className=\"w-full bg-gradient-to-r from-[#05294E] to-slate-700 text-white py-3 px-4 rounded-2xl hover:from-[#05294E]/90 hover:to-slate-600 transition-all duration-300 font-bold text-sm flex items-center justify-center group-hover:shadow-xl transform group-hover:scale-105\"\n                >\n                  Learn More\n                  <ArrowRight className=\"ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform\" />\n                </Link>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Paginação */}\n        <div className=\"flex justify-center items-center gap-4 mt-8\">\n          <button\n            className=\"px-4 py-2 rounded-lg bg-slate-200 text-slate-700 font-bold disabled:opacity-50\"\n            onClick={() => setPage((p) => Math.max(0, p - 1))}\n            disabled={page === 0 || loading}\n          >\n            Previous\n          </button>\n          <span className=\"text-slate-600 font-medium\">Page {page + 1} of {Math.max(1, totalPages)}</span>\n          <button\n            className=\"px-4 py-2 rounded-lg bg-slate-200 text-slate-700 font-bold disabled:opacity-50\"\n            onClick={() => setPage((p) => Math.min(totalPages - 1, p + 1))}\n            disabled={page >= totalPages - 1 || loading}\n          >\n            Next\n          </button>\n        </div>\n\n        {filteredSchools.length === 0 && (\n          <div className=\"text-center py-16\">\n            <div className=\"bg-slate-100 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <GraduationCap className=\"h-10 w-10 text-slate-400\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-slate-600 mb-2\">No universities found</h3>\n            <p className=\"text-slate-500\">Try adjusting your search criteria</p>\n          </div>\n        )}\n\n        {/* Call to Action */}\n        <div className=\"mt-12 bg-[#05294E] rounded-2xl p-8 text-white text-center\">\n          <h2 className=\"text-2xl font-bold mb-3\">\n            Ready to Apply to Your <span className=\"text-[#D0151C]\">Dream University?</span>\n          </h2>\n          <p className=\"text-sm text-slate-200 mb-6 max-w-2xl mx-auto\">\n            Start your journey with our AI-powered platform and unlock exclusive scholarship opportunities.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n            <Link \n              to=\"/scholarships\"\n              className=\"bg-[#D0151C] text-white px-6 py-2 rounded-lg hover:bg-[#B01218] transition-all duration-300 text-sm font-medium\"\n            >\n              Find Scholarships\n            </Link>\n            <Link \n              to=\"/how-it-works\"\n              className=\"bg-white/10 backdrop-blur-sm border border-white/20 text-white px-6 py-2 rounded-lg hover:bg-white/20 transition-all duration-300 text-sm font-medium\"\n            >\n              Learn More\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Universities;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\pages\\UniversityDetail.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[602,605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[602,605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'uni' is never reassigned. Use 'const' instead.","line":22,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":22,"endColumn":14,"fix":{"range":[980,1035],"text":"const uni = mockSchools.find(school => school.id === id);"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { useAuth } from '../hooks/useAuth';\nimport { useNavigate } from 'react-router-dom';\nimport { MapPin, ExternalLink, ArrowLeft, Sparkles, Phone, Mail, Fan as Fax, DollarSign, Award, Clock } from 'lucide-react';\nimport { mockSchools } from '../data/mockData';\nimport { supabase } from '../lib/supabase';\nimport type { Scholarship } from '../lib/supabase';\n\nconst UniversityDetail: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [university, setUniversity] = useState<any | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [scholarships, setScholarships] = useState<Scholarship[]>([]);\n  const [scholarshipsLoading, setScholarshipsLoading] = useState(true);\n  const { isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchUniversity = async () => {\n      // Try mock first\n      let uni = mockSchools.find(school => school.id === id);\n      if (uni) {\n        setUniversity(uni);\n        setLoading(false);\n        return;\n      }\n      // Try Supabase\n      const { data } = await supabase\n        .from('universities')\n        .select('*')\n        .eq('id', id)\n        .maybeSingle();\n      if (data) {\n        setUniversity(data);\n      } else {\n        setUniversity(null);\n      }\n      setLoading(false);\n    };\n    fetchUniversity();\n  }, [id]);\n\n  useEffect(() => {\n    if (!id) return;\n    const fetchScholarships = async () => {\n      setScholarshipsLoading(true);\n      const { data } = await supabase\n        .from('scholarships')\n        .select('*')\n        .eq('university_id', id)\n        .eq('is_active', true);\n      setScholarships(data as Scholarship[]);\n      setScholarshipsLoading(false);\n    };\n    fetchScholarships();\n  }, [id]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#05294E] mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading university details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!university) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">University not found</h1>\n          <Link to=\"/schools\" className=\"text-[#05294E] hover:underline\">\n            Back to Universities\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Fallbacks for missing fields in real data\n  const programs = university.programs || [];\n  const address = university.address || {};\n  const contact = university.contact || {};\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header Navigation */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <Link \n            to=\"/schools\" \n            className=\"inline-flex items-center text-sm text-gray-600 hover:text-[#05294E] transition-colors\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Universities\n          </Link>\n        </div>\n      </div>\n\n      {/* Hero Section */}\n      <section className=\"relative h-80 overflow-hidden\">\n        <img\n          src={university.image || university.logo_url || '/university-placeholder.png'}\n          alt={`${university.name} campus`}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-black/40\"></div>\n        <div className=\"absolute inset-0 flex items-end\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8 w-full\">\n            <div className=\"text-white\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                  university.type === 'Private' ? 'bg-[#05294E]' : 'bg-green-600'\n                }`}>\n                  {university.type || (university.is_public ? 'Public' : 'Private')}\n                </span>\n                {university.ranking && (\n                  <span className=\"bg-yellow-500 text-black px-3 py-1 rounded-full text-sm font-bold\">\n                    #{university.ranking} Ranked\n                  </span>\n                )}\n              </div>\n              <h1 className=\"text-4xl md:text-5xl font-black mb-3\">\n                {university.name}\n              </h1>\n              <div className=\"flex items-center text-lg\">\n                <MapPin className=\"h-5 w-5 mr-2\" />\n                {university.location}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* About */}\n            <section>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">About</h2>\n              <p className=\"text-gray-600 leading-relaxed\">\n                {university.description}\n              </p>\n            </section>\n\n            {/* Programs */}\n            <section>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Academic Programs</h2>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                {programs.length > 0 ? programs.map((program: string, index: number) => (\n                  <div \n                    key={index}\n                    className=\"bg-gray-50 px-4 py-2 rounded-lg text-sm font-medium text-gray-700 text-center\"\n                  >\n                    {program}\n                  </div>\n                )) : <div className=\"text-gray-400 col-span-2 md:col-span-3\">No programs listed</div>}\n              </div>\n            </section>\n\n            {/* Scholarships */}\n            <section>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4 mt-10\">Scholarships</h2>\n              {scholarshipsLoading ? (\n                <div className=\"text-center text-slate-500 py-8\">Loading scholarships...</div>\n              ) : scholarships.length === 0 ? (\n                <div className=\"text-center text-slate-400 py-8\">No scholarships available for this university.</div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {scholarships.map((scholarship) => (\n                    <div key={scholarship.id} className=\"group bg-white rounded-3xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-slate-200 hover:-translate-y-2\">\n                      <div className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"text-xl font-bold text-slate-900 mb-3 leading-tight line-clamp-2 group-hover:text-[#05294E] transition-colors\">\n                              {scholarship.title}\n                            </h3>\n                            <div className=\"flex items-center text-slate-600 mb-4\">\n                              <Award className=\"h-4 w-4 mr-2 text-[#05294E]\" />\n                              <span className=\"text-xs font-semibold mr-1\">Scholarship</span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center mb-4\">\n                          <DollarSign className=\"h-5 w-5 mr-2 text-green-500\" />\n                          <span className=\"text-2xl font-bold text-green-700\">{\n                            scholarship.amount.toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0 })\n                          }</span>\n                        </div>\n                        <div className=\"space-y-2 mb-6\">\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-slate-500\">Level</span>\n                            <span className=\"ml-1 capitalize text-slate-700\">{scholarship.level}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-slate-500\">Field</span>\n                            <span className=\"px-2 py-1 rounded-lg text-xs font-medium text-white bg-slate-600\">{scholarship.field_of_study || 'Any Field'}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-slate-500\">Deadline</span>\n                            <div className=\"flex items-center\">\n                              <Clock className=\"h-3 w-3 mr-1 text-slate-500\" />\n                              <span className=\"text-slate-700\">{scholarship.deadline}</span>\n                            </div>\n                          </div>\n                        </div>\n                        {/* Botão Apply Now */}\n                        <div className=\"px-0 pb-0\">\n                          <button\n                            className=\"w-full bg-gradient-to-r from-[#05294E] to-slate-700 text-white py-4 px-6 rounded-2xl hover:from-[#05294E]/90 hover:to-slate-600 transition-all duration-300 font-bold text-sm uppercase tracking-wide flex items-center justify-center group-hover:shadow-xl transform group-hover:scale-105\"\n                            onClick={() => {\n                              if (!isAuthenticated) {\n                                navigate('/login');\n                              } else {\n                                alert('Application feature coming soon!');\n                              }\n                            }}\n                          >\n                            <Award className=\"h-4 w-4 mr-2\" />\n                            Apply Now\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </section>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Contact Information */}\n            <div className=\"bg-gray-50 rounded-xl p-6\">\n              <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Contact Information</h3>\n              {/* Address */}\n              <div className=\"mb-4\">\n                <h4 className=\"text-sm font-semibold text-gray-700 mb-2\">Address</h4>\n                <div className=\"text-sm text-gray-600 space-y-1\">\n                  <p>{address.street}</p>\n                  <p>{address.city}{address.city && address.state ? ',' : ''} {address.state} {address.zipCode}</p>\n                  <p>{address.country}</p>\n                </div>\n              </div>\n              {/* Contact Details */}\n              <div className=\"space-y-3\">\n                {contact.phone && (\n                  <div className=\"flex items-center\">\n                    <Phone className=\"h-4 w-4 mr-3 text-[#05294E]\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-700\">Phone</div>\n                      <div className=\"text-sm text-gray-600\">{contact.phone}</div>\n                    </div>\n                  </div>\n                )}\n                {contact.email && (\n                  <div className=\"flex items-center\">\n                    <Mail className=\"h-4 w-4 mr-3 text-[#05294E]\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-700\">General Email</div>\n                      <div className=\"text-sm text-gray-600\">{contact.email}</div>\n                    </div>\n                  </div>\n                )}\n                {contact.admissionsEmail && (\n                  <div className=\"flex items-center\">\n                    <Mail className=\"h-4 w-4 mr-3 text-[#D0151C]\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-700\">Admissions Email</div>\n                      <div className=\"text-sm text-gray-600\">{contact.admissionsEmail}</div>\n                    </div>\n                  </div>\n                )}\n                {contact.fax && (\n                  <div className=\"flex items-center\">\n                    <Fax className=\"h-4 w-4 mr-3 text-gray-500\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-700\">Fax</div>\n                      <div className=\"text-sm text-gray-600\">{contact.fax}</div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n            {/* Website Link */}\n            {university.website && (\n              <a\n                href={university.website}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"block w-full bg-[#05294E] text-white py-3 px-4 rounded-lg hover:bg-[#05294E]/90 transition-colors text-center font-medium\"\n              >\n                <div className=\"flex items-center justify-center\">\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  Visit Official Website\n                </div>\n              </a>\n            )}\n            {/* Scholarships CTA */}\n            <div className=\"bg-[#D0151C]/10 border border-[#D0151C]/20 rounded-xl p-6\">\n              <div className=\"text-center\">\n                <div className=\"bg-[#D0151C] w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Sparkles className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-bold text-gray-900 mb-2\">\n                  Scholarship Opportunities\n                </h3>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  Discover exclusive scholarships available at {university.name}\n                </p>\n                <Link\n                  to=\"/scholarships\"\n                  className=\"block bg-[#D0151C] text-white py-2 px-4 rounded-lg hover:bg-[#D0151C]/90 transition-colors text-sm font-medium\"\n                >\n                  View Scholarships\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UniversityDetail;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\stores\\applicationStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\stripe-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\supabase\\functions\\stripe-checkout\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validateParameters' is defined but never used.","line":86,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2572,2575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2572,2575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import 'jsr:@supabase/functions-js/edge-runtime.d.ts';\nimport Stripe from 'npm:stripe@17.7.0';\nimport { createClient } from 'npm:@supabase/supabase-js@2.49.1';\n\nconst supabase = createClient(Deno.env.get('SUPABASE_URL') ?? '', Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '');\nconst stripeSecret = Deno.env.get('STRIPE_SECRET_KEY')!;\nconst stripe = new Stripe(stripeSecret, {\n  appInfo: {\n    name: 'Bolt Integration',\n    version: '1.0.0',\n  },\n});\n\nfunction corsResponse(body: string | object | null, status = 200) {\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    'Content-Type': 'application/json',\n  };\n\n  if (status === 204) {\n    return new Response(null, { status, headers });\n  }\n\n  return new Response(JSON.stringify(body), {\n    status,\n    headers,\n  });\n}\n\nDeno.serve(async (req) => {\n  try {\n    if (req.method === 'OPTIONS') {\n      return corsResponse(null, 204);\n    }\n\n    const { price_id, success_url, cancel_url, mode, fee_type, metadata } = await req.json();\n    \n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      return corsResponse({ error: 'No authorization header' }, 401);\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n    \n    if (authError || !user) {\n      return corsResponse({ error: 'Invalid token' }, 401);\n    }\n\n    console.log('[stripe-checkout] Received payload:', { price_id, success_url, cancel_url, mode, fee_type, metadata });\n\n    const session = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      client_reference_id: user.id,\n      customer_email: user.email,\n      line_items: [\n        {\n          price: price_id,\n          quantity: 1,\n        },\n      ],\n      mode: mode || 'payment',\n      success_url: success_url,\n      cancel_url: cancel_url,\n      metadata: {\n        user_id: user.id,\n        fee_type: fee_type,\n        ...metadata,\n      },\n    });\n\n    console.log('[stripe-checkout] Created Stripe session with metadata:', session.metadata);\n\n    return corsResponse({ session_url: session.url }, 200);\n  } catch (error) {\n    console.error('Checkout error:', error);\n    return corsResponse({ error: 'Internal server error' }, 500);\n  }\n});\n\ntype ExpectedType = 'string' | { values: string[] };\ntype Expectations<T> = { [K in keyof T]: ExpectedType };\n\nfunction validateParameters<T extends Record<string, any>>(values: T, expected: Expectations<T>): string | undefined {\n  for (const parameter in values) {\n    const expectation = expected[parameter];\n    const value = values[parameter];\n\n    if (expectation === 'string') {\n      if (value == null) {\n        return `Missing required parameter ${parameter}`;\n      }\n      if (typeof value !== 'string') {\n        return `Expected parameter ${parameter} to be a string got ${JSON.stringify(value)}`;\n      }\n    } else {\n      if (!expectation.values.includes(value)) {\n        return `Expected parameter ${parameter} to be one of ${expectation.values.join(', ')}`;\n      }\n    }\n  }\n\n  return undefined;\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\supabase\\functions\\stripe-webhook\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1296,1299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1296,1299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1605,1608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1605,1608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'customer' is assigned a value but never used.","line":95,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is assigned a value but never used.","line":135,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":21},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":269,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":269,"endColumn":70,"suggestions":[{"messageId":"addBrackets","fix":{"range":[9309,12590],"text":"{ const session = event.data.object as Stripe.Checkout.Session;\n        \n        // Verificar se é um pagamento da taxa de inscrição\n        if (session.metadata?.payment_type === 'application_fee') {\n          const userId = session.metadata?.user_id;\n          \n          if (userId) {\n            // Atualizar o status da taxa de inscrição no perfil do usuário\n            const { error } = await supabase\n              .from('user_profiles')\n              .update({ \n                is_application_fee_paid: true,\n                updated_at: new Date().toISOString()\n              })\n              .eq('user_id', userId);\n\n            if (error) {\n              console.error('Error updating application fee status:', error);\n            } else {\n              console.log('Application fee payment processed successfully for user:', userId);\n            }\n          }\n        }\n        \n        // Novo: Verificar se é um pagamento da scholarship fee\n        if (session.metadata?.payment_type === 'scholarship_fee') {\n          const userId = session.metadata?.user_id;\n          const scholarshipsIds = session.metadata?.scholarships_ids;\n          const paymentIntentId = session.payment_intent;\n          \n          if (userId) {\n            // Atualizar o status da scholarship fee no perfil do usuário\n            const { error } = await supabase\n              .from('user_profiles')\n              .update({ \n                is_scholarship_fee_paid: true,\n                updated_at: new Date().toISOString()\n              })\n              .eq('user_id', userId);\n\n            if (error) {\n              console.error('Error updating scholarship fee status:', error);\n            } else {\n              console.log('Scholarship fee payment processed successfully for user:', userId);\n            }\n            // Se houver bolsas no metadata, registrar na tabela de pagamentos de scholarship fee\n            if (scholarshipsIds && paymentIntentId) {\n              const { error: insertError } = await supabase\n                .from('scholarship_fee_payments')\n                .insert({\n                  user_id: userId,\n                  scholarships_ids: scholarshipsIds,\n                  payment_intent_id: paymentIntentId,\n                  created_at: new Date().toISOString()\n                });\n              if (insertError) {\n                console.error('Error inserting scholarship fee payment record:', insertError);\n              } else {\n                console.log('Scholarship fee payment record inserted for user:', userId);\n              }\n            }\n          }\n        }\n        \n        // Processar outros tipos de pagamento (como a taxa de processo seletivo)\n        if (session.metadata?.payment_type === 'selection_process') {\n          const userId = session.metadata?.user_id;\n          \n          if (userId) {\n            const { error } = await supabase\n              .from('user_profiles')\n              .update({ \n                has_paid_selection_process_fee: true,\n                updated_at: new Date().toISOString()\n              })\n              .eq('user_id', userId);\n\n            if (error) {\n              console.error('Error updating selection process fee status:', error);\n            }\n          }\n        }\n        break; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import 'jsr:@supabase/functions-js/edge-runtime.d.ts';\nimport Stripe from 'npm:stripe@17.7.0';\nimport { createClient } from 'npm:@supabase/supabase-js@2.49.1';\n\nconst stripeSecret = Deno.env.get('STRIPE_SECRET_KEY')!;\nconst stripeWebhookSecret = Deno.env.get('STRIPE_WEBHOOK_SECRET')!;\nconst stripe = new Stripe(stripeSecret, {\n  appInfo: {\n    name: 'Bolt Integration',\n    version: '1.0.0',\n  },\n});\n\nconst supabase = createClient(Deno.env.get('SUPABASE_URL')!, Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!);\n\nDeno.serve(async (req) => {\n  console.log('[stripe-webhook] Received a request.');\n  try {\n    // Handle OPTIONS request for CORS preflight\n    if (req.method === 'OPTIONS') {\n      return new Response(null, { status: 204 });\n    }\n\n    if (req.method !== 'POST') {\n      return new Response('Method not allowed', { status: 405 });\n    }\n\n    // get the signature from the header\n    const signature = req.headers.get('stripe-signature');\n\n    if (!signature) {\n      return new Response('No signature found', { status: 400 });\n    }\n\n    // get the raw body\n    const body = await req.text();\n\n    // verify the webhook signature\n    let event: Stripe.Event;\n\n    try {\n      event = await stripe.webhooks.constructEventAsync(body, signature, stripeWebhookSecret);\n    } catch (error: any) {\n      console.error(`Webhook signature verification failed: ${error.message}`);\n      return new Response(`Webhook signature verification failed: ${error.message}`, { status: 400 });\n    }\n\n    EdgeRuntime.waitUntil(handleEvent(event));\n\n    return Response.json({ received: true });\n  } catch (error: any) {\n    console.error('Error processing webhook:', error);\n    return Response.json({ error: error.message }, { status: 500 });\n  }\n});\n\nasync function handleEvent(event: Stripe.Event) {\n  const stripeData = event?.data?.object ?? {};\n\n  if (!stripeData) {\n    return;\n  }\n\n  if (!('customer' in stripeData)) {\n    return;\n  }\n\n  // for one time payments, we only listen for the checkout.session.completed event\n  if (event.type === 'payment_intent.succeeded' && event.data.object.invoice === null) {\n    return;\n  }\n\n  const { customer: customerId } = stripeData;\n\n  if (!customerId || typeof customerId !== 'string') {\n    console.error(`No customer received on event: ${JSON.stringify(event)}`);\n  } else {\n    let isSubscription = true;\n\n    if (event.type === 'checkout.session.completed') {\n      const { mode } = stripeData as Stripe.Checkout.Session;\n\n      isSubscription = mode === 'subscription';\n\n      console.info(`Processing ${isSubscription ? 'subscription' : 'one-time payment'} checkout session`);\n    }\n\n    const { mode, payment_status } = stripeData as Stripe.Checkout.Session;\n\n    if (isSubscription) {\n      console.info(`Starting subscription sync for customer: ${customerId}`);\n      await syncCustomerFromStripe(customerId);\n    } else if (mode === 'payment' && payment_status === 'paid') {\n      const session = stripeData as Stripe.Checkout.Session;\n      const { metadata, payment_intent, customer } = session;\n\n      if (metadata?.payment_type === 'application_fee') {\n        const userId = metadata.user_id;\n        const scholarshipId = metadata.selected_scholarship_id;\n\n        if (!userId || !scholarshipId) {\n          console.error('Missing user_id or selected_scholarship_id in metadata for application_fee payment.');\n          return;\n        }\n\n        const { error: applicationError } = await supabase\n          .from('scholarship_applications')\n          .insert({\n            student_id: userId,\n            scholarship_id: scholarshipId,\n            status: 'pending_scholarship_fee',\n            // applied_at will be set by default in the database\n          });\n\n        if (applicationError) {\n          console.error(`Failed to create application for user ${userId} and scholarship ${scholarshipId}:`, applicationError);\n          // We can decide if we want to stop processing or just log the error\n        } else {\n          console.log(`Successfully created application for user ${userId} for scholarship ${scholarshipId}.`);\n\n          // Now, update the user_profiles table\n          const { error: profileUpdateError } = await supabase\n            .from('user_profiles')\n            .update({ is_application_fee_paid: true })\n            .eq('user_id', userId);\n\n          if (profileUpdateError) {\n            console.error(`Failed to update user_profile for user ${userId}:`, profileUpdateError);\n          } else {\n            console.log(`Successfully updated is_application_fee_paid for user ${userId}.`);\n          }\n        }\n      } else if (metadata?.payment_type === 'scholarship_fee') {\n        const applicationId = metadata.application_id;\n        const userId = metadata.user_id;\n\n        if (!applicationId) {\n            console.error('Missing application_id in metadata for scholarship_fee payment.');\n            return;\n        }\n\n        const { error: updateError } = await supabase\n            .from('scholarship_applications')\n            .update({ status: 'under_review' })\n            .eq('id', applicationId);\n\n        if (updateError) {\n            console.error(`Failed to update application status for application ${applicationId}:`, updateError);\n        } else {\n            console.log(`Successfully updated status for application ${applicationId} to under_review.`);\n        }\n      }\n\n      try {\n        // Extract the necessary information from the session\n        const {\n          id: checkout_session_id,\n          amount_subtotal,\n          amount_total,\n          currency,\n        } = stripeData as Stripe.Checkout.Session;\n\n        // Insert the order into the stripe_orders table\n        const { error: orderError } = await supabase.from('stripe_orders').insert({\n          checkout_session_id,\n          payment_intent_id: payment_intent,\n          customer_id: customerId,\n          amount_subtotal,\n          amount_total,\n          currency,\n          payment_status,\n          status: 'completed', // assuming we want to mark it as completed since payment is successful\n        });\n\n        if (orderError) {\n          console.error('Error inserting order:', orderError);\n          return;\n        }\n        console.info(`Successfully processed one-time payment for session: ${checkout_session_id}`);\n      } catch (error) {\n        console.error('Error processing one-time payment:', error);\n      }\n    }\n  }\n}\n\n// based on the excellent https://github.com/t3dotgg/stripe-recommendations\nasync function syncCustomerFromStripe(customerId: string) {\n  try {\n    // fetch latest subscription data from Stripe\n    const subscriptions = await stripe.subscriptions.list({\n      customer: customerId,\n      limit: 1,\n      status: 'all',\n      expand: ['data.default_payment_method'],\n    });\n\n    // TODO verify if needed\n    if (subscriptions.data.length === 0) {\n      console.info(`No active subscriptions found for customer: ${customerId}`);\n      const { error: noSubError } = await supabase.from('stripe_subscriptions').upsert(\n        {\n          customer_id: customerId,\n          subscription_status: 'not_started',\n        },\n        {\n          onConflict: 'customer_id',\n        },\n      );\n\n      if (noSubError) {\n        console.error('Error updating subscription status:', noSubError);\n        throw new Error('Failed to update subscription status in database');\n      }\n    }\n\n    // assumes that a customer can only have a single subscription\n    const subscription = subscriptions.data[0];\n\n    // store subscription state\n    const { error: subError } = await supabase.from('stripe_subscriptions').upsert(\n      {\n        customer_id: customerId,\n        subscription_id: subscription.id,\n        price_id: subscription.items.data[0].price.id,\n        current_period_start: subscription.current_period_start,\n        current_period_end: subscription.current_period_end,\n        cancel_at_period_end: subscription.cancel_at_period_end,\n        ...(subscription.default_payment_method && typeof subscription.default_payment_method !== 'string'\n          ? {\n              payment_method_brand: subscription.default_payment_method.card?.brand ?? null,\n              payment_method_last4: subscription.default_payment_method.card?.last4 ?? null,\n            }\n          : {}),\n        status: subscription.status,\n      },\n      {\n        onConflict: 'customer_id',\n      },\n    );\n\n    if (subError) {\n      console.error('Error syncing subscription:', subError);\n      throw new Error('Failed to sync subscription in database');\n    }\n    console.info(`Successfully synced subscription for customer: ${customerId}`);\n  } catch (error) {\n    console.error(`Failed to sync subscription for customer ${customerId}:`, error);\n    throw error;\n  }\n}\n\nexport default async function handler(req: Request) {\n  const signature = req.headers.get('stripe-signature');\n  const body = await req.text();\n\n  let event: Stripe.Event;\n\n  try {\n    event = stripe.webhooks.constructEvent(body, signature!, process.env.STRIPE_WEBHOOK_SECRET!);\n  } catch (err) {\n    console.error('Webhook signature verification failed:', err);\n    return new Response('Webhook signature verification failed', { status: 400 });\n  }\n\n  try {\n    switch (event.type) {\n      case 'checkout.session.completed':\n        const session = event.data.object as Stripe.Checkout.Session;\n        \n        // Verificar se é um pagamento da taxa de inscrição\n        if (session.metadata?.payment_type === 'application_fee') {\n          const userId = session.metadata?.user_id;\n          \n          if (userId) {\n            // Atualizar o status da taxa de inscrição no perfil do usuário\n            const { error } = await supabase\n              .from('user_profiles')\n              .update({ \n                is_application_fee_paid: true,\n                updated_at: new Date().toISOString()\n              })\n              .eq('user_id', userId);\n\n            if (error) {\n              console.error('Error updating application fee status:', error);\n            } else {\n              console.log('Application fee payment processed successfully for user:', userId);\n            }\n          }\n        }\n        \n        // Novo: Verificar se é um pagamento da scholarship fee\n        if (session.metadata?.payment_type === 'scholarship_fee') {\n          const userId = session.metadata?.user_id;\n          const scholarshipsIds = session.metadata?.scholarships_ids;\n          const paymentIntentId = session.payment_intent;\n          \n          if (userId) {\n            // Atualizar o status da scholarship fee no perfil do usuário\n            const { error } = await supabase\n              .from('user_profiles')\n              .update({ \n                is_scholarship_fee_paid: true,\n                updated_at: new Date().toISOString()\n              })\n              .eq('user_id', userId);\n\n            if (error) {\n              console.error('Error updating scholarship fee status:', error);\n            } else {\n              console.log('Scholarship fee payment processed successfully for user:', userId);\n            }\n            // Se houver bolsas no metadata, registrar na tabela de pagamentos de scholarship fee\n            if (scholarshipsIds && paymentIntentId) {\n              const { error: insertError } = await supabase\n                .from('scholarship_fee_payments')\n                .insert({\n                  user_id: userId,\n                  scholarships_ids: scholarshipsIds,\n                  payment_intent_id: paymentIntentId,\n                  created_at: new Date().toISOString()\n                });\n              if (insertError) {\n                console.error('Error inserting scholarship fee payment record:', insertError);\n              } else {\n                console.log('Scholarship fee payment record inserted for user:', userId);\n              }\n            }\n          }\n        }\n        \n        // Processar outros tipos de pagamento (como a taxa de processo seletivo)\n        if (session.metadata?.payment_type === 'selection_process') {\n          const userId = session.metadata?.user_id;\n          \n          if (userId) {\n            const { error } = await supabase\n              .from('user_profiles')\n              .update({ \n                has_paid_selection_process_fee: true,\n                updated_at: new Date().toISOString()\n              })\n              .eq('user_id', userId);\n\n            if (error) {\n              console.error('Error updating selection process fee status:', error);\n            }\n          }\n        }\n        break;\n\n      // ... handle other events as needed ...\n    }\n\n    return new Response(JSON.stringify({ received: true }), { status: 200 });\n  } catch (error) {\n    console.error('Webhook error:', error);\n    return new Response('Webhook error', { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\crash\\Downloads\\project-bolt-github-wgy8bw13 (1)\\project\\supabase\\functions\\verify-stripe-session\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4596,4599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4596,4599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import 'jsr:@supabase/functions-js/edge-runtime.d.ts';\r\nimport Stripe from 'npm:stripe@17.7.0';\r\nimport { createClient } from 'npm:@supabase/supabase-js@2.49.1';\r\n\r\nconst supabase = createClient(Deno.env.get('SUPABASE_URL') ?? '', Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '');\r\nconst stripeSecret = Deno.env.get('STRIPE_SECRET_KEY')!;\r\nconst stripe = new Stripe(stripeSecret, {\r\n  apiVersion: '2024-04-10',\r\n  appInfo: {\r\n    name: 'Bolt Integration',\r\n    version: '1.0.0',\r\n  },\r\n});\r\n\r\n// Helper function to create responses with CORS headers\r\nfunction corsResponse(body: string | object | null, status = 200) {\r\n  const headers = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n    'Access-Control-Allow-Headers': '*',\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  if (status === 204) {\r\n    return new Response(null, { status, headers });\r\n  }\r\n\r\n  return new Response(JSON.stringify(body), {\r\n    status,\r\n    headers: { ...headers },\r\n  });\r\n}\r\n\r\nDeno.serve(async (req) => {\r\n  console.log('--- verify-stripe-session: Request received ---');\r\n  try {\r\n    if (req.method === 'OPTIONS') return corsResponse(null, 204);\r\n    if (req.method !== 'POST') return corsResponse({ error: 'Method Not Allowed' }, 405);\r\n\r\n    const { sessionId } = await req.json();\r\n    if (!sessionId) return corsResponse({ error: 'Session ID is required' }, 400);\r\n    console.log(`Verifying session ID: ${sessionId}`);\r\n\r\n    const session = await stripe.checkout.sessions.retrieve(sessionId);\r\n    console.log(`Session status: ${session.status}, Payment status: ${session.payment_status}`);\r\n    \r\n    if (session.payment_status === 'paid' && session.status === 'complete') {\r\n      const userId = session.client_reference_id;\r\n      const feeType = session.metadata?.fee_type;\r\n      const scholarshipId = session.metadata?.selected_scholarship_id;\r\n\r\n      console.log(`Processing successful payment. UserID: ${userId}, FeeType: ${feeType}, ScholarshipID: ${scholarshipId}`);\r\n\r\n      if (!userId) return corsResponse({ error: 'User ID (client_reference_id) missing in session.' }, 400);\r\n\r\n      // --- Lógica Condicional de Pagamento ---\r\n\r\n      if (feeType === 'application_fee') {\r\n        console.log('Processing: Application Fee');\r\n        \r\n        // 1. Atualizar perfil do usuário\r\n        const { error: profileError } = await supabase\r\n          .from('user_profiles')\r\n          .update({ is_application_fee_paid: true })\r\n          .eq('user_id', userId);\r\n        if (profileError) throw new Error(`Failed to update user_profiles: ${profileError.message}`);\r\n        console.log(`User profile updated for user: ${userId}`);\r\n        \r\n        // 2. Criar a aplicação se houver bolsa selecionada\r\n        if (scholarshipId) {\r\n          const { error: appError } = await supabase.from('scholarship_applications').insert({\r\n            student_id: userId,\r\n            scholarship_id: scholarshipId,\r\n            status: 'under_review', \r\n          });\r\n          if (appError) throw new Error(`Failed to create scholarship_application: ${appError.message}`);\r\n          console.log(`Application created for scholarship: ${scholarshipId}`);\r\n        }\r\n        \r\n        // 3. Limpar o carrinho do usuário\r\n        const { error: cartError } = await supabase.from('user_cart').delete().eq('user_id', userId);\r\n        if (cartError) throw new Error(`Failed to clear user_cart: ${cartError.message}`);\r\n        console.log(`Cart cleared for user: ${userId}`);\r\n\r\n      } else if (feeType === 'enrollment_fee') {\r\n        console.log('Processing: Enrollment Fee');\r\n        \r\n        if (!scholarshipId) return corsResponse({ error: 'Scholarship ID missing for enrollment fee.' }, 400);\r\n\r\n        // Atualizar o status da aplicação existente\r\n        const { error: updateError } = await supabase\r\n          .from('scholarship_applications')\r\n          .update({ status: 'enrollment_fee_paid' })\r\n          .eq('student_id', userId)\r\n          .eq('scholarship_id', scholarshipId);\r\n        if (updateError) throw new Error(`Failed to update application status: ${updateError.message}`);\r\n        console.log(`Application status updated for enrollment: ${scholarshipId}`);\r\n      } else {\r\n        console.warn(`Unhandled fee_type: ${feeType}`);\r\n      }\r\n\r\n      return corsResponse({ message: 'Session verified and processed successfully.' }, 200);\r\n    } else {\r\n      console.log('Session not paid or complete.');\r\n      return corsResponse({ message: 'Session not ready.', status: session.status }, 202);\r\n    }\r\n  } catch (error: any) {\r\n    console.error(`--- CRITICAL ERROR in verify-stripe-session ---:`, error.message);\r\n    return corsResponse({ error: 'An unexpected error occurred.', details: error.message }, 500);\r\n  }\r\n}); ","usedDeprecatedRules":[]}]