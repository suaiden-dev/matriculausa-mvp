-- üîí CRIAR TABELA DE LOCKS PARA WORKER
-- Evita execu√ß√µes simult√¢neas do email-queue-worker

CREATE TABLE IF NOT EXISTS public.worker_locks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  lock_key TEXT NOT NULL UNIQUE,
  is_active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  expires_at TIMESTAMPTZ,
  metadata JSONB DEFAULT '{}'::jsonb
);

-- √çndices para performance
CREATE INDEX IF NOT EXISTS idx_worker_locks_key_active 
ON public.worker_locks(lock_key, is_active);

CREATE INDEX IF NOT EXISTS idx_worker_locks_created_at 
ON public.worker_locks(created_at);

-- RLS (Row Level Security) - permitir acesso apenas para service role
ALTER TABLE public.worker_locks ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para permitir acesso total para service role
CREATE POLICY "Service role can manage worker locks" ON public.worker_locks
FOR ALL USING (true);

-- Coment√°rios para documenta√ß√£o
COMMENT ON TABLE public.worker_locks IS 'Tabela para controlar locks de execu√ß√£o do worker e evitar execu√ß√µes simult√¢neas';
COMMENT ON COLUMN public.worker_locks.lock_key IS 'Chave √∫nica do lock (ex: email_worker_lock)';
COMMENT ON COLUMN public.worker_locks.is_active IS 'Se o lock est√° ativo';
COMMENT ON COLUMN public.worker_locks.expires_at IS 'Quando o lock expira (opcional)';
COMMENT ON COLUMN public.worker_locks.metadata IS 'Metadados adicionais do lock';
